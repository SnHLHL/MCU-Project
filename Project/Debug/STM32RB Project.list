
STM32RB Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08009bc0  08009bc0  00019bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a10c  0800a10c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a10c  0800a10c  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a10c  0800a10c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a10c  0800a10c  0001a10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a110  0800a110  0001a110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000020c  0800a320  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  0800a320  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2d8  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003365  00000000  00000000  0003b50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0003e878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003f990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af69  00000000  00000000  00040960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184f3  00000000  00000000  0005b8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef49  00000000  00000000  00073dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102d05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000575c  00000000  00000000  00102d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ba4 	.word	0x08009ba4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	08009ba4 	.word	0x08009ba4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <buffer_update>:
 */


#include "buffer_update.h"

void buffer_update(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	if(status == 1||2||3||4||5||10){
			if(is_button_pressed_short(2) == 1){
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f001 fcb3 	bl	8002614 <is_button_pressed_short>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d11d      	bne.n	8000cf0 <buffer_update+0x4c>
				if(tmpRED != defaultTimeRed) tmpRED = defaultTimeRed;
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <buffer_update+0xd4>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <buffer_update+0xd8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d003      	beq.n	8000cc8 <buffer_update+0x24>
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <buffer_update+0xd8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a2c      	ldr	r2, [pc, #176]	; (8000d78 <buffer_update+0xd4>)
 8000cc6:	6013      	str	r3, [r2, #0]
				if(tmpAMBER != defaultTimeAmber) tmpAMBER = defaultTimeAmber;
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <buffer_update+0xdc>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <buffer_update+0xe0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d003      	beq.n	8000cdc <buffer_update+0x38>
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <buffer_update+0xe0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a29      	ldr	r2, [pc, #164]	; (8000d80 <buffer_update+0xdc>)
 8000cda:	6013      	str	r3, [r2, #0]
				if(tmpGREEN != defaultTimeGreen) tmpRED = defaultTimeGreen;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <buffer_update+0xe4>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <buffer_update+0xe8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d003      	beq.n	8000cf0 <buffer_update+0x4c>
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <buffer_update+0xe8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <buffer_update+0xd4>)
 8000cee:	6013      	str	r3, [r2, #0]
			}
			if(is_button_pressed_1s(2) == 1){
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f001 fcad 	bl	8002650 <is_button_pressed_1s>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d13a      	bne.n	8000d72 <buffer_update+0xce>
				if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) != 0){
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <buffer_update+0xe8>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <buffer_update+0xe0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	441a      	add	r2, r3
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <buffer_update+0xd8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d031      	beq.n	8000d72 <buffer_update+0xce>
					if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) > 0){
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <buffer_update+0xd8>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <buffer_update+0xe8>)
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <buffer_update+0xe0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	440b      	add	r3, r1
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	dd0b      	ble.n	8000d3a <buffer_update+0x96>
						defaultTimeAmber++;
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <buffer_update+0xe0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <buffer_update+0xe0>)
 8000d2a:	6013      	str	r3, [r2, #0]
						defaultTimeGreen = defaultTimeRed - defaultTimeAmber;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <buffer_update+0xd8>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <buffer_update+0xe0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <buffer_update+0xe8>)
 8000d38:	6013      	str	r3, [r2, #0]
					}
					if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) < 0){
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <buffer_update+0xd8>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <buffer_update+0xe8>)
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <buffer_update+0xe0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	440b      	add	r3, r1
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da11      	bge.n	8000d72 <buffer_update+0xce>
						if(defaultTimeRed < (defaultTimeGreen + defaultTimeAmber)){
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <buffer_update+0xe8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <buffer_update+0xe0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	441a      	add	r2, r3
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <buffer_update+0xd8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dd08      	ble.n	8000d72 <buffer_update+0xce>
							defaultTimeAmber = 2;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <buffer_update+0xe0>)
 8000d62:	2202      	movs	r2, #2
 8000d64:	601a      	str	r2, [r3, #0]
							defaultTimeGreen = 3;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <buffer_update+0xe8>)
 8000d68:	2203      	movs	r2, #3
 8000d6a:	601a      	str	r2, [r3, #0]
							defaultTimeRed = 5;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <buffer_update+0xd8>)
 8000d6e:	2205      	movs	r2, #5
 8000d70:	601a      	str	r2, [r3, #0]
						}
					}
				}
			}
	}
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000024 	.word	0x20000024
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	2000002c 	.word	0x2000002c
 8000d84:	20000014 	.word	0x20000014
 8000d88:	20000028 	.word	0x20000028
 8000d8c:	20000010 	.word	0x20000010

08000d90 <fsm_automatic_run>:
 *      Author: phuct
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	switch(status){
 8000d94:	4b97      	ldr	r3, [pc, #604]	; (8000ff4 <fsm_automatic_run+0x264>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	f200 83ea 	bhi.w	8001574 <fsm_automatic_run+0x7e4>
 8000da0:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <fsm_automatic_run+0x18>)
 8000da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da6:	bf00      	nop
 8000da8:	08000dbd 	.word	0x08000dbd
 8000dac:	08000e53 	.word	0x08000e53
 8000db0:	08001041 	.word	0x08001041
 8000db4:	080011e9 	.word	0x080011e9
 8000db8:	080013cf 	.word	0x080013cf
	case INIT:
		//-----INIT: the status is assigned AUTO_RED_GREEN-----//
		//assign timeRED, timeGREEN, timeAMBER
		//assign tmpRED, tmpAMBER, tmpGREEN
		setTrafficOff();
 8000dbc:	f002 f96a 	bl	8003094 <setTrafficOff>
		status = AUTO_RED_GREEN;
 8000dc0:	4b8c      	ldr	r3, [pc, #560]	; (8000ff4 <fsm_automatic_run+0x264>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	601a      	str	r2, [r3, #0]
		setTimer1(defaultTimeGreen*1000); //Multiply by 1000 as we input with unit second
 8000dc6:	4b8c      	ldr	r3, [pc, #560]	; (8000ff8 <fsm_automatic_run+0x268>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 f82c 	bl	8002e30 <setTimer1>
		timeRED = defaultTimeRed;
 8000dd8:	4b88      	ldr	r3, [pc, #544]	; (8000ffc <fsm_automatic_run+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a88      	ldr	r2, [pc, #544]	; (8001000 <fsm_automatic_run+0x270>)
 8000dde:	6013      	str	r3, [r2, #0]
		timeGREEN = defaultTimeGreen;
 8000de0:	4b85      	ldr	r3, [pc, #532]	; (8000ff8 <fsm_automatic_run+0x268>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a87      	ldr	r2, [pc, #540]	; (8001004 <fsm_automatic_run+0x274>)
 8000de6:	6013      	str	r3, [r2, #0]
		tmpRED = defaultTimeRed;
 8000de8:	4b84      	ldr	r3, [pc, #528]	; (8000ffc <fsm_automatic_run+0x26c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a86      	ldr	r2, [pc, #536]	; (8001008 <fsm_automatic_run+0x278>)
 8000dee:	6013      	str	r3, [r2, #0]
		tmpAMBER = defaultTimeAmber;
 8000df0:	4b86      	ldr	r3, [pc, #536]	; (800100c <fsm_automatic_run+0x27c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a86      	ldr	r2, [pc, #536]	; (8001010 <fsm_automatic_run+0x280>)
 8000df6:	6013      	str	r3, [r2, #0]
		tmpGREEN = defaultTimeGreen;
 8000df8:	4b7f      	ldr	r3, [pc, #508]	; (8000ff8 <fsm_automatic_run+0x268>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a85      	ldr	r2, [pc, #532]	; (8001014 <fsm_automatic_run+0x284>)
 8000dfe:	6013      	str	r3, [r2, #0]
		setTimer2(1000);
 8000e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e04:	f002 f830 	bl	8002e68 <setTimer2>
		sprintf(buffer1, "Road1: %.2f", (float)timeRED--);
 8000e08:	4b7d      	ldr	r3, [pc, #500]	; (8001000 <fsm_automatic_run+0x270>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	1e5a      	subs	r2, r3, #1
 8000e0e:	497c      	ldr	r1, [pc, #496]	; (8001000 <fsm_automatic_run+0x270>)
 8000e10:	600a      	str	r2, [r1, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fef2 	bl	8000bfc <__aeabi_i2f>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb04 	bl	8000428 <__aeabi_f2d>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	497c      	ldr	r1, [pc, #496]	; (8001018 <fsm_automatic_run+0x288>)
 8000e26:	487d      	ldr	r0, [pc, #500]	; (800101c <fsm_automatic_run+0x28c>)
 8000e28:	f006 fc84 	bl	8007734 <siprintf>
		sprintf(buffer2, "Road2: %.2f", (float)timeGREEN--);
 8000e2c:	4b75      	ldr	r3, [pc, #468]	; (8001004 <fsm_automatic_run+0x274>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	4974      	ldr	r1, [pc, #464]	; (8001004 <fsm_automatic_run+0x274>)
 8000e34:	600a      	str	r2, [r1, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fee0 	bl	8000bfc <__aeabi_i2f>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff faf2 	bl	8000428 <__aeabi_f2d>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4975      	ldr	r1, [pc, #468]	; (8001020 <fsm_automatic_run+0x290>)
 8000e4a:	4876      	ldr	r0, [pc, #472]	; (8001024 <fsm_automatic_run+0x294>)
 8000e4c:	f006 fc72 	bl	8007734 <siprintf>
		break;
 8000e50:	e399      	b.n	8001586 <fsm_automatic_run+0x7f6>
		//-----AUTO_RED_GREEN: Red LEDs in Road 1 is ON while Green LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the green light to amber light by status AUTO_RED_AMBER
		//and update the ClockBuffer for displaying the timer for Amber and Red
		//if timer2_flag = 1, update and start counting timer for Red and Green
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficRed1();
 8000e52:	f002 f8b3 	bl	8002fbc <setTrafficRed1>
		setTrafficGreen2();
 8000e56:	f002 f90b 	bl	8003070 <setTrafficGreen2>
		if(timer1_flag == 1){
 8000e5a:	4b73      	ldr	r3, [pc, #460]	; (8001028 <fsm_automatic_run+0x298>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d137      	bne.n	8000ed2 <fsm_automatic_run+0x142>
			status = AUTO_RED_AMBER;
 8000e62:	4b64      	ldr	r3, [pc, #400]	; (8000ff4 <fsm_automatic_run+0x264>)
 8000e64:	2203      	movs	r2, #3
 8000e66:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeAmber*1000);
 8000e68:	4b68      	ldr	r3, [pc, #416]	; (800100c <fsm_automatic_run+0x27c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 ffdb 	bl	8002e30 <setTimer1>
			timeAMBER = defaultTimeAmber;
 8000e7a:	4b64      	ldr	r3, [pc, #400]	; (800100c <fsm_automatic_run+0x27c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a6b      	ldr	r2, [pc, #428]	; (800102c <fsm_automatic_run+0x29c>)
 8000e80:	6013      	str	r3, [r2, #0]
//			updateClockBuffer(timeRED--,timeAMBER--);
			sprintf(buffer1, "Road1: %.2f", (float)timeRED--);
 8000e82:	4b5f      	ldr	r3, [pc, #380]	; (8001000 <fsm_automatic_run+0x270>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	495d      	ldr	r1, [pc, #372]	; (8001000 <fsm_automatic_run+0x270>)
 8000e8a:	600a      	str	r2, [r1, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff feb5 	bl	8000bfc <__aeabi_i2f>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fac7 	bl	8000428 <__aeabi_f2d>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	495e      	ldr	r1, [pc, #376]	; (8001018 <fsm_automatic_run+0x288>)
 8000ea0:	485e      	ldr	r0, [pc, #376]	; (800101c <fsm_automatic_run+0x28c>)
 8000ea2:	f006 fc47 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeAMBER--);
 8000ea6:	4b61      	ldr	r3, [pc, #388]	; (800102c <fsm_automatic_run+0x29c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	1e5a      	subs	r2, r3, #1
 8000eac:	495f      	ldr	r1, [pc, #380]	; (800102c <fsm_automatic_run+0x29c>)
 8000eae:	600a      	str	r2, [r1, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fea3 	bl	8000bfc <__aeabi_i2f>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fab5 	bl	8000428 <__aeabi_f2d>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4957      	ldr	r1, [pc, #348]	; (8001020 <fsm_automatic_run+0x290>)
 8000ec4:	4857      	ldr	r0, [pc, #348]	; (8001024 <fsm_automatic_run+0x294>)
 8000ec6:	f006 fc35 	bl	8007734 <siprintf>
			setTimer2(1000);
 8000eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ece:	f001 ffcb 	bl	8002e68 <setTimer2>
		}
		if(timer2_flag == 1){
 8000ed2:	4b57      	ldr	r3, [pc, #348]	; (8001030 <fsm_automatic_run+0x2a0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d127      	bne.n	8000f2a <fsm_automatic_run+0x19a>
//			timeRED--;
//			timeGREEN--;
//			updateClockBuffer(timeRED--,timeGREEN--);
			sprintf(buffer1, "Road1: %.2f", (float)timeRED--);
 8000eda:	4b49      	ldr	r3, [pc, #292]	; (8001000 <fsm_automatic_run+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1e5a      	subs	r2, r3, #1
 8000ee0:	4947      	ldr	r1, [pc, #284]	; (8001000 <fsm_automatic_run+0x270>)
 8000ee2:	600a      	str	r2, [r1, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe89 	bl	8000bfc <__aeabi_i2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fa9b 	bl	8000428 <__aeabi_f2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4948      	ldr	r1, [pc, #288]	; (8001018 <fsm_automatic_run+0x288>)
 8000ef8:	4848      	ldr	r0, [pc, #288]	; (800101c <fsm_automatic_run+0x28c>)
 8000efa:	f006 fc1b 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeGREEN--);
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <fsm_automatic_run+0x274>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1e5a      	subs	r2, r3, #1
 8000f04:	493f      	ldr	r1, [pc, #252]	; (8001004 <fsm_automatic_run+0x274>)
 8000f06:	600a      	str	r2, [r1, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fe77 	bl	8000bfc <__aeabi_i2f>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa89 	bl	8000428 <__aeabi_f2d>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4941      	ldr	r1, [pc, #260]	; (8001020 <fsm_automatic_run+0x290>)
 8000f1c:	4841      	ldr	r0, [pc, #260]	; (8001024 <fsm_automatic_run+0x294>)
 8000f1e:	f006 fc09 	bl	8007734 <siprintf>
			setTimer2(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f001 ff9f 	bl	8002e68 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f001 fb72 	bl	8002614 <is_button_pressed_short>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d11d      	bne.n	8000f72 <fsm_automatic_run+0x1e2>
			setTimer1(500);
 8000f36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3a:	f001 ff79 	bl	8002e30 <setTimer1>
			status = MAN_MODE2;
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <fsm_automatic_run+0x264>)
 8000f40:	220b      	movs	r2, #11
 8000f42:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 8000f44:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f48:	f001 ffc6 	bl	8002ed8 <setTimer4>
			sprintf(buffer1, "Mode: Manual 2");
 8000f4c:	4939      	ldr	r1, [pc, #228]	; (8001034 <fsm_automatic_run+0x2a4>)
 8000f4e:	4833      	ldr	r0, [pc, #204]	; (800101c <fsm_automatic_run+0x28c>)
 8000f50:	f006 fbf0 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 8000f54:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <fsm_automatic_run+0x278>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe4f 	bl	8000bfc <__aeabi_i2f>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fa61 	bl	8000428 <__aeabi_f2d>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4933      	ldr	r1, [pc, #204]	; (8001038 <fsm_automatic_run+0x2a8>)
 8000f6c:	482d      	ldr	r0, [pc, #180]	; (8001024 <fsm_automatic_run+0x294>)
 8000f6e:	f006 fbe1 	bl	8007734 <siprintf>
		}
		if(is_button_pressed_1s(0) == 1){
 8000f72:	2000      	movs	r0, #0
 8000f74:	f001 fb6c 	bl	8002650 <is_button_pressed_1s>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d118      	bne.n	8000fb0 <fsm_automatic_run+0x220>
			setTimer1(250);
 8000f7e:	20fa      	movs	r0, #250	; 0xfa
 8000f80:	f001 ff56 	bl	8002e30 <setTimer1>
			status = MAN_MODE2;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <fsm_automatic_run+0x264>)
 8000f86:	220b      	movs	r2, #11
 8000f88:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 2");
 8000f8a:	492a      	ldr	r1, [pc, #168]	; (8001034 <fsm_automatic_run+0x2a4>)
 8000f8c:	4823      	ldr	r0, [pc, #140]	; (800101c <fsm_automatic_run+0x28c>)
 8000f8e:	f006 fbd1 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <fsm_automatic_run+0x278>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fe30 	bl	8000bfc <__aeabi_i2f>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fa42 	bl	8000428 <__aeabi_f2d>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4923      	ldr	r1, [pc, #140]	; (8001038 <fsm_automatic_run+0x2a8>)
 8000faa:	481e      	ldr	r0, [pc, #120]	; (8001024 <fsm_automatic_run+0x294>)
 8000fac:	f006 fbc2 	bl	8007734 <siprintf>
		}
		if(is_button_pressed_short(1) == 1){
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f001 fb2f 	bl	8002614 <is_button_pressed_short>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	f040 82dd 	bne.w	8001578 <fsm_automatic_run+0x7e8>
			setTimer1(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc2:	f001 ff35 	bl	8002e30 <setTimer1>
			status = SET_MODE1;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <fsm_automatic_run+0x264>)
 8000fc8:	220e      	movs	r2, #14
 8000fca:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Setting 1");
 8000fcc:	491b      	ldr	r1, [pc, #108]	; (800103c <fsm_automatic_run+0x2ac>)
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <fsm_automatic_run+0x28c>)
 8000fd0:	f006 fbb0 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <fsm_automatic_run+0x278>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fe0f 	bl	8000bfc <__aeabi_i2f>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa21 	bl	8000428 <__aeabi_f2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4913      	ldr	r1, [pc, #76]	; (8001038 <fsm_automatic_run+0x2a8>)
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <fsm_automatic_run+0x294>)
 8000fee:	f006 fba1 	bl	8007734 <siprintf>
		}
		break;
 8000ff2:	e2c1      	b.n	8001578 <fsm_automatic_run+0x7e8>
 8000ff4:	2000022c 	.word	0x2000022c
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	2000000c 	.word	0x2000000c
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004
 8001008:	20000024 	.word	0x20000024
 800100c:	20000014 	.word	0x20000014
 8001010:	2000002c 	.word	0x2000002c
 8001014:	20000028 	.word	0x20000028
 8001018:	08009bc0 	.word	0x08009bc0
 800101c:	200002a4 	.word	0x200002a4
 8001020:	08009bcc 	.word	0x08009bcc
 8001024:	20000284 	.word	0x20000284
 8001028:	20000260 	.word	0x20000260
 800102c:	20000008 	.word	0x20000008
 8001030:	20000268 	.word	0x20000268
 8001034:	08009bd8 	.word	0x08009bd8
 8001038:	08009be8 	.word	0x08009be8
 800103c:	08009bf8 	.word	0x08009bf8
		//-----AUTO_RED_AMBER: Red LEDs in Road 1 is ON while Amber LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the red light to green light; and amber light to red light by status AUTO_GREEN_RED
		//and update the ClockBuffer for displaying the timer for Green and Red
		//if timer2_flag = 1, update and start counting timer for Red and Amber
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficRed1();
 8001040:	f001 ffbc 	bl	8002fbc <setTrafficRed1>
		setTrafficAmber2();
 8001044:	f002 f802 	bl	800304c <setTrafficAmber2>
		if(timer1_flag == 1){
 8001048:	4baf      	ldr	r3, [pc, #700]	; (8001308 <fsm_automatic_run+0x578>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d13b      	bne.n	80010c8 <fsm_automatic_run+0x338>
			status = AUTO_GREEN_RED;
 8001050:	4bae      	ldr	r3, [pc, #696]	; (800130c <fsm_automatic_run+0x57c>)
 8001052:	2204      	movs	r2, #4
 8001054:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 8001056:	4bae      	ldr	r3, [pc, #696]	; (8001310 <fsm_automatic_run+0x580>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fee4 	bl	8002e30 <setTimer1>
			timeGREEN = defaultTimeGreen;
 8001068:	4ba9      	ldr	r3, [pc, #676]	; (8001310 <fsm_automatic_run+0x580>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4aa9      	ldr	r2, [pc, #676]	; (8001314 <fsm_automatic_run+0x584>)
 800106e:	6013      	str	r3, [r2, #0]
			timeRED = defaultTimeRed;
 8001070:	4ba9      	ldr	r3, [pc, #676]	; (8001318 <fsm_automatic_run+0x588>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4aa9      	ldr	r2, [pc, #676]	; (800131c <fsm_automatic_run+0x58c>)
 8001076:	6013      	str	r3, [r2, #0]
//			updateClockBuffer(timeGREEN--,timeRED--);
			sprintf(buffer1, "Road1: %.2f", (float)timeGREEN--);
 8001078:	4ba6      	ldr	r3, [pc, #664]	; (8001314 <fsm_automatic_run+0x584>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	49a5      	ldr	r1, [pc, #660]	; (8001314 <fsm_automatic_run+0x584>)
 8001080:	600a      	str	r2, [r1, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fdba 	bl	8000bfc <__aeabi_i2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9cc 	bl	8000428 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	49a2      	ldr	r1, [pc, #648]	; (8001320 <fsm_automatic_run+0x590>)
 8001096:	48a3      	ldr	r0, [pc, #652]	; (8001324 <fsm_automatic_run+0x594>)
 8001098:	f006 fb4c 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeRED--);
 800109c:	4b9f      	ldr	r3, [pc, #636]	; (800131c <fsm_automatic_run+0x58c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	499e      	ldr	r1, [pc, #632]	; (800131c <fsm_automatic_run+0x58c>)
 80010a4:	600a      	str	r2, [r1, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fda8 	bl	8000bfc <__aeabi_i2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f9ba 	bl	8000428 <__aeabi_f2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	499b      	ldr	r1, [pc, #620]	; (8001328 <fsm_automatic_run+0x598>)
 80010ba:	489c      	ldr	r0, [pc, #624]	; (800132c <fsm_automatic_run+0x59c>)
 80010bc:	f006 fb3a 	bl	8007734 <siprintf>
			setTimer2(1000);
 80010c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c4:	f001 fed0 	bl	8002e68 <setTimer2>
		}
		if(timer2_flag == 1){
 80010c8:	4b99      	ldr	r3, [pc, #612]	; (8001330 <fsm_automatic_run+0x5a0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d127      	bne.n	8001120 <fsm_automatic_run+0x390>
//			timeRED--;
//			timeAMBER--;
//			updateClockBuffer(timeRED--,timeAMBER--);
			sprintf(buffer1, "Road1: %.2f", (float)timeRED--);
 80010d0:	4b92      	ldr	r3, [pc, #584]	; (800131c <fsm_automatic_run+0x58c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1e5a      	subs	r2, r3, #1
 80010d6:	4991      	ldr	r1, [pc, #580]	; (800131c <fsm_automatic_run+0x58c>)
 80010d8:	600a      	str	r2, [r1, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fd8e 	bl	8000bfc <__aeabi_i2f>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f9a0 	bl	8000428 <__aeabi_f2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	498c      	ldr	r1, [pc, #560]	; (8001320 <fsm_automatic_run+0x590>)
 80010ee:	488d      	ldr	r0, [pc, #564]	; (8001324 <fsm_automatic_run+0x594>)
 80010f0:	f006 fb20 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeAMBER--);
 80010f4:	4b8f      	ldr	r3, [pc, #572]	; (8001334 <fsm_automatic_run+0x5a4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	498e      	ldr	r1, [pc, #568]	; (8001334 <fsm_automatic_run+0x5a4>)
 80010fc:	600a      	str	r2, [r1, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fd7c 	bl	8000bfc <__aeabi_i2f>
 8001104:	4603      	mov	r3, r0
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f98e 	bl	8000428 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4985      	ldr	r1, [pc, #532]	; (8001328 <fsm_automatic_run+0x598>)
 8001112:	4886      	ldr	r0, [pc, #536]	; (800132c <fsm_automatic_run+0x59c>)
 8001114:	f006 fb0e 	bl	8007734 <siprintf>
			setTimer2(1000);
 8001118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800111c:	f001 fea4 	bl	8002e68 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 8001120:	2000      	movs	r0, #0
 8001122:	f001 fa77 	bl	8002614 <is_button_pressed_short>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d11c      	bne.n	8001166 <fsm_automatic_run+0x3d6>
			setTimer1(250);
 800112c:	20fa      	movs	r0, #250	; 0xfa
 800112e:	f001 fe7f 	bl	8002e30 <setTimer1>
			status = MAN_MODE2;
 8001132:	4b76      	ldr	r3, [pc, #472]	; (800130c <fsm_automatic_run+0x57c>)
 8001134:	220b      	movs	r2, #11
 8001136:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 8001138:	f241 3088 	movw	r0, #5000	; 0x1388
 800113c:	f001 fecc 	bl	8002ed8 <setTimer4>
			sprintf(buffer1, "Mode: Manual 2");
 8001140:	497d      	ldr	r1, [pc, #500]	; (8001338 <fsm_automatic_run+0x5a8>)
 8001142:	4878      	ldr	r0, [pc, #480]	; (8001324 <fsm_automatic_run+0x594>)
 8001144:	f006 faf6 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 8001148:	4b7c      	ldr	r3, [pc, #496]	; (800133c <fsm_automatic_run+0x5ac>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fd55 	bl	8000bfc <__aeabi_i2f>
 8001152:	4603      	mov	r3, r0
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f967 	bl	8000428 <__aeabi_f2d>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4978      	ldr	r1, [pc, #480]	; (8001340 <fsm_automatic_run+0x5b0>)
 8001160:	4872      	ldr	r0, [pc, #456]	; (800132c <fsm_automatic_run+0x59c>)
 8001162:	f006 fae7 	bl	8007734 <siprintf>
		}
		if(is_button_pressed_1s(0) == 1){
 8001166:	2000      	movs	r0, #0
 8001168:	f001 fa72 	bl	8002650 <is_button_pressed_1s>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	d118      	bne.n	80011a4 <fsm_automatic_run+0x414>
			setTimer1(250);
 8001172:	20fa      	movs	r0, #250	; 0xfa
 8001174:	f001 fe5c 	bl	8002e30 <setTimer1>
			status = MAN_MODE2;
 8001178:	4b64      	ldr	r3, [pc, #400]	; (800130c <fsm_automatic_run+0x57c>)
 800117a:	220b      	movs	r2, #11
 800117c:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 2");
 800117e:	496e      	ldr	r1, [pc, #440]	; (8001338 <fsm_automatic_run+0x5a8>)
 8001180:	4868      	ldr	r0, [pc, #416]	; (8001324 <fsm_automatic_run+0x594>)
 8001182:	f006 fad7 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 8001186:	4b6d      	ldr	r3, [pc, #436]	; (800133c <fsm_automatic_run+0x5ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fd36 	bl	8000bfc <__aeabi_i2f>
 8001190:	4603      	mov	r3, r0
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f948 	bl	8000428 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4968      	ldr	r1, [pc, #416]	; (8001340 <fsm_automatic_run+0x5b0>)
 800119e:	4863      	ldr	r0, [pc, #396]	; (800132c <fsm_automatic_run+0x59c>)
 80011a0:	f006 fac8 	bl	8007734 <siprintf>
		}
		if(is_button_pressed_short(1) == 1){
 80011a4:	2001      	movs	r0, #1
 80011a6:	f001 fa35 	bl	8002614 <is_button_pressed_short>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	f040 81e5 	bne.w	800157c <fsm_automatic_run+0x7ec>
			setTimer1(1000);
 80011b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b6:	f001 fe3b 	bl	8002e30 <setTimer1>
			status = SET_MODE1;
 80011ba:	4b54      	ldr	r3, [pc, #336]	; (800130c <fsm_automatic_run+0x57c>)
 80011bc:	220e      	movs	r2, #14
 80011be:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Setting 1");
 80011c0:	4960      	ldr	r1, [pc, #384]	; (8001344 <fsm_automatic_run+0x5b4>)
 80011c2:	4858      	ldr	r0, [pc, #352]	; (8001324 <fsm_automatic_run+0x594>)
 80011c4:	f006 fab6 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 80011c8:	4b5c      	ldr	r3, [pc, #368]	; (800133c <fsm_automatic_run+0x5ac>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fd15 	bl	8000bfc <__aeabi_i2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f927 	bl	8000428 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4958      	ldr	r1, [pc, #352]	; (8001340 <fsm_automatic_run+0x5b0>)
 80011e0:	4852      	ldr	r0, [pc, #328]	; (800132c <fsm_automatic_run+0x59c>)
 80011e2:	f006 faa7 	bl	8007734 <siprintf>
		}
		break;
 80011e6:	e1c9      	b.n	800157c <fsm_automatic_run+0x7ec>
		//-----AUTO_GREEN_RED: Green LEDs in Road 1 is ON while Red LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the green light to red light by status AUTO_AMBER_RED
		//and update the ClockBuffer for displaying the timer for Amber and Red
		//if timer2_flag = 1, update and start counting timer for Green and Red
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficGreen1();
 80011e8:	f001 ff0c 	bl	8003004 <setTrafficGreen1>
		setTrafficRed2();
 80011ec:	f001 ff1c 	bl	8003028 <setTrafficRed2>
		if(timer1_flag == 1){
 80011f0:	4b45      	ldr	r3, [pc, #276]	; (8001308 <fsm_automatic_run+0x578>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d137      	bne.n	8001268 <fsm_automatic_run+0x4d8>
			status = AUTO_AMBER_RED;
 80011f8:	4b44      	ldr	r3, [pc, #272]	; (800130c <fsm_automatic_run+0x57c>)
 80011fa:	2205      	movs	r2, #5
 80011fc:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeAmber*1000);
 80011fe:	4b52      	ldr	r3, [pc, #328]	; (8001348 <fsm_automatic_run+0x5b8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001206:	fb02 f303 	mul.w	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fe10 	bl	8002e30 <setTimer1>
			timeAMBER = defaultTimeAmber;
 8001210:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <fsm_automatic_run+0x5b8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a47      	ldr	r2, [pc, #284]	; (8001334 <fsm_automatic_run+0x5a4>)
 8001216:	6013      	str	r3, [r2, #0]
//			updateClockBuffer(timeAMBER--,timeRED--);
			sprintf(buffer1, "Road1: %.2f", (float)timeAMBER--);
 8001218:	4b46      	ldr	r3, [pc, #280]	; (8001334 <fsm_automatic_run+0x5a4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	4945      	ldr	r1, [pc, #276]	; (8001334 <fsm_automatic_run+0x5a4>)
 8001220:	600a      	str	r2, [r1, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fcea 	bl	8000bfc <__aeabi_i2f>
 8001228:	4603      	mov	r3, r0
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f8fc 	bl	8000428 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	493a      	ldr	r1, [pc, #232]	; (8001320 <fsm_automatic_run+0x590>)
 8001236:	483b      	ldr	r0, [pc, #236]	; (8001324 <fsm_automatic_run+0x594>)
 8001238:	f006 fa7c 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeRED--);
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <fsm_automatic_run+0x58c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	1e5a      	subs	r2, r3, #1
 8001242:	4936      	ldr	r1, [pc, #216]	; (800131c <fsm_automatic_run+0x58c>)
 8001244:	600a      	str	r2, [r1, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fcd8 	bl	8000bfc <__aeabi_i2f>
 800124c:	4603      	mov	r3, r0
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f8ea 	bl	8000428 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4933      	ldr	r1, [pc, #204]	; (8001328 <fsm_automatic_run+0x598>)
 800125a:	4834      	ldr	r0, [pc, #208]	; (800132c <fsm_automatic_run+0x59c>)
 800125c:	f006 fa6a 	bl	8007734 <siprintf>
			setTimer2(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001264:	f001 fe00 	bl	8002e68 <setTimer2>
		}
		if(timer2_flag == 1){
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <fsm_automatic_run+0x5a0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d127      	bne.n	80012c0 <fsm_automatic_run+0x530>
//			timeGREEN--;
//			timeRED--;
//			updateClockBuffer(timeGREEN--,timeRED--);
			sprintf(buffer1, "Road1: %.2f", (float)timeGREEN--);
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <fsm_automatic_run+0x584>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	4927      	ldr	r1, [pc, #156]	; (8001314 <fsm_automatic_run+0x584>)
 8001278:	600a      	str	r2, [r1, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fcbe 	bl	8000bfc <__aeabi_i2f>
 8001280:	4603      	mov	r3, r0
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f8d0 	bl	8000428 <__aeabi_f2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4924      	ldr	r1, [pc, #144]	; (8001320 <fsm_automatic_run+0x590>)
 800128e:	4825      	ldr	r0, [pc, #148]	; (8001324 <fsm_automatic_run+0x594>)
 8001290:	f006 fa50 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeRED--);
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <fsm_automatic_run+0x58c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	1e5a      	subs	r2, r3, #1
 800129a:	4920      	ldr	r1, [pc, #128]	; (800131c <fsm_automatic_run+0x58c>)
 800129c:	600a      	str	r2, [r1, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fcac 	bl	8000bfc <__aeabi_i2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8be 	bl	8000428 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	491d      	ldr	r1, [pc, #116]	; (8001328 <fsm_automatic_run+0x598>)
 80012b2:	481e      	ldr	r0, [pc, #120]	; (800132c <fsm_automatic_run+0x59c>)
 80012b4:	f006 fa3e 	bl	8007734 <siprintf>
			setTimer2(1000);
 80012b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012bc:	f001 fdd4 	bl	8002e68 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 80012c0:	2000      	movs	r0, #0
 80012c2:	f001 f9a7 	bl	8002614 <is_button_pressed_short>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d13f      	bne.n	800134c <fsm_automatic_run+0x5bc>
			setTimer1(250);
 80012cc:	20fa      	movs	r0, #250	; 0xfa
 80012ce:	f001 fdaf 	bl	8002e30 <setTimer1>
			status = MAN_MODE2;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <fsm_automatic_run+0x57c>)
 80012d4:	220b      	movs	r2, #11
 80012d6:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 80012d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80012dc:	f001 fdfc 	bl	8002ed8 <setTimer4>
			sprintf(buffer1, "Mode: Manual 2");
 80012e0:	4915      	ldr	r1, [pc, #84]	; (8001338 <fsm_automatic_run+0x5a8>)
 80012e2:	4810      	ldr	r0, [pc, #64]	; (8001324 <fsm_automatic_run+0x594>)
 80012e4:	f006 fa26 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <fsm_automatic_run+0x5ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fc85 	bl	8000bfc <__aeabi_i2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f897 	bl	8000428 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4910      	ldr	r1, [pc, #64]	; (8001340 <fsm_automatic_run+0x5b0>)
 8001300:	480a      	ldr	r0, [pc, #40]	; (800132c <fsm_automatic_run+0x59c>)
 8001302:	f006 fa17 	bl	8007734 <siprintf>
 8001306:	e040      	b.n	800138a <fsm_automatic_run+0x5fa>
 8001308:	20000260 	.word	0x20000260
 800130c:	2000022c 	.word	0x2000022c
 8001310:	20000010 	.word	0x20000010
 8001314:	20000004 	.word	0x20000004
 8001318:	2000000c 	.word	0x2000000c
 800131c:	20000000 	.word	0x20000000
 8001320:	08009bc0 	.word	0x08009bc0
 8001324:	200002a4 	.word	0x200002a4
 8001328:	08009bcc 	.word	0x08009bcc
 800132c:	20000284 	.word	0x20000284
 8001330:	20000268 	.word	0x20000268
 8001334:	20000008 	.word	0x20000008
 8001338:	08009bd8 	.word	0x08009bd8
 800133c:	20000024 	.word	0x20000024
 8001340:	08009be8 	.word	0x08009be8
 8001344:	08009bf8 	.word	0x08009bf8
 8001348:	20000014 	.word	0x20000014
		}
		else if(is_button_pressed_1s(0) == 1){
 800134c:	2000      	movs	r0, #0
 800134e:	f001 f97f 	bl	8002650 <is_button_pressed_1s>
 8001352:	4603      	mov	r3, r0
 8001354:	2b01      	cmp	r3, #1
 8001356:	d118      	bne.n	800138a <fsm_automatic_run+0x5fa>
			setTimer1(250);
 8001358:	20fa      	movs	r0, #250	; 0xfa
 800135a:	f001 fd69 	bl	8002e30 <setTimer1>
			status = MAN_MODE2;
 800135e:	4b8b      	ldr	r3, [pc, #556]	; (800158c <fsm_automatic_run+0x7fc>)
 8001360:	220b      	movs	r2, #11
 8001362:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 2");
 8001364:	498a      	ldr	r1, [pc, #552]	; (8001590 <fsm_automatic_run+0x800>)
 8001366:	488b      	ldr	r0, [pc, #556]	; (8001594 <fsm_automatic_run+0x804>)
 8001368:	f006 f9e4 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 800136c:	4b8a      	ldr	r3, [pc, #552]	; (8001598 <fsm_automatic_run+0x808>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fc43 	bl	8000bfc <__aeabi_i2f>
 8001376:	4603      	mov	r3, r0
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f855 	bl	8000428 <__aeabi_f2d>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4986      	ldr	r1, [pc, #536]	; (800159c <fsm_automatic_run+0x80c>)
 8001384:	4886      	ldr	r0, [pc, #536]	; (80015a0 <fsm_automatic_run+0x810>)
 8001386:	f006 f9d5 	bl	8007734 <siprintf>
		}
		if(is_button_pressed_short(1) == 1){
 800138a:	2001      	movs	r0, #1
 800138c:	f001 f942 	bl	8002614 <is_button_pressed_short>
 8001390:	4603      	mov	r3, r0
 8001392:	2b01      	cmp	r3, #1
 8001394:	f040 80f4 	bne.w	8001580 <fsm_automatic_run+0x7f0>
			setTimer1(1000);
 8001398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139c:	f001 fd48 	bl	8002e30 <setTimer1>
			status = SET_MODE1;
 80013a0:	4b7a      	ldr	r3, [pc, #488]	; (800158c <fsm_automatic_run+0x7fc>)
 80013a2:	220e      	movs	r2, #14
 80013a4:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Setting 1");
 80013a6:	497f      	ldr	r1, [pc, #508]	; (80015a4 <fsm_automatic_run+0x814>)
 80013a8:	487a      	ldr	r0, [pc, #488]	; (8001594 <fsm_automatic_run+0x804>)
 80013aa:	f006 f9c3 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 80013ae:	4b7a      	ldr	r3, [pc, #488]	; (8001598 <fsm_automatic_run+0x808>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fc22 	bl	8000bfc <__aeabi_i2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f834 	bl	8000428 <__aeabi_f2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4975      	ldr	r1, [pc, #468]	; (800159c <fsm_automatic_run+0x80c>)
 80013c6:	4876      	ldr	r0, [pc, #472]	; (80015a0 <fsm_automatic_run+0x810>)
 80013c8:	f006 f9b4 	bl	8007734 <siprintf>
		}
		break;
 80013cc:	e0d8      	b.n	8001580 <fsm_automatic_run+0x7f0>
		//-----AUTO_AMBER_RED: Amber LEDs in Road 1 is ON while Red LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the amber light to red light; and red light to green light by status AUTO_RED_GREEN
		//and update the ClockBuffer for displaying the timer for Red and Green
		//if timer2_flag = 1, update and start counting timer for Amber and Red
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficAmber1();
 80013ce:	f001 fe07 	bl	8002fe0 <setTrafficAmber1>
		setTrafficRed2();
 80013d2:	f001 fe29 	bl	8003028 <setTrafficRed2>
		if(timer1_flag == 1){
 80013d6:	4b74      	ldr	r3, [pc, #464]	; (80015a8 <fsm_automatic_run+0x818>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d13b      	bne.n	8001456 <fsm_automatic_run+0x6c6>
			status = AUTO_RED_GREEN;
 80013de:	4b6b      	ldr	r3, [pc, #428]	; (800158c <fsm_automatic_run+0x7fc>)
 80013e0:	2202      	movs	r2, #2
 80013e2:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 80013e4:	4b71      	ldr	r3, [pc, #452]	; (80015ac <fsm_automatic_run+0x81c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 fd1d 	bl	8002e30 <setTimer1>
			timeRED = defaultTimeRed;
 80013f6:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <fsm_automatic_run+0x820>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a6e      	ldr	r2, [pc, #440]	; (80015b4 <fsm_automatic_run+0x824>)
 80013fc:	6013      	str	r3, [r2, #0]
			timeGREEN = defaultTimeGreen;
 80013fe:	4b6b      	ldr	r3, [pc, #428]	; (80015ac <fsm_automatic_run+0x81c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6d      	ldr	r2, [pc, #436]	; (80015b8 <fsm_automatic_run+0x828>)
 8001404:	6013      	str	r3, [r2, #0]
//			updateClockBuffer(timeRED--,timeGREEN--);
			sprintf(buffer1, "Road1: %.2f", (float)timeRED--);
 8001406:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <fsm_automatic_run+0x824>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	1e5a      	subs	r2, r3, #1
 800140c:	4969      	ldr	r1, [pc, #420]	; (80015b4 <fsm_automatic_run+0x824>)
 800140e:	600a      	str	r2, [r1, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fbf3 	bl	8000bfc <__aeabi_i2f>
 8001416:	4603      	mov	r3, r0
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f805 	bl	8000428 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4966      	ldr	r1, [pc, #408]	; (80015bc <fsm_automatic_run+0x82c>)
 8001424:	485b      	ldr	r0, [pc, #364]	; (8001594 <fsm_automatic_run+0x804>)
 8001426:	f006 f985 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeGREEN--);
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <fsm_automatic_run+0x828>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	4961      	ldr	r1, [pc, #388]	; (80015b8 <fsm_automatic_run+0x828>)
 8001432:	600a      	str	r2, [r1, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fbe1 	bl	8000bfc <__aeabi_i2f>
 800143a:	4603      	mov	r3, r0
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe fff3 	bl	8000428 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	495e      	ldr	r1, [pc, #376]	; (80015c0 <fsm_automatic_run+0x830>)
 8001448:	4855      	ldr	r0, [pc, #340]	; (80015a0 <fsm_automatic_run+0x810>)
 800144a:	f006 f973 	bl	8007734 <siprintf>
			setTimer2(1000);
 800144e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001452:	f001 fd09 	bl	8002e68 <setTimer2>
		}
		if(timer2_flag == 1){
 8001456:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <fsm_automatic_run+0x834>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d127      	bne.n	80014ae <fsm_automatic_run+0x71e>
//			timeRED--;
//			timeAMBER--;
//			updateClockBuffer(timeAMBER--, timeRED--);
			sprintf(buffer1, "Road1: %.2f", (float)timeAMBER--);
 800145e:	4b5a      	ldr	r3, [pc, #360]	; (80015c8 <fsm_automatic_run+0x838>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1e5a      	subs	r2, r3, #1
 8001464:	4958      	ldr	r1, [pc, #352]	; (80015c8 <fsm_automatic_run+0x838>)
 8001466:	600a      	str	r2, [r1, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fbc7 	bl	8000bfc <__aeabi_i2f>
 800146e:	4603      	mov	r3, r0
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ffd9 	bl	8000428 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4950      	ldr	r1, [pc, #320]	; (80015bc <fsm_automatic_run+0x82c>)
 800147c:	4845      	ldr	r0, [pc, #276]	; (8001594 <fsm_automatic_run+0x804>)
 800147e:	f006 f959 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeRED--);
 8001482:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <fsm_automatic_run+0x824>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	1e5a      	subs	r2, r3, #1
 8001488:	494a      	ldr	r1, [pc, #296]	; (80015b4 <fsm_automatic_run+0x824>)
 800148a:	600a      	str	r2, [r1, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fbb5 	bl	8000bfc <__aeabi_i2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe ffc7 	bl	8000428 <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4948      	ldr	r1, [pc, #288]	; (80015c0 <fsm_automatic_run+0x830>)
 80014a0:	483f      	ldr	r0, [pc, #252]	; (80015a0 <fsm_automatic_run+0x810>)
 80014a2:	f006 f947 	bl	8007734 <siprintf>
			setTimer2(1000);
 80014a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014aa:	f001 fcdd 	bl	8002e68 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 80014ae:	2000      	movs	r0, #0
 80014b0:	f001 f8b0 	bl	8002614 <is_button_pressed_short>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d11c      	bne.n	80014f4 <fsm_automatic_run+0x764>
			setTimer1(250);
 80014ba:	20fa      	movs	r0, #250	; 0xfa
 80014bc:	f001 fcb8 	bl	8002e30 <setTimer1>
			status = MAN_MODE2;
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <fsm_automatic_run+0x7fc>)
 80014c2:	220b      	movs	r2, #11
 80014c4:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 80014c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80014ca:	f001 fd05 	bl	8002ed8 <setTimer4>
			sprintf(buffer1, "Mode: Manual 2");
 80014ce:	4930      	ldr	r1, [pc, #192]	; (8001590 <fsm_automatic_run+0x800>)
 80014d0:	4830      	ldr	r0, [pc, #192]	; (8001594 <fsm_automatic_run+0x804>)
 80014d2:	f006 f92f 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <fsm_automatic_run+0x808>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fb8e 	bl	8000bfc <__aeabi_i2f>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ffa0 	bl	8000428 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	492b      	ldr	r1, [pc, #172]	; (800159c <fsm_automatic_run+0x80c>)
 80014ee:	482c      	ldr	r0, [pc, #176]	; (80015a0 <fsm_automatic_run+0x810>)
 80014f0:	f006 f920 	bl	8007734 <siprintf>
		}
		if(is_button_pressed_1s(0) == 1){
 80014f4:	2000      	movs	r0, #0
 80014f6:	f001 f8ab 	bl	8002650 <is_button_pressed_1s>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d118      	bne.n	8001532 <fsm_automatic_run+0x7a2>
			setTimer1(250);
 8001500:	20fa      	movs	r0, #250	; 0xfa
 8001502:	f001 fc95 	bl	8002e30 <setTimer1>
			status = MAN_MODE2;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <fsm_automatic_run+0x7fc>)
 8001508:	220b      	movs	r2, #11
 800150a:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 2");
 800150c:	4920      	ldr	r1, [pc, #128]	; (8001590 <fsm_automatic_run+0x800>)
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <fsm_automatic_run+0x804>)
 8001510:	f006 f910 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <fsm_automatic_run+0x808>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fb6f 	bl	8000bfc <__aeabi_i2f>
 800151e:	4603      	mov	r3, r0
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ff81 	bl	8000428 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	491c      	ldr	r1, [pc, #112]	; (800159c <fsm_automatic_run+0x80c>)
 800152c:	481c      	ldr	r0, [pc, #112]	; (80015a0 <fsm_automatic_run+0x810>)
 800152e:	f006 f901 	bl	8007734 <siprintf>
		}
		if(is_button_pressed_short(1) == 1){
 8001532:	2001      	movs	r0, #1
 8001534:	f001 f86e 	bl	8002614 <is_button_pressed_short>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d122      	bne.n	8001584 <fsm_automatic_run+0x7f4>
			setTimer1(1000);
 800153e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001542:	f001 fc75 	bl	8002e30 <setTimer1>
			status = SET_MODE1;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <fsm_automatic_run+0x7fc>)
 8001548:	220e      	movs	r2, #14
 800154a:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Setting 1");
 800154c:	4915      	ldr	r1, [pc, #84]	; (80015a4 <fsm_automatic_run+0x814>)
 800154e:	4811      	ldr	r0, [pc, #68]	; (8001594 <fsm_automatic_run+0x804>)
 8001550:	f006 f8f0 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <fsm_automatic_run+0x808>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fb4f 	bl	8000bfc <__aeabi_i2f>
 800155e:	4603      	mov	r3, r0
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff61 	bl	8000428 <__aeabi_f2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	490c      	ldr	r1, [pc, #48]	; (800159c <fsm_automatic_run+0x80c>)
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <fsm_automatic_run+0x810>)
 800156e:	f006 f8e1 	bl	8007734 <siprintf>
		}
		break;
 8001572:	e007      	b.n	8001584 <fsm_automatic_run+0x7f4>
	default:
		break;
 8001574:	bf00      	nop
 8001576:	e006      	b.n	8001586 <fsm_automatic_run+0x7f6>
		break;
 8001578:	bf00      	nop
 800157a:	e004      	b.n	8001586 <fsm_automatic_run+0x7f6>
		break;
 800157c:	bf00      	nop
 800157e:	e002      	b.n	8001586 <fsm_automatic_run+0x7f6>
		break;
 8001580:	bf00      	nop
 8001582:	e000      	b.n	8001586 <fsm_automatic_run+0x7f6>
		break;
 8001584:	bf00      	nop
	}
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000022c 	.word	0x2000022c
 8001590:	08009bd8 	.word	0x08009bd8
 8001594:	200002a4 	.word	0x200002a4
 8001598:	20000024 	.word	0x20000024
 800159c:	08009be8 	.word	0x08009be8
 80015a0:	20000284 	.word	0x20000284
 80015a4:	08009bf8 	.word	0x08009bf8
 80015a8:	20000260 	.word	0x20000260
 80015ac:	20000010 	.word	0x20000010
 80015b0:	2000000c 	.word	0x2000000c
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000004 	.word	0x20000004
 80015bc:	08009bc0 	.word	0x08009bc0
 80015c0:	08009bcc 	.word	0x08009bcc
 80015c4:	20000268 	.word	0x20000268
 80015c8:	20000008 	.word	0x20000008

080015cc <fsm_manual_run>:
 *      Author: phuct
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	switch(status){
 80015d0:	4baa      	ldr	r3, [pc, #680]	; (800187c <fsm_manual_run+0x2b0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3b0a      	subs	r3, #10
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	f200 83f5 	bhi.w	8001dc6 <fsm_manual_run+0x7fa>
 80015dc:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <fsm_manual_run+0x18>)
 80015de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e2:	bf00      	nop
 80015e4:	080015f5 	.word	0x080015f5
 80015e8:	08001677 	.word	0x08001677
 80015ec:	080018c9 	.word	0x080018c9
 80015f0:	08001a93 	.word	0x08001a93
	case MAN_MODE1:
		//Return to status INIT / AUTO_RED_GREEN
		setTimer1(defaultTimeGreen*1000);
 80015f4:	4ba2      	ldr	r3, [pc, #648]	; (8001880 <fsm_manual_run+0x2b4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
 8001600:	4618      	mov	r0, r3
 8001602:	f001 fc15 	bl	8002e30 <setTimer1>
		setTimer2(1000);
 8001606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800160a:	f001 fc2d 	bl	8002e68 <setTimer2>
		timeRED = defaultTimeRed;
 800160e:	4b9d      	ldr	r3, [pc, #628]	; (8001884 <fsm_manual_run+0x2b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a9d      	ldr	r2, [pc, #628]	; (8001888 <fsm_manual_run+0x2bc>)
 8001614:	6013      	str	r3, [r2, #0]
		timeGREEN = defaultTimeGreen;
 8001616:	4b9a      	ldr	r3, [pc, #616]	; (8001880 <fsm_manual_run+0x2b4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a9c      	ldr	r2, [pc, #624]	; (800188c <fsm_manual_run+0x2c0>)
 800161c:	6013      	str	r3, [r2, #0]
		tmpAMBER = defaultTimeAmber;
 800161e:	4b9c      	ldr	r3, [pc, #624]	; (8001890 <fsm_manual_run+0x2c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a9c      	ldr	r2, [pc, #624]	; (8001894 <fsm_manual_run+0x2c8>)
 8001624:	6013      	str	r3, [r2, #0]
		sprintf(buffer1, "Road1: %.2f", (float)timeRED--);
 8001626:	4b98      	ldr	r3, [pc, #608]	; (8001888 <fsm_manual_run+0x2bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	1e5a      	subs	r2, r3, #1
 800162c:	4996      	ldr	r1, [pc, #600]	; (8001888 <fsm_manual_run+0x2bc>)
 800162e:	600a      	str	r2, [r1, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fae3 	bl	8000bfc <__aeabi_i2f>
 8001636:	4603      	mov	r3, r0
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fef5 	bl	8000428 <__aeabi_f2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4995      	ldr	r1, [pc, #596]	; (8001898 <fsm_manual_run+0x2cc>)
 8001644:	4895      	ldr	r0, [pc, #596]	; (800189c <fsm_manual_run+0x2d0>)
 8001646:	f006 f875 	bl	8007734 <siprintf>
		sprintf(buffer2, "Road2: %.2f", (float)timeGREEN--);
 800164a:	4b90      	ldr	r3, [pc, #576]	; (800188c <fsm_manual_run+0x2c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1e5a      	subs	r2, r3, #1
 8001650:	498e      	ldr	r1, [pc, #568]	; (800188c <fsm_manual_run+0x2c0>)
 8001652:	600a      	str	r2, [r1, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fad1 	bl	8000bfc <__aeabi_i2f>
 800165a:	4603      	mov	r3, r0
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fee3 	bl	8000428 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	498e      	ldr	r1, [pc, #568]	; (80018a0 <fsm_manual_run+0x2d4>)
 8001668:	488e      	ldr	r0, [pc, #568]	; (80018a4 <fsm_manual_run+0x2d8>)
 800166a:	f006 f863 	bl	8007734 <siprintf>
		status = AUTO_RED_GREEN;
 800166e:	4b83      	ldr	r3, [pc, #524]	; (800187c <fsm_manual_run+0x2b0>)
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
		break;
 8001674:	e3ae      	b.n	8001dd4 <fsm_manual_run+0x808>
	case MAN_MODE2:
		//Counter for returning to automatic mode after 5 second
		if(timer4_flag == 1){
 8001676:	4b8c      	ldr	r3, [pc, #560]	; (80018a8 <fsm_manual_run+0x2dc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d120      	bne.n	80016c0 <fsm_manual_run+0xf4>
			status = MAN_MODE1;
 800167e:	4b7f      	ldr	r3, [pc, #508]	; (800187c <fsm_manual_run+0x2b0>)
 8001680:	220a      	movs	r2, #10
 8001682:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Road1: %.2f", (float)timeRED);
 8001684:	4b80      	ldr	r3, [pc, #512]	; (8001888 <fsm_manual_run+0x2bc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fab7 	bl	8000bfc <__aeabi_i2f>
 800168e:	4603      	mov	r3, r0
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fec9 	bl	8000428 <__aeabi_f2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	497f      	ldr	r1, [pc, #508]	; (8001898 <fsm_manual_run+0x2cc>)
 800169c:	487f      	ldr	r0, [pc, #508]	; (800189c <fsm_manual_run+0x2d0>)
 800169e:	f006 f849 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeGREEN);
 80016a2:	4b7a      	ldr	r3, [pc, #488]	; (800188c <fsm_manual_run+0x2c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff faa8 	bl	8000bfc <__aeabi_i2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe feba 	bl	8000428 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4979      	ldr	r1, [pc, #484]	; (80018a0 <fsm_manual_run+0x2d4>)
 80016ba:	487a      	ldr	r0, [pc, #488]	; (80018a4 <fsm_manual_run+0x2d8>)
 80016bc:	f006 f83a 	bl	8007734 <siprintf>
		}
		//Only Amber LEDs in both Road 1 and 2 are ON, other LEDs are OFF
		if(blink_status == 0){
 80016c0:	4b7a      	ldr	r3, [pc, #488]	; (80018ac <fsm_manual_run+0x2e0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d104      	bne.n	80016d2 <fsm_manual_run+0x106>
			setTrafficRed1();
 80016c8:	f001 fc78 	bl	8002fbc <setTrafficRed1>
			setTrafficRed2();
 80016cc:	f001 fcac 	bl	8003028 <setTrafficRed2>
 80016d0:	e001      	b.n	80016d6 <fsm_manual_run+0x10a>
		} else {
			setTrafficOff();
 80016d2:	f001 fcdf 	bl	8003094 <setTrafficOff>
		}
		//If BUTTON1 is pressed, switch to status MAN_MODE3
		if(is_button_pressed_short(0) == 1){
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 ff9c 	bl	8002614 <is_button_pressed_short>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d121      	bne.n	8001726 <fsm_manual_run+0x15a>
			status = MAN_MODE3;
 80016e2:	4b66      	ldr	r3, [pc, #408]	; (800187c <fsm_manual_run+0x2b0>)
 80016e4:	220c      	movs	r2, #12
 80016e6:	601a      	str	r2, [r3, #0]
			setTimer1(500); //2Hz mean 2 LEDs turn ON for 1 sec, each LED ON for 500ms
 80016e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ec:	f001 fba0 	bl	8002e30 <setTimer1>
			setTimer4(5000);
 80016f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80016f4:	f001 fbf0 	bl	8002ed8 <setTimer4>
			blink_status = 0;
 80016f8:	4b6c      	ldr	r3, [pc, #432]	; (80018ac <fsm_manual_run+0x2e0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 3");
 80016fe:	496c      	ldr	r1, [pc, #432]	; (80018b0 <fsm_manual_run+0x2e4>)
 8001700:	4866      	ldr	r0, [pc, #408]	; (800189c <fsm_manual_run+0x2d0>)
 8001702:	f006 f817 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeAMBER: %.2f", (float)tmpAMBER);
 8001706:	4b63      	ldr	r3, [pc, #396]	; (8001894 <fsm_manual_run+0x2c8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fa76 	bl	8000bfc <__aeabi_i2f>
 8001710:	4603      	mov	r3, r0
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fe88 	bl	8000428 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4965      	ldr	r1, [pc, #404]	; (80018b4 <fsm_manual_run+0x2e8>)
 800171e:	4861      	ldr	r0, [pc, #388]	; (80018a4 <fsm_manual_run+0x2d8>)
 8001720:	f006 f808 	bl	8007734 <siprintf>
 8001724:	e026      	b.n	8001774 <fsm_manual_run+0x1a8>
		}
		else if(is_button_pressed_1s(0) == 1){
 8001726:	2000      	movs	r0, #0
 8001728:	f000 ff92 	bl	8002650 <is_button_pressed_1s>
 800172c:	4603      	mov	r3, r0
 800172e:	2b01      	cmp	r3, #1
 8001730:	d120      	bne.n	8001774 <fsm_manual_run+0x1a8>
			status = MAN_MODE3;
 8001732:	4b52      	ldr	r3, [pc, #328]	; (800187c <fsm_manual_run+0x2b0>)
 8001734:	220c      	movs	r2, #12
 8001736:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 8001738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800173c:	f001 fb78 	bl	8002e30 <setTimer1>
			setTimer4(5000);
 8001740:	f241 3088 	movw	r0, #5000	; 0x1388
 8001744:	f001 fbc8 	bl	8002ed8 <setTimer4>
			blink_status = 0;
 8001748:	4b58      	ldr	r3, [pc, #352]	; (80018ac <fsm_manual_run+0x2e0>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 3");
 800174e:	4958      	ldr	r1, [pc, #352]	; (80018b0 <fsm_manual_run+0x2e4>)
 8001750:	4852      	ldr	r0, [pc, #328]	; (800189c <fsm_manual_run+0x2d0>)
 8001752:	f005 ffef 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeAMBER: %.2f", (float)tmpAMBER);
 8001756:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <fsm_manual_run+0x2c8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fa4e 	bl	8000bfc <__aeabi_i2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe60 	bl	8000428 <__aeabi_f2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4951      	ldr	r1, [pc, #324]	; (80018b4 <fsm_manual_run+0x2e8>)
 800176e:	484d      	ldr	r0, [pc, #308]	; (80018a4 <fsm_manual_run+0x2d8>)
 8001770:	f005 ffe0 	bl	8007734 <siprintf>
		}
		//Blinking Red LEDs
		if(timer1_flag == 1){
 8001774:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <fsm_manual_run+0x2ec>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d109      	bne.n	8001790 <fsm_manual_run+0x1c4>
			setTimer1(500);
 800177c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001780:	f001 fb56 	bl	8002e30 <setTimer1>
			blink_status = 1 - blink_status;
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <fsm_manual_run+0x2e0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1c3 0301 	rsb	r3, r3, #1
 800178c:	4a47      	ldr	r2, [pc, #284]	; (80018ac <fsm_manual_run+0x2e0>)
 800178e:	6013      	str	r3, [r2, #0]
		}
		//If BUTTON2 is pressed, tempRED value increase 1 unit
		//If value overcome 99, it return to 1
		if(is_button_pressed_short(1) == 1){
 8001790:	2001      	movs	r0, #1
 8001792:	f000 ff3f 	bl	8002614 <is_button_pressed_short>
 8001796:	4603      	mov	r3, r0
 8001798:	2b01      	cmp	r3, #1
 800179a:	d123      	bne.n	80017e4 <fsm_manual_run+0x218>
			setTimer4(5000);
 800179c:	f241 3088 	movw	r0, #5000	; 0x1388
 80017a0:	f001 fb9a 	bl	8002ed8 <setTimer4>
			tmpRED++;
 80017a4:	4b45      	ldr	r3, [pc, #276]	; (80018bc <fsm_manual_run+0x2f0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a44      	ldr	r2, [pc, #272]	; (80018bc <fsm_manual_run+0x2f0>)
 80017ac:	6013      	str	r3, [r2, #0]
			if(tmpRED > 99) tmpRED = 1;
 80017ae:	4b43      	ldr	r3, [pc, #268]	; (80018bc <fsm_manual_run+0x2f0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b63      	cmp	r3, #99	; 0x63
 80017b4:	dd02      	ble.n	80017bc <fsm_manual_run+0x1f0>
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <fsm_manual_run+0x2f0>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 2");
 80017bc:	4940      	ldr	r1, [pc, #256]	; (80018c0 <fsm_manual_run+0x2f4>)
 80017be:	4837      	ldr	r0, [pc, #220]	; (800189c <fsm_manual_run+0x2d0>)
 80017c0:	f005 ffb8 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 80017c4:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <fsm_manual_run+0x2f0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fa17 	bl	8000bfc <__aeabi_i2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe29 	bl	8000428 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	493a      	ldr	r1, [pc, #232]	; (80018c4 <fsm_manual_run+0x2f8>)
 80017dc:	4831      	ldr	r0, [pc, #196]	; (80018a4 <fsm_manual_run+0x2d8>)
 80017de:	f005 ffa9 	bl	8007734 <siprintf>
 80017e2:	e028      	b.n	8001836 <fsm_manual_run+0x26a>
		}
		else if(is_button_pressed_1s(1) == 1){
 80017e4:	2001      	movs	r0, #1
 80017e6:	f000 ff33 	bl	8002650 <is_button_pressed_1s>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d122      	bne.n	8001836 <fsm_manual_run+0x26a>
			setTimer4(5000);
 80017f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80017f4:	f001 fb70 	bl	8002ed8 <setTimer4>
			tmpRED++;
 80017f8:	4b30      	ldr	r3, [pc, #192]	; (80018bc <fsm_manual_run+0x2f0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <fsm_manual_run+0x2f0>)
 8001800:	6013      	str	r3, [r2, #0]
			if(tmpRED > 99) tmpRED = 1;
 8001802:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <fsm_manual_run+0x2f0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b63      	cmp	r3, #99	; 0x63
 8001808:	dd02      	ble.n	8001810 <fsm_manual_run+0x244>
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <fsm_manual_run+0x2f0>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 2");
 8001810:	492b      	ldr	r1, [pc, #172]	; (80018c0 <fsm_manual_run+0x2f4>)
 8001812:	4822      	ldr	r0, [pc, #136]	; (800189c <fsm_manual_run+0x2d0>)
 8001814:	f005 ff8e 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)tmpRED);
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <fsm_manual_run+0x2f0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff f9ed 	bl	8000bfc <__aeabi_i2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fdff 	bl	8000428 <__aeabi_f2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4925      	ldr	r1, [pc, #148]	; (80018c4 <fsm_manual_run+0x2f8>)
 8001830:	481c      	ldr	r0, [pc, #112]	; (80018a4 <fsm_manual_run+0x2d8>)
 8001832:	f005 ff7f 	bl	8007734 <siprintf>
		}
		//If BUTTON3 is pressed, tmpRED is assigned for defaultTimeRed
		if(is_button_pressed_short(2) == 1){
 8001836:	2002      	movs	r0, #2
 8001838:	f000 feec 	bl	8002614 <is_button_pressed_short>
 800183c:	4603      	mov	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	f040 82c3 	bne.w	8001dca <fsm_manual_run+0x7fe>
			setTimer4(5000);
 8001844:	f241 3088 	movw	r0, #5000	; 0x1388
 8001848:	f001 fb46 	bl	8002ed8 <setTimer4>
			defaultTimeRed = tmpRED;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <fsm_manual_run+0x2f0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <fsm_manual_run+0x2b8>)
 8001852:	6013      	str	r3, [r2, #0]
			sprintf(buffer1, "Mode: Manual 2");
 8001854:	491a      	ldr	r1, [pc, #104]	; (80018c0 <fsm_manual_run+0x2f4>)
 8001856:	4811      	ldr	r0, [pc, #68]	; (800189c <fsm_manual_run+0x2d0>)
 8001858:	f005 ff6c 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeRED: %.2f", (float)defaultTimeRed);
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <fsm_manual_run+0x2b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f9cb 	bl	8000bfc <__aeabi_i2f>
 8001866:	4603      	mov	r3, r0
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fddd 	bl	8000428 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4914      	ldr	r1, [pc, #80]	; (80018c4 <fsm_manual_run+0x2f8>)
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <fsm_manual_run+0x2d8>)
 8001876:	f005 ff5d 	bl	8007734 <siprintf>
		}
 // MAN 2 display the current Mode 2 to blink Red LEDs
		break;
 800187a:	e2a6      	b.n	8001dca <fsm_manual_run+0x7fe>
 800187c:	2000022c 	.word	0x2000022c
 8001880:	20000010 	.word	0x20000010
 8001884:	2000000c 	.word	0x2000000c
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004
 8001890:	20000014 	.word	0x20000014
 8001894:	2000002c 	.word	0x2000002c
 8001898:	08009c08 	.word	0x08009c08
 800189c:	200002a4 	.word	0x200002a4
 80018a0:	08009c14 	.word	0x08009c14
 80018a4:	20000284 	.word	0x20000284
 80018a8:	20000278 	.word	0x20000278
 80018ac:	20000228 	.word	0x20000228
 80018b0:	08009c20 	.word	0x08009c20
 80018b4:	08009c30 	.word	0x08009c30
 80018b8:	20000260 	.word	0x20000260
 80018bc:	20000024 	.word	0x20000024
 80018c0:	08009c40 	.word	0x08009c40
 80018c4:	08009c50 	.word	0x08009c50
	case MAN_MODE3:
		//Counter for returning to automatic mode after 5 second
		if(timer4_flag == 1){
 80018c8:	4b92      	ldr	r3, [pc, #584]	; (8001b14 <fsm_manual_run+0x548>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d102      	bne.n	80018d6 <fsm_manual_run+0x30a>
			status = MAN_MODE1;
 80018d0:	4b91      	ldr	r3, [pc, #580]	; (8001b18 <fsm_manual_run+0x54c>)
 80018d2:	220a      	movs	r2, #10
 80018d4:	601a      	str	r2, [r3, #0]
		}
		//Only Amber LEDs in both Road 1 and 2 are ON, other LEDs are OFF
		if(blink_status == 0){
 80018d6:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <fsm_manual_run+0x550>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d104      	bne.n	80018e8 <fsm_manual_run+0x31c>
			setTrafficAmber1();
 80018de:	f001 fb7f 	bl	8002fe0 <setTrafficAmber1>
			setTrafficAmber2();
 80018e2:	f001 fbb3 	bl	800304c <setTrafficAmber2>
 80018e6:	e001      	b.n	80018ec <fsm_manual_run+0x320>
		} else {
			setTrafficOff();
 80018e8:	f001 fbd4 	bl	8003094 <setTrafficOff>
		}
		//If BUTTON1 is pressed, switch to status MAN_MODE4
		if(is_button_pressed_short(0) == 1){
 80018ec:	2000      	movs	r0, #0
 80018ee:	f000 fe91 	bl	8002614 <is_button_pressed_short>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d121      	bne.n	800193c <fsm_manual_run+0x370>
			setTimer4(5000);
 80018f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80018fc:	f001 faec 	bl	8002ed8 <setTimer4>
			status = MAN_MODE4;
 8001900:	4b85      	ldr	r3, [pc, #532]	; (8001b18 <fsm_manual_run+0x54c>)
 8001902:	220d      	movs	r2, #13
 8001904:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 8001906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800190a:	f001 fa91 	bl	8002e30 <setTimer1>
			blink_status = 0;
 800190e:	4b83      	ldr	r3, [pc, #524]	; (8001b1c <fsm_manual_run+0x550>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 4");
 8001914:	4982      	ldr	r1, [pc, #520]	; (8001b20 <fsm_manual_run+0x554>)
 8001916:	4883      	ldr	r0, [pc, #524]	; (8001b24 <fsm_manual_run+0x558>)
 8001918:	f005 ff0c 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeGREEN: %.2f", (float)tmpGREEN);
 800191c:	4b82      	ldr	r3, [pc, #520]	; (8001b28 <fsm_manual_run+0x55c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f96b 	bl	8000bfc <__aeabi_i2f>
 8001926:	4603      	mov	r3, r0
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fd7d 	bl	8000428 <__aeabi_f2d>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	497e      	ldr	r1, [pc, #504]	; (8001b2c <fsm_manual_run+0x560>)
 8001934:	487e      	ldr	r0, [pc, #504]	; (8001b30 <fsm_manual_run+0x564>)
 8001936:	f005 fefd 	bl	8007734 <siprintf>
 800193a:	e026      	b.n	800198a <fsm_manual_run+0x3be>
		}
		else if(is_button_pressed_1s(0) == 1){
 800193c:	2000      	movs	r0, #0
 800193e:	f000 fe87 	bl	8002650 <is_button_pressed_1s>
 8001942:	4603      	mov	r3, r0
 8001944:	2b01      	cmp	r3, #1
 8001946:	d120      	bne.n	800198a <fsm_manual_run+0x3be>
			setTimer4(5000);
 8001948:	f241 3088 	movw	r0, #5000	; 0x1388
 800194c:	f001 fac4 	bl	8002ed8 <setTimer4>
			status = MAN_MODE4;
 8001950:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <fsm_manual_run+0x54c>)
 8001952:	220d      	movs	r2, #13
 8001954:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 8001956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195a:	f001 fa69 	bl	8002e30 <setTimer1>
			blink_status = 0;
 800195e:	4b6f      	ldr	r3, [pc, #444]	; (8001b1c <fsm_manual_run+0x550>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 4");
 8001964:	496e      	ldr	r1, [pc, #440]	; (8001b20 <fsm_manual_run+0x554>)
 8001966:	486f      	ldr	r0, [pc, #444]	; (8001b24 <fsm_manual_run+0x558>)
 8001968:	f005 fee4 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeGREEN: %.2f", (float)tmpGREEN);
 800196c:	4b6e      	ldr	r3, [pc, #440]	; (8001b28 <fsm_manual_run+0x55c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f943 	bl	8000bfc <__aeabi_i2f>
 8001976:	4603      	mov	r3, r0
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fd55 	bl	8000428 <__aeabi_f2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	496a      	ldr	r1, [pc, #424]	; (8001b2c <fsm_manual_run+0x560>)
 8001984:	486a      	ldr	r0, [pc, #424]	; (8001b30 <fsm_manual_run+0x564>)
 8001986:	f005 fed5 	bl	8007734 <siprintf>
		}
		//Blinking Amber LEDs
		if(timer1_flag == 1){
 800198a:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <fsm_manual_run+0x568>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d109      	bne.n	80019a6 <fsm_manual_run+0x3da>
			setTimer1(500);
 8001992:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001996:	f001 fa4b 	bl	8002e30 <setTimer1>
			blink_status = 1 - blink_status;
 800199a:	4b60      	ldr	r3, [pc, #384]	; (8001b1c <fsm_manual_run+0x550>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f1c3 0301 	rsb	r3, r3, #1
 80019a2:	4a5e      	ldr	r2, [pc, #376]	; (8001b1c <fsm_manual_run+0x550>)
 80019a4:	6013      	str	r3, [r2, #0]
		}
		//If BUTTON2 is pressed, tmpAMBER value increase 1 unit
		//If value overcome 99, it return to 1
		if(is_button_pressed_short(1) == 1){
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 fe34 	bl	8002614 <is_button_pressed_short>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d123      	bne.n	80019fa <fsm_manual_run+0x42e>
			setTimer4(5000);
 80019b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80019b6:	f001 fa8f 	bl	8002ed8 <setTimer4>
			tmpAMBER++;
 80019ba:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <fsm_manual_run+0x56c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	4a5d      	ldr	r2, [pc, #372]	; (8001b38 <fsm_manual_run+0x56c>)
 80019c2:	6013      	str	r3, [r2, #0]
			if(tmpAMBER > 99) tmpAMBER = 1;
 80019c4:	4b5c      	ldr	r3, [pc, #368]	; (8001b38 <fsm_manual_run+0x56c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b63      	cmp	r3, #99	; 0x63
 80019ca:	dd02      	ble.n	80019d2 <fsm_manual_run+0x406>
 80019cc:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <fsm_manual_run+0x56c>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 3");
 80019d2:	495a      	ldr	r1, [pc, #360]	; (8001b3c <fsm_manual_run+0x570>)
 80019d4:	4853      	ldr	r0, [pc, #332]	; (8001b24 <fsm_manual_run+0x558>)
 80019d6:	f005 fead 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeAMBER: %.2f", (float)tmpAMBER);
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <fsm_manual_run+0x56c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f90c 	bl	8000bfc <__aeabi_i2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd1e 	bl	8000428 <__aeabi_f2d>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4953      	ldr	r1, [pc, #332]	; (8001b40 <fsm_manual_run+0x574>)
 80019f2:	484f      	ldr	r0, [pc, #316]	; (8001b30 <fsm_manual_run+0x564>)
 80019f4:	f005 fe9e 	bl	8007734 <siprintf>
 80019f8:	e028      	b.n	8001a4c <fsm_manual_run+0x480>
		}
		else if(is_button_pressed_1s(1) == 1){
 80019fa:	2001      	movs	r0, #1
 80019fc:	f000 fe28 	bl	8002650 <is_button_pressed_1s>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d122      	bne.n	8001a4c <fsm_manual_run+0x480>
			setTimer4(5000);
 8001a06:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a0a:	f001 fa65 	bl	8002ed8 <setTimer4>
			tmpAMBER++;
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <fsm_manual_run+0x56c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <fsm_manual_run+0x56c>)
 8001a16:	6013      	str	r3, [r2, #0]
			if(tmpAMBER > 99) tmpAMBER = 1;
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <fsm_manual_run+0x56c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b63      	cmp	r3, #99	; 0x63
 8001a1e:	dd02      	ble.n	8001a26 <fsm_manual_run+0x45a>
 8001a20:	4b45      	ldr	r3, [pc, #276]	; (8001b38 <fsm_manual_run+0x56c>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 3");
 8001a26:	4945      	ldr	r1, [pc, #276]	; (8001b3c <fsm_manual_run+0x570>)
 8001a28:	483e      	ldr	r0, [pc, #248]	; (8001b24 <fsm_manual_run+0x558>)
 8001a2a:	f005 fe83 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeAMBER: %.2f", (float)tmpAMBER);
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <fsm_manual_run+0x56c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f8e2 	bl	8000bfc <__aeabi_i2f>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fcf4 	bl	8000428 <__aeabi_f2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	493e      	ldr	r1, [pc, #248]	; (8001b40 <fsm_manual_run+0x574>)
 8001a46:	483a      	ldr	r0, [pc, #232]	; (8001b30 <fsm_manual_run+0x564>)
 8001a48:	f005 fe74 	bl	8007734 <siprintf>

		}
		//If BUTTON3 is pressed, tempAMBER is assigned for defaultTimeAmber
		if(is_button_pressed_short(2) == 1){
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f000 fde1 	bl	8002614 <is_button_pressed_short>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	f040 81ba 	bne.w	8001dce <fsm_manual_run+0x802>
			setTimer4(5000);
 8001a5a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a5e:	f001 fa3b 	bl	8002ed8 <setTimer4>
			defaultTimeAmber = tmpAMBER;
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <fsm_manual_run+0x56c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a37      	ldr	r2, [pc, #220]	; (8001b44 <fsm_manual_run+0x578>)
 8001a68:	6013      	str	r3, [r2, #0]
			sprintf(buffer1, "Mode: Manual 3");
 8001a6a:	4934      	ldr	r1, [pc, #208]	; (8001b3c <fsm_manual_run+0x570>)
 8001a6c:	482d      	ldr	r0, [pc, #180]	; (8001b24 <fsm_manual_run+0x558>)
 8001a6e:	f005 fe61 	bl	8007734 <siprintf>
			sprintf(buffer2, "TimeAMBER: %.2f", (float)defaultTimeAmber);
 8001a72:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <fsm_manual_run+0x578>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f8c0 	bl	8000bfc <__aeabi_i2f>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fcd2 	bl	8000428 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	492d      	ldr	r1, [pc, #180]	; (8001b40 <fsm_manual_run+0x574>)
 8001a8a:	4829      	ldr	r0, [pc, #164]	; (8001b30 <fsm_manual_run+0x564>)
 8001a8c:	f005 fe52 	bl	8007734 <siprintf>
		}
	//MAN 3 display the current Mode 3 to blink Amber LEDs
		break;
 8001a90:	e19d      	b.n	8001dce <fsm_manual_run+0x802>
	case MAN_MODE4:
		//Counter for returning to automatic mode after 5 second
		if(timer4_flag == 1){
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <fsm_manual_run+0x548>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d102      	bne.n	8001aa0 <fsm_manual_run+0x4d4>
			status = MAN_MODE1;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <fsm_manual_run+0x54c>)
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	601a      	str	r2, [r3, #0]
		}
		//If BUTTON1 is pressed, switch to status MAN_MODE1
		if(is_button_pressed_short(0) == 1){
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 fdb7 	bl	8002614 <is_button_pressed_short>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f040 8090 	bne.w	8001bce <fsm_manual_run+0x602>
			setTimer4(5000);
 8001aae:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ab2:	f001 fa11 	bl	8002ed8 <setTimer4>
			status = MAN_MODE1;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <fsm_manual_run+0x54c>)
 8001ab8:	220a      	movs	r2, #10
 8001aba:	601a      	str	r2, [r3, #0]
			if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) < 0){
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <fsm_manual_run+0x57c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <fsm_manual_run+0x580>)
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <fsm_manual_run+0x578>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	440b      	add	r3, r1
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da5f      	bge.n	8001b90 <fsm_manual_run+0x5c4>
				if(defaultTimeRed < (defaultTimeGreen + defaultTimeAmber)){
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <fsm_manual_run+0x580>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <fsm_manual_run+0x578>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	441a      	add	r2, r3
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <fsm_manual_run+0x57c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dd3e      	ble.n	8001b60 <fsm_manual_run+0x594>
					defaultTimeAmber = preTimeAmber;
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <fsm_manual_run+0x584>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <fsm_manual_run+0x578>)
 8001ae8:	6013      	str	r3, [r2, #0]
					defaultTimeGreen = preTimeGreen;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <fsm_manual_run+0x588>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <fsm_manual_run+0x580>)
 8001af0:	6013      	str	r3, [r2, #0]
					defaultTimeRed = preTimeRed;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <fsm_manual_run+0x58c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <fsm_manual_run+0x57c>)
 8001af8:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <fsm_manual_run+0x584>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <fsm_manual_run+0x56c>)
 8001b00:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <fsm_manual_run+0x588>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <fsm_manual_run+0x55c>)
 8001b08:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <fsm_manual_run+0x58c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <fsm_manual_run+0x590>)
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e03d      	b.n	8001b90 <fsm_manual_run+0x5c4>
 8001b14:	20000278 	.word	0x20000278
 8001b18:	2000022c 	.word	0x2000022c
 8001b1c:	20000228 	.word	0x20000228
 8001b20:	08009c60 	.word	0x08009c60
 8001b24:	200002a4 	.word	0x200002a4
 8001b28:	20000028 	.word	0x20000028
 8001b2c:	08009c70 	.word	0x08009c70
 8001b30:	20000284 	.word	0x20000284
 8001b34:	20000260 	.word	0x20000260
 8001b38:	2000002c 	.word	0x2000002c
 8001b3c:	08009c20 	.word	0x08009c20
 8001b40:	08009c30 	.word	0x08009c30
 8001b44:	20000014 	.word	0x20000014
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	20000010 	.word	0x20000010
 8001b50:	20000020 	.word	0x20000020
 8001b54:	2000001c 	.word	0x2000001c
 8001b58:	20000018 	.word	0x20000018
 8001b5c:	20000024 	.word	0x20000024
				} else {
					preTimeAmber = defaultTimeAmber ;
 8001b60:	4b9d      	ldr	r3, [pc, #628]	; (8001dd8 <fsm_manual_run+0x80c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a9d      	ldr	r2, [pc, #628]	; (8001ddc <fsm_manual_run+0x810>)
 8001b66:	6013      	str	r3, [r2, #0]
					preTimeGreen = defaultTimeGreen;
 8001b68:	4b9d      	ldr	r3, [pc, #628]	; (8001de0 <fsm_manual_run+0x814>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a9d      	ldr	r2, [pc, #628]	; (8001de4 <fsm_manual_run+0x818>)
 8001b6e:	6013      	str	r3, [r2, #0]
					preTimeRed = defaultTimeRed;
 8001b70:	4b9d      	ldr	r3, [pc, #628]	; (8001de8 <fsm_manual_run+0x81c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a9d      	ldr	r2, [pc, #628]	; (8001dec <fsm_manual_run+0x820>)
 8001b76:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 8001b78:	4b98      	ldr	r3, [pc, #608]	; (8001ddc <fsm_manual_run+0x810>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a9c      	ldr	r2, [pc, #624]	; (8001df0 <fsm_manual_run+0x824>)
 8001b7e:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 8001b80:	4b98      	ldr	r3, [pc, #608]	; (8001de4 <fsm_manual_run+0x818>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a9b      	ldr	r2, [pc, #620]	; (8001df4 <fsm_manual_run+0x828>)
 8001b86:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 8001b88:	4b98      	ldr	r3, [pc, #608]	; (8001dec <fsm_manual_run+0x820>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a9a      	ldr	r2, [pc, #616]	; (8001df8 <fsm_manual_run+0x82c>)
 8001b8e:	6013      	str	r3, [r2, #0]
				}
			}
			sprintf(buffer1, "Road1: %.2f", (float)timeRED);
 8001b90:	4b9a      	ldr	r3, [pc, #616]	; (8001dfc <fsm_manual_run+0x830>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f831 	bl	8000bfc <__aeabi_i2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc43 	bl	8000428 <__aeabi_f2d>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4996      	ldr	r1, [pc, #600]	; (8001e00 <fsm_manual_run+0x834>)
 8001ba8:	4896      	ldr	r0, [pc, #600]	; (8001e04 <fsm_manual_run+0x838>)
 8001baa:	f005 fdc3 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeGREEN);
 8001bae:	4b96      	ldr	r3, [pc, #600]	; (8001e08 <fsm_manual_run+0x83c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f822 	bl	8000bfc <__aeabi_i2f>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc34 	bl	8000428 <__aeabi_f2d>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4991      	ldr	r1, [pc, #580]	; (8001e0c <fsm_manual_run+0x840>)
 8001bc6:	4892      	ldr	r0, [pc, #584]	; (8001e10 <fsm_manual_run+0x844>)
 8001bc8:	f005 fdb4 	bl	8007734 <siprintf>
 8001bcc:	e06e      	b.n	8001cac <fsm_manual_run+0x6e0>
		}
		else if(is_button_pressed_1s(0) == 1){
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 fd3e 	bl	8002650 <is_button_pressed_1s>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d168      	bne.n	8001cac <fsm_manual_run+0x6e0>
			setTimer4(5000);
 8001bda:	f241 3088 	movw	r0, #5000	; 0x1388
 8001bde:	f001 f97b 	bl	8002ed8 <setTimer4>
			status = MAN_MODE1;
 8001be2:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <fsm_manual_run+0x848>)
 8001be4:	220a      	movs	r2, #10
 8001be6:	601a      	str	r2, [r3, #0]
			if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) < 0){
 8001be8:	4b7f      	ldr	r3, [pc, #508]	; (8001de8 <fsm_manual_run+0x81c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b7c      	ldr	r3, [pc, #496]	; (8001de0 <fsm_manual_run+0x814>)
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	4b79      	ldr	r3, [pc, #484]	; (8001dd8 <fsm_manual_run+0x80c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da39      	bge.n	8001c70 <fsm_manual_run+0x6a4>
				if(defaultTimeRed < (defaultTimeGreen + defaultTimeAmber)){
 8001bfc:	4b78      	ldr	r3, [pc, #480]	; (8001de0 <fsm_manual_run+0x814>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b75      	ldr	r3, [pc, #468]	; (8001dd8 <fsm_manual_run+0x80c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	441a      	add	r2, r3
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <fsm_manual_run+0x81c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dd18      	ble.n	8001c40 <fsm_manual_run+0x674>
					defaultTimeAmber = preTimeAmber;
 8001c0e:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <fsm_manual_run+0x810>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a71      	ldr	r2, [pc, #452]	; (8001dd8 <fsm_manual_run+0x80c>)
 8001c14:	6013      	str	r3, [r2, #0]
					defaultTimeGreen = preTimeGreen;
 8001c16:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <fsm_manual_run+0x818>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <fsm_manual_run+0x814>)
 8001c1c:	6013      	str	r3, [r2, #0]
					defaultTimeRed = preTimeRed;
 8001c1e:	4b73      	ldr	r3, [pc, #460]	; (8001dec <fsm_manual_run+0x820>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a71      	ldr	r2, [pc, #452]	; (8001de8 <fsm_manual_run+0x81c>)
 8001c24:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 8001c26:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <fsm_manual_run+0x810>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a71      	ldr	r2, [pc, #452]	; (8001df0 <fsm_manual_run+0x824>)
 8001c2c:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 8001c2e:	4b6d      	ldr	r3, [pc, #436]	; (8001de4 <fsm_manual_run+0x818>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a70      	ldr	r2, [pc, #448]	; (8001df4 <fsm_manual_run+0x828>)
 8001c34:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 8001c36:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <fsm_manual_run+0x820>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a6f      	ldr	r2, [pc, #444]	; (8001df8 <fsm_manual_run+0x82c>)
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e017      	b.n	8001c70 <fsm_manual_run+0x6a4>
				} else {
					preTimeAmber = defaultTimeAmber ;
 8001c40:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <fsm_manual_run+0x80c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a65      	ldr	r2, [pc, #404]	; (8001ddc <fsm_manual_run+0x810>)
 8001c46:	6013      	str	r3, [r2, #0]
					preTimeGreen = defaultTimeGreen;
 8001c48:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <fsm_manual_run+0x814>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a65      	ldr	r2, [pc, #404]	; (8001de4 <fsm_manual_run+0x818>)
 8001c4e:	6013      	str	r3, [r2, #0]
					preTimeRed = defaultTimeRed;
 8001c50:	4b65      	ldr	r3, [pc, #404]	; (8001de8 <fsm_manual_run+0x81c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a65      	ldr	r2, [pc, #404]	; (8001dec <fsm_manual_run+0x820>)
 8001c56:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 8001c58:	4b60      	ldr	r3, [pc, #384]	; (8001ddc <fsm_manual_run+0x810>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a64      	ldr	r2, [pc, #400]	; (8001df0 <fsm_manual_run+0x824>)
 8001c5e:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 8001c60:	4b60      	ldr	r3, [pc, #384]	; (8001de4 <fsm_manual_run+0x818>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a63      	ldr	r2, [pc, #396]	; (8001df4 <fsm_manual_run+0x828>)
 8001c66:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 8001c68:	4b60      	ldr	r3, [pc, #384]	; (8001dec <fsm_manual_run+0x820>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a62      	ldr	r2, [pc, #392]	; (8001df8 <fsm_manual_run+0x82c>)
 8001c6e:	6013      	str	r3, [r2, #0]
				}
			}
			sprintf(buffer1, "Road1: %.2f", (float)timeRED);
 8001c70:	4b62      	ldr	r3, [pc, #392]	; (8001dfc <fsm_manual_run+0x830>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe ffc1 	bl	8000bfc <__aeabi_i2f>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fbd3 	bl	8000428 <__aeabi_f2d>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	495e      	ldr	r1, [pc, #376]	; (8001e00 <fsm_manual_run+0x834>)
 8001c88:	485e      	ldr	r0, [pc, #376]	; (8001e04 <fsm_manual_run+0x838>)
 8001c8a:	f005 fd53 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeGREEN);
 8001c8e:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <fsm_manual_run+0x83c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe ffb2 	bl	8000bfc <__aeabi_i2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fbc4 	bl	8000428 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4959      	ldr	r1, [pc, #356]	; (8001e0c <fsm_manual_run+0x840>)
 8001ca6:	485a      	ldr	r0, [pc, #360]	; (8001e10 <fsm_manual_run+0x844>)
 8001ca8:	f005 fd44 	bl	8007734 <siprintf>
		}
		//Only Green LEDs in both Road 1 and 2 are ON, other LEDs are OFF
		if(blink_status == 0){
 8001cac:	4b5a      	ldr	r3, [pc, #360]	; (8001e18 <fsm_manual_run+0x84c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d104      	bne.n	8001cbe <fsm_manual_run+0x6f2>
			setTrafficGreen1();
 8001cb4:	f001 f9a6 	bl	8003004 <setTrafficGreen1>
			setTrafficGreen2();
 8001cb8:	f001 f9da 	bl	8003070 <setTrafficGreen2>
 8001cbc:	e001      	b.n	8001cc2 <fsm_manual_run+0x6f6>
		} else {
			setTrafficOff();
 8001cbe:	f001 f9e9 	bl	8003094 <setTrafficOff>
		}
		//Blinking Green LEDs
		if(timer1_flag == 1){
 8001cc2:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <fsm_manual_run+0x850>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d109      	bne.n	8001cde <fsm_manual_run+0x712>
			blink_status = 1 - blink_status;
 8001cca:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <fsm_manual_run+0x84c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1c3 0301 	rsb	r3, r3, #1
 8001cd2:	4a51      	ldr	r2, [pc, #324]	; (8001e18 <fsm_manual_run+0x84c>)
 8001cd4:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 8001cd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cda:	f001 f8a9 	bl	8002e30 <setTimer1>
		}
		//If BUTTON2 is pressed, tmpGREEN value increase 1 unit
		//If value overcome 99, it return to 1
			if(is_button_pressed_short(1) == 1){
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f000 fc98 	bl	8002614 <is_button_pressed_short>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d122      	bne.n	8001d30 <fsm_manual_run+0x764>
				setTimer4(5000);
 8001cea:	f241 3088 	movw	r0, #5000	; 0x1388
 8001cee:	f001 f8f3 	bl	8002ed8 <setTimer4>
				tmpGREEN++;
 8001cf2:	4b40      	ldr	r3, [pc, #256]	; (8001df4 <fsm_manual_run+0x828>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	4a3e      	ldr	r2, [pc, #248]	; (8001df4 <fsm_manual_run+0x828>)
 8001cfa:	6013      	str	r3, [r2, #0]
				if(tmpGREEN > 99) tmpGREEN = 1;
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <fsm_manual_run+0x828>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b63      	cmp	r3, #99	; 0x63
 8001d02:	dd02      	ble.n	8001d0a <fsm_manual_run+0x73e>
 8001d04:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <fsm_manual_run+0x828>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
				sprintf(buffer1, "Mode: Manual 4");
 8001d0a:	4945      	ldr	r1, [pc, #276]	; (8001e20 <fsm_manual_run+0x854>)
 8001d0c:	483d      	ldr	r0, [pc, #244]	; (8001e04 <fsm_manual_run+0x838>)
 8001d0e:	f005 fd11 	bl	8007734 <siprintf>
				sprintf(buffer2, "TimeGREEN: %.2f", (float)tmpGREEN);
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <fsm_manual_run+0x828>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ff70 	bl	8000bfc <__aeabi_i2f>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fb82 	bl	8000428 <__aeabi_f2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	493e      	ldr	r1, [pc, #248]	; (8001e24 <fsm_manual_run+0x858>)
 8001d2a:	4839      	ldr	r0, [pc, #228]	; (8001e10 <fsm_manual_run+0x844>)
 8001d2c:	f005 fd02 	bl	8007734 <siprintf>
			}
			if(is_button_pressed_1s(1) == 1){
 8001d30:	2001      	movs	r0, #1
 8001d32:	f000 fc8d 	bl	8002650 <is_button_pressed_1s>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d122      	bne.n	8001d82 <fsm_manual_run+0x7b6>
				setTimer4(5000);
 8001d3c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d40:	f001 f8ca 	bl	8002ed8 <setTimer4>
				tmpGREEN++;
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <fsm_manual_run+0x828>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	4a2a      	ldr	r2, [pc, #168]	; (8001df4 <fsm_manual_run+0x828>)
 8001d4c:	6013      	str	r3, [r2, #0]
				if(tmpGREEN > 99) tmpGREEN = 1;
 8001d4e:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <fsm_manual_run+0x828>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b63      	cmp	r3, #99	; 0x63
 8001d54:	dd02      	ble.n	8001d5c <fsm_manual_run+0x790>
 8001d56:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <fsm_manual_run+0x828>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
				sprintf(buffer1, "Mode: Manual 4");
 8001d5c:	4930      	ldr	r1, [pc, #192]	; (8001e20 <fsm_manual_run+0x854>)
 8001d5e:	4829      	ldr	r0, [pc, #164]	; (8001e04 <fsm_manual_run+0x838>)
 8001d60:	f005 fce8 	bl	8007734 <siprintf>
				sprintf(buffer2, "TimeGREEN: %.2f", (float)tmpGREEN);
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <fsm_manual_run+0x828>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe ff47 	bl	8000bfc <__aeabi_i2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb59 	bl	8000428 <__aeabi_f2d>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	492a      	ldr	r1, [pc, #168]	; (8001e24 <fsm_manual_run+0x858>)
 8001d7c:	4824      	ldr	r0, [pc, #144]	; (8001e10 <fsm_manual_run+0x844>)
 8001d7e:	f005 fcd9 	bl	8007734 <siprintf>
			}
		//If BUTTON3 is pressed, tmpGREEN is assigned for defaultTimeGreen
			if(is_button_pressed_short(2) == 1){
 8001d82:	2002      	movs	r0, #2
 8001d84:	f000 fc46 	bl	8002614 <is_button_pressed_short>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d121      	bne.n	8001dd2 <fsm_manual_run+0x806>
				setTimer4(5000);
 8001d8e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d92:	f001 f8a1 	bl	8002ed8 <setTimer4>
				defaultTimeGreen = tmpGREEN;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <fsm_manual_run+0x828>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <fsm_manual_run+0x814>)
 8001d9c:	6013      	str	r3, [r2, #0]
				sprintf(buffer1, "Mode: Manual 4");
 8001d9e:	4920      	ldr	r1, [pc, #128]	; (8001e20 <fsm_manual_run+0x854>)
 8001da0:	4818      	ldr	r0, [pc, #96]	; (8001e04 <fsm_manual_run+0x838>)
 8001da2:	f005 fcc7 	bl	8007734 <siprintf>
				sprintf(buffer2, "TimeGREEN: %.2f", (float)defaultTimeGreen);
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <fsm_manual_run+0x814>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe ff26 	bl	8000bfc <__aeabi_i2f>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fb38 	bl	8000428 <__aeabi_f2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4919      	ldr	r1, [pc, #100]	; (8001e24 <fsm_manual_run+0x858>)
 8001dbe:	4814      	ldr	r0, [pc, #80]	; (8001e10 <fsm_manual_run+0x844>)
 8001dc0:	f005 fcb8 	bl	8007734 <siprintf>
			}
	//Num 4 display the current Mode 4 to blink Green LEDs
		break;
 8001dc4:	e005      	b.n	8001dd2 <fsm_manual_run+0x806>
	default:
		break;
 8001dc6:	bf00      	nop
 8001dc8:	e004      	b.n	8001dd4 <fsm_manual_run+0x808>
		break;
 8001dca:	bf00      	nop
 8001dcc:	e002      	b.n	8001dd4 <fsm_manual_run+0x808>
		break;
 8001dce:	bf00      	nop
 8001dd0:	e000      	b.n	8001dd4 <fsm_manual_run+0x808>
		break;
 8001dd2:	bf00      	nop
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000014 	.word	0x20000014
 8001ddc:	20000020 	.word	0x20000020
 8001de0:	20000010 	.word	0x20000010
 8001de4:	2000001c 	.word	0x2000001c
 8001de8:	2000000c 	.word	0x2000000c
 8001dec:	20000018 	.word	0x20000018
 8001df0:	2000002c 	.word	0x2000002c
 8001df4:	20000028 	.word	0x20000028
 8001df8:	20000024 	.word	0x20000024
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	08009c08 	.word	0x08009c08
 8001e04:	200002a4 	.word	0x200002a4
 8001e08:	20000004 	.word	0x20000004
 8001e0c:	08009c14 	.word	0x08009c14
 8001e10:	20000284 	.word	0x20000284
 8001e14:	2000022c 	.word	0x2000022c
 8001e18:	20000228 	.word	0x20000228
 8001e1c:	20000260 	.word	0x20000260
 8001e20:	08009c60 	.word	0x08009c60
 8001e24:	08009c70 	.word	0x08009c70

08001e28 <fsm_setting_run>:
 *      Author: phuct
 */

#include "fsm_setting.h"

void fsm_setting_run(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	switch(status){
 8001e2c:	4ba4      	ldr	r3, [pc, #656]	; (80020c0 <fsm_setting_run+0x298>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	f000 8165 	beq.w	8002100 <fsm_setting_run+0x2d8>
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	f300 81e4 	bgt.w	8002204 <fsm_setting_run+0x3dc>
 8001e3c:	2b0e      	cmp	r3, #14
 8001e3e:	d003      	beq.n	8001e48 <fsm_setting_run+0x20>
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	f000 80a0 	beq.w	8001f86 <fsm_setting_run+0x15e>
			sprintf(buffer1, "Road1: %.2f", (float)timeRED);
			sprintf(buffer2, "Road2: %.2f", (float)timeGREEN);
		}
		break;
	default:
		break;
 8001e46:	e1dd      	b.n	8002204 <fsm_setting_run+0x3dc>
		setTrafficRed1();
 8001e48:	f001 f8b8 	bl	8002fbc <setTrafficRed1>
		setTrafficRed2();
 8001e4c:	f001 f8ec 	bl	8003028 <setTrafficRed2>
		if(is_button_pressed_short(0) == 1){
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 fbdf 	bl	8002614 <is_button_pressed_short>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <fsm_setting_run+0x40>
			defaultTimeRed--;
 8001e5c:	4b99      	ldr	r3, [pc, #612]	; (80020c4 <fsm_setting_run+0x29c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	4a98      	ldr	r2, [pc, #608]	; (80020c4 <fsm_setting_run+0x29c>)
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e022      	b.n	8001eae <fsm_setting_run+0x86>
		else if(is_button_pressed_1s(0) == 1){
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f000 fbf1 	bl	8002650 <is_button_pressed_1s>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <fsm_setting_run+0x58>
			defaultTimeRed--;
 8001e74:	4b93      	ldr	r3, [pc, #588]	; (80020c4 <fsm_setting_run+0x29c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	4a92      	ldr	r2, [pc, #584]	; (80020c4 <fsm_setting_run+0x29c>)
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e016      	b.n	8001eae <fsm_setting_run+0x86>
		else if(is_button_pressed_short(2) == 1){
 8001e80:	2002      	movs	r0, #2
 8001e82:	f000 fbc7 	bl	8002614 <is_button_pressed_short>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <fsm_setting_run+0x70>
			defaultTimeRed++;
 8001e8c:	4b8d      	ldr	r3, [pc, #564]	; (80020c4 <fsm_setting_run+0x29c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	4a8c      	ldr	r2, [pc, #560]	; (80020c4 <fsm_setting_run+0x29c>)
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00a      	b.n	8001eae <fsm_setting_run+0x86>
		else if(is_button_pressed_1s(2) == 1){
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f000 fbd9 	bl	8002650 <is_button_pressed_1s>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d104      	bne.n	8001eae <fsm_setting_run+0x86>
			defaultTimeRed++;
 8001ea4:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <fsm_setting_run+0x29c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4a86      	ldr	r2, [pc, #536]	; (80020c4 <fsm_setting_run+0x29c>)
 8001eac:	6013      	str	r3, [r2, #0]
		if(defaultTimeRed < 0){
 8001eae:	4b85      	ldr	r3, [pc, #532]	; (80020c4 <fsm_setting_run+0x29c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	da02      	bge.n	8001ebc <fsm_setting_run+0x94>
			defaultTimeRed = 99;
 8001eb6:	4b83      	ldr	r3, [pc, #524]	; (80020c4 <fsm_setting_run+0x29c>)
 8001eb8:	2263      	movs	r2, #99	; 0x63
 8001eba:	601a      	str	r2, [r3, #0]
		if(defaultTimeRed > 99){
 8001ebc:	4b81      	ldr	r3, [pc, #516]	; (80020c4 <fsm_setting_run+0x29c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b63      	cmp	r3, #99	; 0x63
 8001ec2:	dd02      	ble.n	8001eca <fsm_setting_run+0xa2>
			defaultTimeRed = 0;
 8001ec4:	4b7f      	ldr	r3, [pc, #508]	; (80020c4 <fsm_setting_run+0x29c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
		sprintf(buffer1, "Mode: Setting 1");
 8001eca:	497f      	ldr	r1, [pc, #508]	; (80020c8 <fsm_setting_run+0x2a0>)
 8001ecc:	487f      	ldr	r0, [pc, #508]	; (80020cc <fsm_setting_run+0x2a4>)
 8001ece:	f005 fc31 	bl	8007734 <siprintf>
		sprintf(buffer2, "RED: %.2f", (float)defaultTimeRed);
 8001ed2:	4b7c      	ldr	r3, [pc, #496]	; (80020c4 <fsm_setting_run+0x29c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fe90 	bl	8000bfc <__aeabi_i2f>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe faa2 	bl	8000428 <__aeabi_f2d>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4979      	ldr	r1, [pc, #484]	; (80020d0 <fsm_setting_run+0x2a8>)
 8001eea:	487a      	ldr	r0, [pc, #488]	; (80020d4 <fsm_setting_run+0x2ac>)
 8001eec:	f005 fc22 	bl	8007734 <siprintf>
		if(is_button_pressed_short(1) == 1){
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f000 fb8f 	bl	8002614 <is_button_pressed_short>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d118      	bne.n	8001f2e <fsm_setting_run+0x106>
			setTimer1(250);
 8001efc:	20fa      	movs	r0, #250	; 0xfa
 8001efe:	f000 ff97 	bl	8002e30 <setTimer1>
			status = SET_MODE2;
 8001f02:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <fsm_setting_run+0x298>)
 8001f04:	220f      	movs	r2, #15
 8001f06:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Setting 2");
 8001f08:	4973      	ldr	r1, [pc, #460]	; (80020d8 <fsm_setting_run+0x2b0>)
 8001f0a:	4870      	ldr	r0, [pc, #448]	; (80020cc <fsm_setting_run+0x2a4>)
 8001f0c:	f005 fc12 	bl	8007734 <siprintf>
			sprintf(buffer2, "AMBER: %.2f", (float)defaultTimeAmber);
 8001f10:	4b72      	ldr	r3, [pc, #456]	; (80020dc <fsm_setting_run+0x2b4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fe71 	bl	8000bfc <__aeabi_i2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fa83 	bl	8000428 <__aeabi_f2d>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	496e      	ldr	r1, [pc, #440]	; (80020e0 <fsm_setting_run+0x2b8>)
 8001f28:	486a      	ldr	r0, [pc, #424]	; (80020d4 <fsm_setting_run+0x2ac>)
 8001f2a:	f005 fc03 	bl	8007734 <siprintf>
		if(is_button_pressed_1s(1) == 1){
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f000 fb8e 	bl	8002650 <is_button_pressed_1s>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	f040 8166 	bne.w	8002208 <fsm_setting_run+0x3e0>
			setTimer1(250);
 8001f3c:	20fa      	movs	r0, #250	; 0xfa
 8001f3e:	f000 ff77 	bl	8002e30 <setTimer1>
			status = AUTO_RED_GREEN;
 8001f42:	4b5f      	ldr	r3, [pc, #380]	; (80020c0 <fsm_setting_run+0x298>)
 8001f44:	2202      	movs	r2, #2
 8001f46:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Road1: %.2f", (float)timeRED);
 8001f48:	4b66      	ldr	r3, [pc, #408]	; (80020e4 <fsm_setting_run+0x2bc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fe55 	bl	8000bfc <__aeabi_i2f>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fa67 	bl	8000428 <__aeabi_f2d>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4962      	ldr	r1, [pc, #392]	; (80020e8 <fsm_setting_run+0x2c0>)
 8001f60:	485a      	ldr	r0, [pc, #360]	; (80020cc <fsm_setting_run+0x2a4>)
 8001f62:	f005 fbe7 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeGREEN);
 8001f66:	4b61      	ldr	r3, [pc, #388]	; (80020ec <fsm_setting_run+0x2c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fe46 	bl	8000bfc <__aeabi_i2f>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fa58 	bl	8000428 <__aeabi_f2d>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	495c      	ldr	r1, [pc, #368]	; (80020f0 <fsm_setting_run+0x2c8>)
 8001f7e:	4855      	ldr	r0, [pc, #340]	; (80020d4 <fsm_setting_run+0x2ac>)
 8001f80:	f005 fbd8 	bl	8007734 <siprintf>
		break;
 8001f84:	e140      	b.n	8002208 <fsm_setting_run+0x3e0>
		setTrafficAmber1();
 8001f86:	f001 f82b 	bl	8002fe0 <setTrafficAmber1>
		setTrafficAmber2();
 8001f8a:	f001 f85f 	bl	800304c <setTrafficAmber2>
		if(is_button_pressed_short(0) == 1){
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f000 fb40 	bl	8002614 <is_button_pressed_short>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d104      	bne.n	8001fa4 <fsm_setting_run+0x17c>
			defaultTimeAmber--;
 8001f9a:	4b50      	ldr	r3, [pc, #320]	; (80020dc <fsm_setting_run+0x2b4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	4a4e      	ldr	r2, [pc, #312]	; (80020dc <fsm_setting_run+0x2b4>)
 8001fa2:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(0) == 1){
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f000 fb53 	bl	8002650 <is_button_pressed_1s>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d104      	bne.n	8001fba <fsm_setting_run+0x192>
			defaultTimeAmber--;
 8001fb0:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <fsm_setting_run+0x2b4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	4a49      	ldr	r2, [pc, #292]	; (80020dc <fsm_setting_run+0x2b4>)
 8001fb8:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_short(2) == 1){
 8001fba:	2002      	movs	r0, #2
 8001fbc:	f000 fb2a 	bl	8002614 <is_button_pressed_short>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d104      	bne.n	8001fd0 <fsm_setting_run+0x1a8>
			defaultTimeAmber++;
 8001fc6:	4b45      	ldr	r3, [pc, #276]	; (80020dc <fsm_setting_run+0x2b4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a43      	ldr	r2, [pc, #268]	; (80020dc <fsm_setting_run+0x2b4>)
 8001fce:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(2) == 1){
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f000 fb3d 	bl	8002650 <is_button_pressed_1s>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d104      	bne.n	8001fe6 <fsm_setting_run+0x1be>
			defaultTimeAmber++;
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <fsm_setting_run+0x2b4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	4a3e      	ldr	r2, [pc, #248]	; (80020dc <fsm_setting_run+0x2b4>)
 8001fe4:	6013      	str	r3, [r2, #0]
		if(defaultTimeAmber < 0){
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <fsm_setting_run+0x2b4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da02      	bge.n	8001ff4 <fsm_setting_run+0x1cc>
			defaultTimeAmber = 99;
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <fsm_setting_run+0x2b4>)
 8001ff0:	2263      	movs	r2, #99	; 0x63
 8001ff2:	601a      	str	r2, [r3, #0]
		if(defaultTimeAmber > 99){
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <fsm_setting_run+0x2b4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b63      	cmp	r3, #99	; 0x63
 8001ffa:	dd02      	ble.n	8002002 <fsm_setting_run+0x1da>
			defaultTimeAmber = 0;
 8001ffc:	4b37      	ldr	r3, [pc, #220]	; (80020dc <fsm_setting_run+0x2b4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
		sprintf(buffer1, "Mode: Setting 2");
 8002002:	4935      	ldr	r1, [pc, #212]	; (80020d8 <fsm_setting_run+0x2b0>)
 8002004:	4831      	ldr	r0, [pc, #196]	; (80020cc <fsm_setting_run+0x2a4>)
 8002006:	f005 fb95 	bl	8007734 <siprintf>
		sprintf(buffer2, "AMBER: %.2f", (float)defaultTimeAmber);
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <fsm_setting_run+0x2b4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fdf4 	bl	8000bfc <__aeabi_i2f>
 8002014:	4603      	mov	r3, r0
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa06 	bl	8000428 <__aeabi_f2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	492f      	ldr	r1, [pc, #188]	; (80020e0 <fsm_setting_run+0x2b8>)
 8002022:	482c      	ldr	r0, [pc, #176]	; (80020d4 <fsm_setting_run+0x2ac>)
 8002024:	f005 fb86 	bl	8007734 <siprintf>
		if(is_button_pressed_short(1) == 1){
 8002028:	2001      	movs	r0, #1
 800202a:	f000 faf3 	bl	8002614 <is_button_pressed_short>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d118      	bne.n	8002066 <fsm_setting_run+0x23e>
			setTimer1(250);
 8002034:	20fa      	movs	r0, #250	; 0xfa
 8002036:	f000 fefb 	bl	8002e30 <setTimer1>
			status = SET_MODE3;
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <fsm_setting_run+0x298>)
 800203c:	2210      	movs	r2, #16
 800203e:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Setting 3");
 8002040:	492c      	ldr	r1, [pc, #176]	; (80020f4 <fsm_setting_run+0x2cc>)
 8002042:	4822      	ldr	r0, [pc, #136]	; (80020cc <fsm_setting_run+0x2a4>)
 8002044:	f005 fb76 	bl	8007734 <siprintf>
			sprintf(buffer2, "GREEN: %.2f", (float)defaultTimeGreen);
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <fsm_setting_run+0x2d0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fdd5 	bl	8000bfc <__aeabi_i2f>
 8002052:	4603      	mov	r3, r0
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe f9e7 	bl	8000428 <__aeabi_f2d>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4927      	ldr	r1, [pc, #156]	; (80020fc <fsm_setting_run+0x2d4>)
 8002060:	481c      	ldr	r0, [pc, #112]	; (80020d4 <fsm_setting_run+0x2ac>)
 8002062:	f005 fb67 	bl	8007734 <siprintf>
		if(is_button_pressed_1s(1) == 1){
 8002066:	2001      	movs	r0, #1
 8002068:	f000 faf2 	bl	8002650 <is_button_pressed_1s>
 800206c:	4603      	mov	r3, r0
 800206e:	2b01      	cmp	r3, #1
 8002070:	f040 80cc 	bne.w	800220c <fsm_setting_run+0x3e4>
			setTimer1(250);
 8002074:	20fa      	movs	r0, #250	; 0xfa
 8002076:	f000 fedb 	bl	8002e30 <setTimer1>
			status = AUTO_RED_GREEN;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <fsm_setting_run+0x298>)
 800207c:	2202      	movs	r2, #2
 800207e:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Road1: %.2f", (float)timeRED);
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <fsm_setting_run+0x2bc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fdb9 	bl	8000bfc <__aeabi_i2f>
 800208a:	4603      	mov	r3, r0
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe f9cb 	bl	8000428 <__aeabi_f2d>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4914      	ldr	r1, [pc, #80]	; (80020e8 <fsm_setting_run+0x2c0>)
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <fsm_setting_run+0x2a4>)
 800209a:	f005 fb4b 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeGREEN);
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <fsm_setting_run+0x2c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fdaa 	bl	8000bfc <__aeabi_i2f>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe f9bc 	bl	8000428 <__aeabi_f2d>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	490e      	ldr	r1, [pc, #56]	; (80020f0 <fsm_setting_run+0x2c8>)
 80020b6:	4807      	ldr	r0, [pc, #28]	; (80020d4 <fsm_setting_run+0x2ac>)
 80020b8:	f005 fb3c 	bl	8007734 <siprintf>
		break;
 80020bc:	e0a6      	b.n	800220c <fsm_setting_run+0x3e4>
 80020be:	bf00      	nop
 80020c0:	2000022c 	.word	0x2000022c
 80020c4:	2000000c 	.word	0x2000000c
 80020c8:	08009c80 	.word	0x08009c80
 80020cc:	200002a4 	.word	0x200002a4
 80020d0:	08009c90 	.word	0x08009c90
 80020d4:	20000284 	.word	0x20000284
 80020d8:	08009c9c 	.word	0x08009c9c
 80020dc:	20000014 	.word	0x20000014
 80020e0:	08009cac 	.word	0x08009cac
 80020e4:	20000000 	.word	0x20000000
 80020e8:	08009cb8 	.word	0x08009cb8
 80020ec:	20000004 	.word	0x20000004
 80020f0:	08009cc4 	.word	0x08009cc4
 80020f4:	08009cd0 	.word	0x08009cd0
 80020f8:	20000010 	.word	0x20000010
 80020fc:	08009ce0 	.word	0x08009ce0
		setTrafficGreen1();
 8002100:	f000 ff80 	bl	8003004 <setTrafficGreen1>
		setTrafficGreen2();
 8002104:	f000 ffb4 	bl	8003070 <setTrafficGreen2>
		if(is_button_pressed_short(0) == 1){
 8002108:	2000      	movs	r0, #0
 800210a:	f000 fa83 	bl	8002614 <is_button_pressed_short>
 800210e:	4603      	mov	r3, r0
 8002110:	2b01      	cmp	r3, #1
 8002112:	d104      	bne.n	800211e <fsm_setting_run+0x2f6>
			defaultTimeGreen--;
 8002114:	4b40      	ldr	r3, [pc, #256]	; (8002218 <fsm_setting_run+0x3f0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3b01      	subs	r3, #1
 800211a:	4a3f      	ldr	r2, [pc, #252]	; (8002218 <fsm_setting_run+0x3f0>)
 800211c:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(0) == 1){
 800211e:	2000      	movs	r0, #0
 8002120:	f000 fa96 	bl	8002650 <is_button_pressed_1s>
 8002124:	4603      	mov	r3, r0
 8002126:	2b01      	cmp	r3, #1
 8002128:	d104      	bne.n	8002134 <fsm_setting_run+0x30c>
			defaultTimeGreen--;
 800212a:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <fsm_setting_run+0x3f0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3b01      	subs	r3, #1
 8002130:	4a39      	ldr	r2, [pc, #228]	; (8002218 <fsm_setting_run+0x3f0>)
 8002132:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_short(2) == 1){
 8002134:	2002      	movs	r0, #2
 8002136:	f000 fa6d 	bl	8002614 <is_button_pressed_short>
 800213a:	4603      	mov	r3, r0
 800213c:	2b01      	cmp	r3, #1
 800213e:	d104      	bne.n	800214a <fsm_setting_run+0x322>
			defaultTimeGreen++;
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <fsm_setting_run+0x3f0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	4a34      	ldr	r2, [pc, #208]	; (8002218 <fsm_setting_run+0x3f0>)
 8002148:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(0) == 1){
 800214a:	2000      	movs	r0, #0
 800214c:	f000 fa80 	bl	8002650 <is_button_pressed_1s>
 8002150:	4603      	mov	r3, r0
 8002152:	2b01      	cmp	r3, #1
 8002154:	d104      	bne.n	8002160 <fsm_setting_run+0x338>
			defaultTimeGreen++;
 8002156:	4b30      	ldr	r3, [pc, #192]	; (8002218 <fsm_setting_run+0x3f0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <fsm_setting_run+0x3f0>)
 800215e:	6013      	str	r3, [r2, #0]
		if(defaultTimeGreen < 0){
 8002160:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <fsm_setting_run+0x3f0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	da02      	bge.n	800216e <fsm_setting_run+0x346>
			defaultTimeGreen = 99;
 8002168:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <fsm_setting_run+0x3f0>)
 800216a:	2263      	movs	r2, #99	; 0x63
 800216c:	601a      	str	r2, [r3, #0]
		if(defaultTimeGreen > 99){
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <fsm_setting_run+0x3f0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b63      	cmp	r3, #99	; 0x63
 8002174:	dd02      	ble.n	800217c <fsm_setting_run+0x354>
			defaultTimeGreen = 0;
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <fsm_setting_run+0x3f0>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
		sprintf(buffer1, "Mode: Setting 3");
 800217c:	4927      	ldr	r1, [pc, #156]	; (800221c <fsm_setting_run+0x3f4>)
 800217e:	4828      	ldr	r0, [pc, #160]	; (8002220 <fsm_setting_run+0x3f8>)
 8002180:	f005 fad8 	bl	8007734 <siprintf>
		sprintf(buffer2, "GREEN: %.2f", (float)defaultTimeGreen);
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <fsm_setting_run+0x3f0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fd37 	bl	8000bfc <__aeabi_i2f>
 800218e:	4603      	mov	r3, r0
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe f949 	bl	8000428 <__aeabi_f2d>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4922      	ldr	r1, [pc, #136]	; (8002224 <fsm_setting_run+0x3fc>)
 800219c:	4822      	ldr	r0, [pc, #136]	; (8002228 <fsm_setting_run+0x400>)
 800219e:	f005 fac9 	bl	8007734 <siprintf>
		if(is_button_pressed_1s(1) == 1 || is_button_pressed_short(1) == 1){
 80021a2:	2001      	movs	r0, #1
 80021a4:	f000 fa54 	bl	8002650 <is_button_pressed_1s>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d005      	beq.n	80021ba <fsm_setting_run+0x392>
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 fa30 	bl	8002614 <is_button_pressed_short>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d12a      	bne.n	8002210 <fsm_setting_run+0x3e8>
			setTimer1(250);
 80021ba:	20fa      	movs	r0, #250	; 0xfa
 80021bc:	f000 fe38 	bl	8002e30 <setTimer1>
			status = AUTO_RED_GREEN;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <fsm_setting_run+0x404>)
 80021c2:	2202      	movs	r2, #2
 80021c4:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Road1: %.2f", (float)timeRED);
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <fsm_setting_run+0x408>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fd16 	bl	8000bfc <__aeabi_i2f>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f928 	bl	8000428 <__aeabi_f2d>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4915      	ldr	r1, [pc, #84]	; (8002234 <fsm_setting_run+0x40c>)
 80021de:	4810      	ldr	r0, [pc, #64]	; (8002220 <fsm_setting_run+0x3f8>)
 80021e0:	f005 faa8 	bl	8007734 <siprintf>
			sprintf(buffer2, "Road2: %.2f", (float)timeGREEN);
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <fsm_setting_run+0x410>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fd07 	bl	8000bfc <__aeabi_i2f>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f919 	bl	8000428 <__aeabi_f2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4910      	ldr	r1, [pc, #64]	; (800223c <fsm_setting_run+0x414>)
 80021fc:	480a      	ldr	r0, [pc, #40]	; (8002228 <fsm_setting_run+0x400>)
 80021fe:	f005 fa99 	bl	8007734 <siprintf>
		break;
 8002202:	e005      	b.n	8002210 <fsm_setting_run+0x3e8>
		break;
 8002204:	bf00      	nop
 8002206:	e004      	b.n	8002212 <fsm_setting_run+0x3ea>
		break;
 8002208:	bf00      	nop
 800220a:	e002      	b.n	8002212 <fsm_setting_run+0x3ea>
		break;
 800220c:	bf00      	nop
 800220e:	e000      	b.n	8002212 <fsm_setting_run+0x3ea>
		break;
 8002210:	bf00      	nop
	}
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000010 	.word	0x20000010
 800221c:	08009cd0 	.word	0x08009cd0
 8002220:	200002a4 	.word	0x200002a4
 8002224:	08009ce0 	.word	0x08009ce0
 8002228:	20000284 	.word	0x20000284
 800222c:	2000022c 	.word	0x2000022c
 8002230:	20000000 	.word	0x20000000
 8002234:	08009cb8 	.word	0x08009cb8
 8002238:	20000004 	.word	0x20000004
 800223c:	08009cc4 	.word	0x08009cc4

08002240 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to your setup

void lcd_send_cmd (char cmd)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af02      	add	r7, sp, #8
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f023 030f 	bic.w	r3, r3, #15
 8002250:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	f043 030c 	orr.w	r3, r3, #12
 800225e:	b2db      	uxtb	r3, r3
 8002260:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	b2db      	uxtb	r3, r3
 800226a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	f043 030c 	orr.w	r3, r3, #12
 8002272:	b2db      	uxtb	r3, r3
 8002274:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002276:	7bbb      	ldrb	r3, [r7, #14]
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	b2db      	uxtb	r3, r3
 800227e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002280:	f107 0208 	add.w	r2, r7, #8
 8002284:	2364      	movs	r3, #100	; 0x64
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2304      	movs	r3, #4
 800228a:	2142      	movs	r1, #66	; 0x42
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <lcd_send_cmd+0x5c>)
 800228e:	f001 fc8f 	bl	8003bb0 <HAL_I2C_Master_Transmit>
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200002c4 	.word	0x200002c4

080022a0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	f023 030f 	bic.w	r3, r3, #15
 80022b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	f043 030d 	orr.w	r3, r3, #13
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	f043 0309 	orr.w	r3, r3, #9
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80022cc:	7bbb      	ldrb	r3, [r7, #14]
 80022ce:	f043 030d 	orr.w	r3, r3, #13
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80022d6:	7bbb      	ldrb	r3, [r7, #14]
 80022d8:	f043 0309 	orr.w	r3, r3, #9
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80022e0:	f107 0208 	add.w	r2, r7, #8
 80022e4:	2364      	movs	r3, #100	; 0x64
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2304      	movs	r3, #4
 80022ea:	2142      	movs	r1, #66	; 0x42
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <lcd_send_data+0x5c>)
 80022ee:	f001 fc5f 	bl	8003bb0 <HAL_I2C_Master_Transmit>
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200002c4 	.word	0x200002c4

08002300 <lcd_init>:

void lcd_init (void) {
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8002304:	2033      	movs	r0, #51	; 0x33
 8002306:	f7ff ff9b 	bl	8002240 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800230a:	2032      	movs	r0, #50	; 0x32
 800230c:	f7ff ff98 	bl	8002240 <lcd_send_cmd>
	HAL_Delay(50);
 8002310:	2032      	movs	r0, #50	; 0x32
 8002312:	f000 ff67 	bl	80031e4 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8002316:	2028      	movs	r0, #40	; 0x28
 8002318:	f7ff ff92 	bl	8002240 <lcd_send_cmd>
	HAL_Delay(50);
 800231c:	2032      	movs	r0, #50	; 0x32
 800231e:	f000 ff61 	bl	80031e4 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8002322:	2001      	movs	r0, #1
 8002324:	f7ff ff8c 	bl	8002240 <lcd_send_cmd>
	HAL_Delay(50);
 8002328:	2032      	movs	r0, #50	; 0x32
 800232a:	f000 ff5b 	bl	80031e4 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800232e:	2006      	movs	r0, #6
 8002330:	f7ff ff86 	bl	8002240 <lcd_send_cmd>
	HAL_Delay(50);
 8002334:	2032      	movs	r0, #50	; 0x32
 8002336:	f000 ff55 	bl	80031e4 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 800233a:	200c      	movs	r0, #12
 800233c:	f7ff ff80 	bl	8002240 <lcd_send_cmd>
	HAL_Delay(50);
 8002340:	2032      	movs	r0, #50	; 0x32
 8002342:	f000 ff4f 	bl	80031e4 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8002346:	2002      	movs	r0, #2
 8002348:	f7ff ff7a 	bl	8002240 <lcd_send_cmd>
	HAL_Delay(50);
 800234c:	2032      	movs	r0, #50	; 0x32
 800234e:	f000 ff49 	bl	80031e4 <HAL_Delay>
	lcd_send_cmd (0x80);
 8002352:	2080      	movs	r0, #128	; 0x80
 8002354:	f7ff ff74 	bl	8002240 <lcd_send_cmd>
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002364:	e006      	b.n	8002374 <lcd_send_string+0x18>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff96 	bl	80022a0 <lcd_send_data>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f4      	bne.n	8002366 <lcd_send_string+0xa>
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4413      	add	r3, r2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	337f      	adds	r3, #127	; 0x7f
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e008      	b.n	80023ba <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3340      	adds	r3, #64	; 0x40
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023b6:	b25b      	sxtb	r3, r3
 80023b8:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff3f 	bl	8002240 <lcd_send_cmd>
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <lcd_update>:


void lcd_update(){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <lcd_update+0x50>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d11e      	bne.n	8002416 <lcd_update+0x4a>
			lcd_goto_XY(1, 1);
 80023d8:	2101      	movs	r1, #1
 80023da:	2001      	movs	r0, #1
 80023dc:	f7ff ffd3 	bl	8002386 <lcd_goto_XY>
			lcd_send_string("                ");
 80023e0:	480f      	ldr	r0, [pc, #60]	; (8002420 <lcd_update+0x54>)
 80023e2:	f7ff ffbb 	bl	800235c <lcd_send_string>
			lcd_goto_XY(2, 1);
 80023e6:	2101      	movs	r1, #1
 80023e8:	2002      	movs	r0, #2
 80023ea:	f7ff ffcc 	bl	8002386 <lcd_goto_XY>
			lcd_send_string("                ");
 80023ee:	480c      	ldr	r0, [pc, #48]	; (8002420 <lcd_update+0x54>)
 80023f0:	f7ff ffb4 	bl	800235c <lcd_send_string>

		lcd_goto_XY(1, 1);
 80023f4:	2101      	movs	r1, #1
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7ff ffc5 	bl	8002386 <lcd_goto_XY>
		lcd_send_string(buffer1);
 80023fc:	4809      	ldr	r0, [pc, #36]	; (8002424 <lcd_update+0x58>)
 80023fe:	f7ff ffad 	bl	800235c <lcd_send_string>
		lcd_goto_XY(2, 1);
 8002402:	2101      	movs	r1, #1
 8002404:	2002      	movs	r0, #2
 8002406:	f7ff ffbe 	bl	8002386 <lcd_goto_XY>
		lcd_send_string(buffer2);
 800240a:	4807      	ldr	r0, [pc, #28]	; (8002428 <lcd_update+0x5c>)
 800240c:	f7ff ffa6 	bl	800235c <lcd_send_string>
		setTimer3(100);
 8002410:	2064      	movs	r0, #100	; 0x64
 8002412:	f000 fd45 	bl	8002ea0 <setTimer3>
	}
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000270 	.word	0x20000270
 8002420:	08009cec 	.word	0x08009cec
 8002424:	200002a4 	.word	0x200002a4
 8002428:	20000284 	.word	0x20000284

0800242c <button_reading>:

// Counter for automatically detecting when a button is pressed more than 1 second
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForLongPressInterval[NO_OF_BUTTONS];

void button_reading(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	e0d2      	b.n	80025de <button_reading+0x1b2>
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8002438:	4a6d      	ldr	r2, [pc, #436]	; (80025f0 <button_reading+0x1c4>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	7819      	ldrb	r1, [r3, #0]
 8002440:	4a6c      	ldr	r2, [pc, #432]	; (80025f4 <button_reading+0x1c8>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	460a      	mov	r2, r1
 8002448:	701a      	strb	r2, [r3, #0]

        // Update to handle multiple buttons
        switch(i) {
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d022      	beq.n	8002496 <button_reading+0x6a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	dc2b      	bgt.n	80024ae <button_reading+0x82>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <button_reading+0x38>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d00c      	beq.n	800247c <button_reading+0x50>
                break;
            case 2:
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
                break;
            default:
                break;
 8002462:	e024      	b.n	80024ae <button_reading+0x82>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8002464:	2110      	movs	r1, #16
 8002466:	4864      	ldr	r0, [pc, #400]	; (80025f8 <button_reading+0x1cc>)
 8002468:	f001 f9f8 	bl	800385c <HAL_GPIO_ReadPin>
 800246c:	4603      	mov	r3, r0
 800246e:	4619      	mov	r1, r3
 8002470:	4a5f      	ldr	r2, [pc, #380]	; (80025f0 <button_reading+0x1c4>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	460a      	mov	r2, r1
 8002478:	701a      	strb	r2, [r3, #0]
                break;
 800247a:	e019      	b.n	80024b0 <button_reading+0x84>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800247c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002480:	485d      	ldr	r0, [pc, #372]	; (80025f8 <button_reading+0x1cc>)
 8002482:	f001 f9eb 	bl	800385c <HAL_GPIO_ReadPin>
 8002486:	4603      	mov	r3, r0
 8002488:	4619      	mov	r1, r3
 800248a:	4a59      	ldr	r2, [pc, #356]	; (80025f0 <button_reading+0x1c4>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	460a      	mov	r2, r1
 8002492:	701a      	strb	r2, [r3, #0]
                break;
 8002494:	e00c      	b.n	80024b0 <button_reading+0x84>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8002496:	2120      	movs	r1, #32
 8002498:	4857      	ldr	r0, [pc, #348]	; (80025f8 <button_reading+0x1cc>)
 800249a:	f001 f9df 	bl	800385c <HAL_GPIO_ReadPin>
 800249e:	4603      	mov	r3, r0
 80024a0:	4619      	mov	r1, r3
 80024a2:	4a53      	ldr	r2, [pc, #332]	; (80025f0 <button_reading+0x1c4>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	460a      	mov	r2, r1
 80024aa:	701a      	strb	r2, [r3, #0]
                break;
 80024ac:	e000      	b.n	80024b0 <button_reading+0x84>
                break;
 80024ae:	bf00      	nop
        }

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 80024b0:	4a4f      	ldr	r2, [pc, #316]	; (80025f0 <button_reading+0x1c4>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	494e      	ldr	r1, [pc, #312]	; (80025f4 <button_reading+0x1c8>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	440b      	add	r3, r1
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8089 	bne.w	80025d8 <button_reading+0x1ac>
            buttonBuffer[i] = debounceButtonBuffer1[i]; // Debouncing logic
 80024c6:	4a4a      	ldr	r2, [pc, #296]	; (80025f0 <button_reading+0x1c4>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	7819      	ldrb	r1, [r3, #0]
 80024ce:	4a4b      	ldr	r2, [pc, #300]	; (80025fc <button_reading+0x1d0>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	460a      	mov	r2, r1
 80024d6:	701a      	strb	r2, [r3, #0]

            if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80024d8:	4a48      	ldr	r2, [pc, #288]	; (80025fc <button_reading+0x1d0>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d144      	bne.n	800256e <button_reading+0x142>
                // Button is pressed; we start counting
                if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80024e4:	4a46      	ldr	r2, [pc, #280]	; (8002600 <button_reading+0x1d4>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ec:	2b63      	cmp	r3, #99	; 0x63
 80024ee:	d81f      	bhi.n	8002530 <button_reading+0x104>
                    counterForButtonPress1s[i]++;
 80024f0:	4a43      	ldr	r2, [pc, #268]	; (8002600 <button_reading+0x1d4>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f8:	3301      	adds	r3, #1
 80024fa:	b299      	uxth	r1, r3
 80024fc:	4a40      	ldr	r2, [pc, #256]	; (8002600 <button_reading+0x1d4>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    if (counterForButtonPress1s[i] == DURATION_FOR_AUTO_INCREASING) {
 8002504:	4a3e      	ldr	r2, [pc, #248]	; (8002600 <button_reading+0x1d4>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800250c:	2b64      	cmp	r3, #100	; 0x64
 800250e:	d12e      	bne.n	800256e <button_reading+0x142>
                        // Flag is turned on when 1 second has passed since the button was pressed
                        flagForButtonPress1s[i] = 1;
 8002510:	4a3c      	ldr	r2, [pc, #240]	; (8002604 <button_reading+0x1d8>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
                        flagForButtonPressShort[i] = 0; // Reset short press flag
 800251a:	4a3b      	ldr	r2, [pc, #236]	; (8002608 <button_reading+0x1dc>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
                        counterForLongPressInterval[i] = 0;
 8002524:	4a39      	ldr	r2, [pc, #228]	; (800260c <button_reading+0x1e0>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2100      	movs	r1, #0
 800252a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800252e:	e01e      	b.n	800256e <button_reading+0x142>
                    }
                } else {
                    // The button is pressed for less than 1 second
                	counterForLongPressInterval[i]++;
 8002530:	4a36      	ldr	r2, [pc, #216]	; (800260c <button_reading+0x1e0>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002538:	3301      	adds	r3, #1
 800253a:	b299      	uxth	r1, r3
 800253c:	4a33      	ldr	r2, [pc, #204]	; (800260c <button_reading+0x1e0>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                	if (counterForLongPressInterval[i] >= 25) {
 8002544:	4a31      	ldr	r2, [pc, #196]	; (800260c <button_reading+0x1e0>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800254c:	2b18      	cmp	r3, #24
 800254e:	d90e      	bls.n	800256e <button_reading+0x142>
						flagForButtonPressShort[i] = 0;
 8002550:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <button_reading+0x1dc>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
						flagForButtonPress1s[i] = 1; // Reset long press flag
 800255a:	4a2a      	ldr	r2, [pc, #168]	; (8002604 <button_reading+0x1d8>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
						counterForLongPressInterval[i] = 0;
 8002564:	4a29      	ldr	r2, [pc, #164]	; (800260c <button_reading+0x1e0>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2100      	movs	r1, #0
 800256a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                	}
                }
            }

            if (buttonBuffer[i] == BUTTON_IS_RELEASED && previousButtonBuffer[i] == BUTTON_IS_PRESSED) {
 800256e:	4a23      	ldr	r2, [pc, #140]	; (80025fc <button_reading+0x1d0>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d125      	bne.n	80025c6 <button_reading+0x19a>
 800257a:	4a25      	ldr	r2, [pc, #148]	; (8002610 <button_reading+0x1e4>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11f      	bne.n	80025c6 <button_reading+0x19a>
				// Button has just been released
				if (counterForButtonPress1s[i] > 0 && counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <button_reading+0x1d4>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <button_reading+0x17c>
 8002592:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <button_reading+0x1d4>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800259a:	2b63      	cmp	r3, #99	; 0x63
 800259c:	d804      	bhi.n	80025a8 <button_reading+0x17c>
					// It was a short press
					flagForButtonPressShort[i] = 1;
 800259e:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <button_reading+0x1dc>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
				}
				// Reset counters and flags on release
				counterForButtonPress1s[i] = 0;
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <button_reading+0x1d4>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2100      	movs	r1, #0
 80025ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForLongPressInterval[i] = 0;
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <button_reading+0x1e0>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2100      	movs	r1, #0
 80025b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80025bc:	4a11      	ldr	r2, [pc, #68]	; (8002604 <button_reading+0x1d8>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
			}

			// Store the current button state for the next iteration
			previousButtonBuffer[i] = buttonBuffer[i];
 80025c6:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <button_reading+0x1d0>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	7819      	ldrb	r1, [r3, #0]
 80025ce:	4a10      	ldr	r2, [pc, #64]	; (8002610 <button_reading+0x1e4>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	460a      	mov	r2, r1
 80025d6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3301      	adds	r3, #1
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	f77f af29 	ble.w	8002438 <button_reading+0xc>
        }
    }
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000238 	.word	0x20000238
 80025f4:	2000023c 	.word	0x2000023c
 80025f8:	40010c00 	.word	0x40010c00
 80025fc:	20000230 	.word	0x20000230
 8002600:	20000248 	.word	0x20000248
 8002604:	20000240 	.word	0x20000240
 8002608:	20000244 	.word	0x20000244
 800260c:	20000250 	.word	0x20000250
 8002610:	20000234 	.word	0x20000234

08002614 <is_button_pressed_short>:

// Function to check if button is pressed shorter than 1s
unsigned char is_button_pressed_short(uint8_t index) {
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <is_button_pressed_short+0x14>
 8002624:	2300      	movs	r3, #0
 8002626:	e00b      	b.n	8002640 <is_button_pressed_short+0x2c>
    if (flagForButtonPressShort[index] == 1) {
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	4a08      	ldr	r2, [pc, #32]	; (800264c <is_button_pressed_short+0x38>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d105      	bne.n	800263e <is_button_pressed_short+0x2a>
        flagForButtonPressShort[index] = 0; // Reset the flag
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	4a05      	ldr	r2, [pc, #20]	; (800264c <is_button_pressed_short+0x38>)
 8002636:	2100      	movs	r1, #0
 8002638:	54d1      	strb	r1, [r2, r3]
        return 1;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <is_button_pressed_short+0x2c>
    }
    return 0;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000244 	.word	0x20000244

08002650 <is_button_pressed_1s>:

// Function to check if button is pressed longer than 1s
unsigned char is_button_pressed_1s(uint8_t index) {
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <is_button_pressed_1s+0x14>
 8002660:	2300      	movs	r3, #0
 8002662:	e00b      	b.n	800267c <is_button_pressed_1s+0x2c>
    if (flagForButtonPress1s[index] == 1) {
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <is_button_pressed_1s+0x38>)
 8002668:	5cd3      	ldrb	r3, [r2, r3]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <is_button_pressed_1s+0x2a>
        flagForButtonPress1s[index] = 0; // Reset the flag
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4a05      	ldr	r2, [pc, #20]	; (8002688 <is_button_pressed_1s+0x38>)
 8002672:	2100      	movs	r1, #0
 8002674:	54d1      	strb	r1, [r2, r3]
        return 1;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <is_button_pressed_1s+0x2c>
    }
    return 0;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000240 	.word	0x20000240

0800268c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002690:	f000 fd46 	bl	8003120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002694:	f000 f822 	bl	80026dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002698:	f000 f906 	bl	80028a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800269c:	f000 f8da 	bl	8002854 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80026a0:	f000 f88c 	bl	80027bc <MX_TIM2_Init>
  MX_I2C1_Init();
 80026a4:	f000 f85c 	bl	8002760 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80026a8:	480a      	ldr	r0, [pc, #40]	; (80026d4 <main+0x48>)
 80026aa:	f003 ff31 	bl	8006510 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 80026ae:	f7ff fe27 	bl	8002300 <lcd_init>
  status = INIT;
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <main+0x4c>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
  setTimer3(100);
 80026b8:	2064      	movs	r0, #100	; 0x64
 80026ba:	f000 fbf1 	bl	8002ea0 <setTimer3>
  while (1)
  {
	  fsm_automatic_run();
 80026be:	f7fe fb67 	bl	8000d90 <fsm_automatic_run>
	  fsm_manual_run();
 80026c2:	f7fe ff83 	bl	80015cc <fsm_manual_run>
	  fsm_setting_run();
 80026c6:	f7ff fbaf 	bl	8001e28 <fsm_setting_run>
	  lcd_update();
 80026ca:	f7ff fe7f 	bl	80023cc <lcd_update>
	  buffer_update();
 80026ce:	f7fe fae9 	bl	8000ca4 <buffer_update>
	  fsm_automatic_run();
 80026d2:	e7f4      	b.n	80026be <main+0x32>
 80026d4:	20000318 	.word	0x20000318
 80026d8:	2000022c 	.word	0x2000022c

080026dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b090      	sub	sp, #64	; 0x40
 80026e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026e2:	f107 0318 	add.w	r3, r7, #24
 80026e6:	2228      	movs	r2, #40	; 0x28
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f004 fbba 	bl	8006e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026fe:	2302      	movs	r3, #2
 8002700:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002702:	2301      	movs	r3, #1
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002706:	2310      	movs	r3, #16
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800270a:	2302      	movs	r3, #2
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800270e:	2300      	movs	r3, #0
 8002710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002712:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002718:	f107 0318 	add.w	r3, r7, #24
 800271c:	4618      	mov	r0, r3
 800271e:	f003 fa99 	bl	8005c54 <HAL_RCC_OscConfig>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002728:	f000 f975 	bl	8002a16 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272c:	230f      	movs	r3, #15
 800272e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002730:	2302      	movs	r3, #2
 8002732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8002734:	23a0      	movs	r3, #160	; 0xa0
 8002736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800273c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	2102      	movs	r1, #2
 8002746:	4618      	mov	r0, r3
 8002748:	f003 fd04 	bl	8006154 <HAL_RCC_ClockConfig>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002752:	f000 f960 	bl	8002a16 <Error_Handler>
  }
}
 8002756:	bf00      	nop
 8002758:	3740      	adds	r7, #64	; 0x40
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002766:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <MX_I2C1_Init+0x54>)
 8002768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_I2C1_Init+0x50>)
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <MX_I2C1_Init+0x58>)
 800276e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_I2C1_Init+0x50>)
 800277e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002786:	2200      	movs	r2, #0
 8002788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_I2C1_Init+0x50>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800279c:	4804      	ldr	r0, [pc, #16]	; (80027b0 <MX_I2C1_Init+0x50>)
 800279e:	f001 f8af 	bl	8003900 <HAL_I2C_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027a8:	f000 f935 	bl	8002a16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	200002c4 	.word	0x200002c4
 80027b4:	40005400 	.word	0x40005400
 80027b8:	000186a0 	.word	0x000186a0

080027bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c2:	f107 0308 	add.w	r3, r7, #8
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d0:	463b      	mov	r3, r7
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <MX_TIM2_Init+0x94>)
 80027da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <MX_TIM2_Init+0x94>)
 80027e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80027e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <MX_TIM2_Init+0x94>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80027ee:	4b18      	ldr	r3, [pc, #96]	; (8002850 <MX_TIM2_Init+0x94>)
 80027f0:	2209      	movs	r2, #9
 80027f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <MX_TIM2_Init+0x94>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <MX_TIM2_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002800:	4813      	ldr	r0, [pc, #76]	; (8002850 <MX_TIM2_Init+0x94>)
 8002802:	f003 fe35 	bl	8006470 <HAL_TIM_Base_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800280c:	f000 f903 	bl	8002a16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002814:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	4619      	mov	r1, r3
 800281c:	480c      	ldr	r0, [pc, #48]	; (8002850 <MX_TIM2_Init+0x94>)
 800281e:	f003 ffb9 	bl	8006794 <HAL_TIM_ConfigClockSource>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002828:	f000 f8f5 	bl	8002a16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002834:	463b      	mov	r3, r7
 8002836:	4619      	mov	r1, r3
 8002838:	4805      	ldr	r0, [pc, #20]	; (8002850 <MX_TIM2_Init+0x94>)
 800283a:	f004 f99b 	bl	8006b74 <HAL_TIMEx_MasterConfigSynchronization>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002844:	f000 f8e7 	bl	8002a16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002848:	bf00      	nop
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000318 	.word	0x20000318

08002854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <MX_USART2_UART_Init+0x50>)
 800285c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 8002860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 800287a:	220c      	movs	r2, #12
 800287c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800288a:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_USART2_UART_Init+0x4c>)
 800288c:	f004 f9e2 	bl	8006c54 <HAL_UART_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002896:	f000 f8be 	bl	8002a16 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000360 	.word	0x20000360
 80028a4:	40004400 	.word	0x40004400

080028a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ae:	f107 0310 	add.w	r3, r7, #16
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028bc:	4b48      	ldr	r3, [pc, #288]	; (80029e0 <MX_GPIO_Init+0x138>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4a47      	ldr	r2, [pc, #284]	; (80029e0 <MX_GPIO_Init+0x138>)
 80028c2:	f043 0310 	orr.w	r3, r3, #16
 80028c6:	6193      	str	r3, [r2, #24]
 80028c8:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <MX_GPIO_Init+0x138>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <MX_GPIO_Init+0x138>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a41      	ldr	r2, [pc, #260]	; (80029e0 <MX_GPIO_Init+0x138>)
 80028da:	f043 0320 	orr.w	r3, r3, #32
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <MX_GPIO_Init+0x138>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <MX_GPIO_Init+0x138>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a3b      	ldr	r2, [pc, #236]	; (80029e0 <MX_GPIO_Init+0x138>)
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	6193      	str	r3, [r2, #24]
 80028f8:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <MX_GPIO_Init+0x138>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <MX_GPIO_Init+0x138>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a35      	ldr	r2, [pc, #212]	; (80029e0 <MX_GPIO_Init+0x138>)
 800290a:	f043 0308 	orr.w	r3, r3, #8
 800290e:	6193      	str	r3, [r2, #24]
 8002910:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <MX_GPIO_Init+0x138>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1B_Pin|LED1A_Pin, GPIO_PIN_RESET);
 800291c:	2200      	movs	r2, #0
 800291e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002922:	4830      	ldr	r0, [pc, #192]	; (80029e4 <MX_GPIO_Init+0x13c>)
 8002924:	f000 ffb1 	bl	800388a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	2180      	movs	r1, #128	; 0x80
 800292c:	482e      	ldr	r0, [pc, #184]	; (80029e8 <MX_GPIO_Init+0x140>)
 800292e:	f000 ffac 	bl	800388a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	2140      	movs	r1, #64	; 0x40
 8002936:	482d      	ldr	r0, [pc, #180]	; (80029ec <MX_GPIO_Init+0x144>)
 8002938:	f000 ffa7 	bl	800388a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800293c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002942:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <MX_GPIO_Init+0x148>)
 8002944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800294a:	f107 0310 	add.w	r3, r7, #16
 800294e:	4619      	mov	r1, r3
 8002950:	4825      	ldr	r0, [pc, #148]	; (80029e8 <MX_GPIO_Init+0x140>)
 8002952:	f000 fdff 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED1B_Pin LED1A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1B_Pin|LED1A_Pin;
 8002956:	f44f 7348 	mov.w	r3, #800	; 0x320
 800295a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295c:	2301      	movs	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2302      	movs	r3, #2
 8002966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	4619      	mov	r1, r3
 800296e:	481d      	ldr	r0, [pc, #116]	; (80029e4 <MX_GPIO_Init+0x13c>)
 8002970:	f000 fdf0 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON1_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin|BUTTON3_Pin;
 8002974:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 0310 	add.w	r3, r7, #16
 8002986:	4619      	mov	r1, r3
 8002988:	4818      	ldr	r0, [pc, #96]	; (80029ec <MX_GPIO_Init+0x144>)
 800298a:	f000 fde3 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2B_Pin */
  GPIO_InitStruct.Pin = LED2B_Pin;
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002992:	2301      	movs	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2302      	movs	r3, #2
 800299c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2B_GPIO_Port, &GPIO_InitStruct);
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4619      	mov	r1, r3
 80029a4:	4810      	ldr	r0, [pc, #64]	; (80029e8 <MX_GPIO_Init+0x140>)
 80029a6:	f000 fdd5 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2A_Pin */
  GPIO_InitStruct.Pin = LED2A_Pin;
 80029aa:	2340      	movs	r3, #64	; 0x40
 80029ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ae:	2301      	movs	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2302      	movs	r3, #2
 80029b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2A_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4619      	mov	r1, r3
 80029c0:	480a      	ldr	r0, [pc, #40]	; (80029ec <MX_GPIO_Init+0x144>)
 80029c2:	f000 fdc7 	bl	8003554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	2028      	movs	r0, #40	; 0x28
 80029cc:	f000 fd05 	bl	80033da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029d0:	2028      	movs	r0, #40	; 0x28
 80029d2:	f000 fd1e 	bl	8003412 <HAL_NVIC_EnableIRQ>

}
 80029d6:	bf00      	nop
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010800 	.word	0x40010800
 80029e8:	40011000 	.word	0x40011000
 80029ec:	40010c00 	.word	0x40010c00
 80029f0:	10110000 	.word	0x10110000

080029f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a04:	d103      	bne.n	8002a0e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8002a06:	f7ff fd11 	bl	800242c <button_reading>
		timerRun();
 8002a0a:	f000 fa81 	bl	8002f10 <timerRun>
	}
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a1a:	b672      	cpsid	i
}
 8002a1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a1e:	e7fe      	b.n	8002a1e <Error_Handler+0x8>

08002a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_MspInit+0x5c>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <HAL_MspInit+0x5c>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6193      	str	r3, [r2, #24]
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_MspInit+0x5c>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_MspInit+0x5c>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <HAL_MspInit+0x5c>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	61d3      	str	r3, [r2, #28]
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_MspInit+0x5c>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_MspInit+0x60>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_MspInit+0x60>)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40010000 	.word	0x40010000

08002a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <HAL_I2C_MspInit+0xb0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d142      	bne.n	8002b2a <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa4:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_I2C_MspInit+0xb4>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <HAL_I2C_MspInit+0xb4>)
 8002aaa:	f043 0308 	orr.w	r3, r3, #8
 8002aae:	6193      	str	r3, [r2, #24]
 8002ab0:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <HAL_I2C_MspInit+0xb4>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8002abc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac2:	2312      	movs	r3, #18
 8002ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	481a      	ldr	r0, [pc, #104]	; (8002b3c <HAL_I2C_MspInit+0xb8>)
 8002ad2:	f000 fd3f 	bl	8003554 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_I2C_MspInit+0xbc>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	f043 0302 	orr.w	r3, r3, #2
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <HAL_I2C_MspInit+0xbc>)
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_I2C_MspInit+0xb4>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <HAL_I2C_MspInit+0xb4>)
 8002af8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002afc:	61d3      	str	r3, [r2, #28]
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HAL_I2C_MspInit+0xb4>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	201f      	movs	r0, #31
 8002b10:	f000 fc63 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b14:	201f      	movs	r0, #31
 8002b16:	f000 fc7c 	bl	8003412 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2020      	movs	r0, #32
 8002b20:	f000 fc5b 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002b24:	2020      	movs	r0, #32
 8002b26:	f000 fc74 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b2a:	bf00      	nop
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40005400 	.word	0x40005400
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010c00 	.word	0x40010c00
 8002b40:	40010000 	.word	0x40010000

08002b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b54:	d113      	bne.n	8002b7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_TIM_Base_MspInit+0x44>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <HAL_TIM_Base_MspInit+0x44>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	61d3      	str	r3, [r2, #28]
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_TIM_Base_MspInit+0x44>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	201c      	movs	r0, #28
 8002b74:	f000 fc31 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b78:	201c      	movs	r0, #28
 8002b7a:	f000 fc4a 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <HAL_UART_MspInit+0x70>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d123      	bne.n	8002bf4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_UART_MspInit+0x74>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_UART_MspInit+0x74>)
 8002bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb6:	61d3      	str	r3, [r2, #28]
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_UART_MspInit+0x74>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_UART_MspInit+0x74>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <HAL_UART_MspInit+0x74>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	6193      	str	r3, [r2, #24]
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_UART_MspInit+0x74>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bdc:	230c      	movs	r3, #12
 8002bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4619      	mov	r1, r3
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <HAL_UART_MspInit+0x78>)
 8002bf0:	f000 fcb0 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40004400 	.word	0x40004400
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010800 	.word	0x40010800

08002c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <NMI_Handler+0x4>

08002c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c12:	e7fe      	b.n	8002c12 <HardFault_Handler+0x4>

08002c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <MemManage_Handler+0x4>

08002c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <BusFault_Handler+0x4>

08002c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <UsageFault_Handler+0x4>

08002c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4e:	f000 faad 	bl	80031ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <TIM2_IRQHandler+0x10>)
 8002c5e:	f003 fca9 	bl	80065b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000318 	.word	0x20000318

08002c6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <I2C1_EV_IRQHandler+0x10>)
 8002c72:	f001 f89b 	bl	8003dac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200002c4 	.word	0x200002c4

08002c80 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <I2C1_ER_IRQHandler+0x10>)
 8002c86:	f001 fa02 	bl	800408e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200002c4 	.word	0x200002c4

08002c94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c9c:	f000 fe0e 	bl	80038bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
	return 1;
 8002ca8:	2301      	movs	r3, #1
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <_kill>:

int _kill(int pid, int sig)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cbc:	f004 f8a8 	bl	8006e10 <__errno>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2216      	movs	r2, #22
 8002cc4:	601a      	str	r2, [r3, #0]
	return -1;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_exit>:

void _exit (int status)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cda:	f04f 31ff 	mov.w	r1, #4294967295
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ffe7 	bl	8002cb2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ce4:	e7fe      	b.n	8002ce4 <_exit+0x12>

08002ce6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e00a      	b.n	8002d0e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cf8:	f3af 8000 	nop.w
 8002cfc:	4601      	mov	r1, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	60ba      	str	r2, [r7, #8]
 8002d04:	b2ca      	uxtb	r2, r1
 8002d06:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	dbf0      	blt.n	8002cf8 <_read+0x12>
	}

return len;
 8002d16:	687b      	ldr	r3, [r7, #4]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e009      	b.n	8002d46 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	60ba      	str	r2, [r7, #8]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3301      	adds	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	dbf1      	blt.n	8002d32 <_write+0x12>
	}
	return len;
 8002d4e:	687b      	ldr	r3, [r7, #4]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_close>:

int _close(int file)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	return -1;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d7e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <_isatty>:

int _isatty(int file)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	return 1;
 8002d94:	2301      	movs	r3, #1
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
	return 0;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <_sbrk+0x5c>)
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <_sbrk+0x60>)
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <_sbrk+0x64>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <_sbrk+0x68>)
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d207      	bcs.n	8002df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de8:	f004 f812 	bl	8006e10 <__errno>
 8002dec:	4603      	mov	r3, r0
 8002dee:	220c      	movs	r2, #12
 8002df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	e009      	b.n	8002e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <_sbrk+0x64>)
 8002e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20005000 	.word	0x20005000
 8002e18:	00000400 	.word	0x00000400
 8002e1c:	20000258 	.word	0x20000258
 8002e20:	200003c0 	.word	0x200003c0

08002e24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer1(int duration){
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <setTimer1+0x2c>)
 8002e3c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e40:	1092      	asrs	r2, r2, #2
 8002e42:	17db      	asrs	r3, r3, #31
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <setTimer1+0x30>)
 8002e48:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <setTimer1+0x34>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	66666667 	.word	0x66666667
 8002e60:	2000025c 	.word	0x2000025c
 8002e64:	20000260 	.word	0x20000260

08002e68 <setTimer2>:

void setTimer2(int duration){
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <setTimer2+0x2c>)
 8002e74:	fb82 1203 	smull	r1, r2, r2, r3
 8002e78:	1092      	asrs	r2, r2, #2
 8002e7a:	17db      	asrs	r3, r3, #31
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <setTimer2+0x30>)
 8002e80:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <setTimer2+0x34>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	66666667 	.word	0x66666667
 8002e98:	20000264 	.word	0x20000264
 8002e9c:	20000268 	.word	0x20000268

08002ea0 <setTimer3>:

void setTimer3(int duration){
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <setTimer3+0x2c>)
 8002eac:	fb82 1203 	smull	r1, r2, r2, r3
 8002eb0:	1092      	asrs	r2, r2, #2
 8002eb2:	17db      	asrs	r3, r3, #31
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <setTimer3+0x30>)
 8002eb8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <setTimer3+0x34>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	66666667 	.word	0x66666667
 8002ed0:	2000026c 	.word	0x2000026c
 8002ed4:	20000270 	.word	0x20000270

08002ed8 <setTimer4>:

void setTimer4(int duration){
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a08      	ldr	r2, [pc, #32]	; (8002f04 <setTimer4+0x2c>)
 8002ee4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ee8:	1092      	asrs	r2, r2, #2
 8002eea:	17db      	asrs	r3, r3, #31
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <setTimer4+0x30>)
 8002ef0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <setTimer4+0x34>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	66666667 	.word	0x66666667
 8002f08:	20000274 	.word	0x20000274
 8002f0c:	20000278 	.word	0x20000278

08002f10 <timerRun>:

void timerRun(){
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <timerRun+0x8c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	dd0b      	ble.n	8002f34 <timerRun+0x24>
		timer1_counter--;
 8002f1c:	4b1f      	ldr	r3, [pc, #124]	; (8002f9c <timerRun+0x8c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <timerRun+0x8c>)
 8002f24:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8002f26:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <timerRun+0x8c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	dc02      	bgt.n	8002f34 <timerRun+0x24>
			timer1_flag = 1;
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <timerRun+0x90>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <timerRun+0x94>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	dd0b      	ble.n	8002f54 <timerRun+0x44>
		timer2_counter--;
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <timerRun+0x94>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <timerRun+0x94>)
 8002f44:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <timerRun+0x94>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	dc02      	bgt.n	8002f54 <timerRun+0x44>
			timer2_flag = 1;
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <timerRun+0x98>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <timerRun+0x9c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	dd0b      	ble.n	8002f74 <timerRun+0x64>
		timer3_counter--;
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <timerRun+0x9c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <timerRun+0x9c>)
 8002f64:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <timerRun+0x9c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dc02      	bgt.n	8002f74 <timerRun+0x64>
			timer3_flag = 1;
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <timerRun+0xa0>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <timerRun+0xa4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dd0b      	ble.n	8002f94 <timerRun+0x84>
		timer4_counter--;
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <timerRun+0xa4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <timerRun+0xa4>)
 8002f84:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <timerRun+0xa4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dc02      	bgt.n	8002f94 <timerRun+0x84>
			timer4_flag = 1;
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <timerRun+0xa8>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	2000025c 	.word	0x2000025c
 8002fa0:	20000260 	.word	0x20000260
 8002fa4:	20000264 	.word	0x20000264
 8002fa8:	20000268 	.word	0x20000268
 8002fac:	2000026c 	.word	0x2000026c
 8002fb0:	20000270 	.word	0x20000270
 8002fb4:	20000274 	.word	0x20000274
 8002fb8:	20000278 	.word	0x20000278

08002fbc <setTrafficRed1>:
 *      Author: phuct
 */

#include "traffic.h"

void setTrafficRed1(){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, GPIO_PIN_SET);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fc6:	4805      	ldr	r0, [pc, #20]	; (8002fdc <setTrafficRed1+0x20>)
 8002fc8:	f000 fc5f 	bl	800388a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, GPIO_PIN_SET);
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd2:	4802      	ldr	r0, [pc, #8]	; (8002fdc <setTrafficRed1+0x20>)
 8002fd4:	f000 fc59 	bl	800388a <HAL_GPIO_WritePin>
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40010800 	.word	0x40010800

08002fe0 <setTrafficAmber1>:

void setTrafficAmber1(){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, GPIO_PIN_SET);
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <setTrafficAmber1+0x20>)
 8002fec:	f000 fc4d 	bl	800388a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, GPIO_PIN_RESET);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ff6:	4802      	ldr	r0, [pc, #8]	; (8003000 <setTrafficAmber1+0x20>)
 8002ff8:	f000 fc47 	bl	800388a <HAL_GPIO_WritePin>
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40010800 	.word	0x40010800

08003004 <setTrafficGreen1>:

void setTrafficGreen1(){
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, GPIO_PIN_RESET);
 8003008:	2200      	movs	r2, #0
 800300a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800300e:	4805      	ldr	r0, [pc, #20]	; (8003024 <setTrafficGreen1+0x20>)
 8003010:	f000 fc3b 	bl	800388a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, GPIO_PIN_SET);
 8003014:	2201      	movs	r2, #1
 8003016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800301a:	4802      	ldr	r0, [pc, #8]	; (8003024 <setTrafficGreen1+0x20>)
 800301c:	f000 fc35 	bl	800388a <HAL_GPIO_WritePin>
}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40010800 	.word	0x40010800

08003028 <setTrafficRed2>:

void setTrafficRed2(){
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, GPIO_PIN_SET);
 800302c:	2201      	movs	r2, #1
 800302e:	2140      	movs	r1, #64	; 0x40
 8003030:	4804      	ldr	r0, [pc, #16]	; (8003044 <setTrafficRed2+0x1c>)
 8003032:	f000 fc2a 	bl	800388a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, GPIO_PIN_SET);
 8003036:	2201      	movs	r2, #1
 8003038:	2180      	movs	r1, #128	; 0x80
 800303a:	4803      	ldr	r0, [pc, #12]	; (8003048 <setTrafficRed2+0x20>)
 800303c:	f000 fc25 	bl	800388a <HAL_GPIO_WritePin>
}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40010c00 	.word	0x40010c00
 8003048:	40011000 	.word	0x40011000

0800304c <setTrafficAmber2>:

void setTrafficAmber2(){
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, GPIO_PIN_SET);
 8003050:	2201      	movs	r2, #1
 8003052:	2140      	movs	r1, #64	; 0x40
 8003054:	4804      	ldr	r0, [pc, #16]	; (8003068 <setTrafficAmber2+0x1c>)
 8003056:	f000 fc18 	bl	800388a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, GPIO_PIN_RESET);
 800305a:	2200      	movs	r2, #0
 800305c:	2180      	movs	r1, #128	; 0x80
 800305e:	4803      	ldr	r0, [pc, #12]	; (800306c <setTrafficAmber2+0x20>)
 8003060:	f000 fc13 	bl	800388a <HAL_GPIO_WritePin>
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40010c00 	.word	0x40010c00
 800306c:	40011000 	.word	0x40011000

08003070 <setTrafficGreen2>:

void setTrafficGreen2(){
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, GPIO_PIN_RESET);
 8003074:	2200      	movs	r2, #0
 8003076:	2140      	movs	r1, #64	; 0x40
 8003078:	4804      	ldr	r0, [pc, #16]	; (800308c <setTrafficGreen2+0x1c>)
 800307a:	f000 fc06 	bl	800388a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, GPIO_PIN_SET);
 800307e:	2201      	movs	r2, #1
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	4803      	ldr	r0, [pc, #12]	; (8003090 <setTrafficGreen2+0x20>)
 8003084:	f000 fc01 	bl	800388a <HAL_GPIO_WritePin>
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40010c00 	.word	0x40010c00
 8003090:	40011000 	.word	0x40011000

08003094 <setTrafficOff>:

void setTrafficOff(){
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, GPIO_PIN_RESET);
 8003098:	2200      	movs	r2, #0
 800309a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800309e:	480a      	ldr	r0, [pc, #40]	; (80030c8 <setTrafficOff+0x34>)
 80030a0:	f000 fbf3 	bl	800388a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, GPIO_PIN_RESET);
 80030a4:	2200      	movs	r2, #0
 80030a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030aa:	4807      	ldr	r0, [pc, #28]	; (80030c8 <setTrafficOff+0x34>)
 80030ac:	f000 fbed 	bl	800388a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, GPIO_PIN_RESET);
 80030b0:	2200      	movs	r2, #0
 80030b2:	2140      	movs	r1, #64	; 0x40
 80030b4:	4805      	ldr	r0, [pc, #20]	; (80030cc <setTrafficOff+0x38>)
 80030b6:	f000 fbe8 	bl	800388a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, GPIO_PIN_RESET);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	4804      	ldr	r0, [pc, #16]	; (80030d0 <setTrafficOff+0x3c>)
 80030c0:	f000 fbe3 	bl	800388a <HAL_GPIO_WritePin>
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40010800 	.word	0x40010800
 80030cc:	40010c00 	.word	0x40010c00
 80030d0:	40011000 	.word	0x40011000

080030d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030d4:	f7ff fea6 	bl	8002e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030d8:	480b      	ldr	r0, [pc, #44]	; (8003108 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80030da:	490c      	ldr	r1, [pc, #48]	; (800310c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80030dc:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <LoopFillZerobss+0x16>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e0:	e002      	b.n	80030e8 <LoopCopyDataInit>

080030e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e6:	3304      	adds	r3, #4

080030e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ec:	d3f9      	bcc.n	80030e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80030f0:	4c09      	ldr	r4, [pc, #36]	; (8003118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f4:	e001      	b.n	80030fa <LoopFillZerobss>

080030f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f8:	3204      	adds	r2, #4

080030fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030fc:	d3fb      	bcc.n	80030f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030fe:	f003 fe8d 	bl	8006e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003102:	f7ff fac3 	bl	800268c <main>
  bx lr
 8003106:	4770      	bx	lr
  ldr r0, =_sdata
 8003108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800310c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8003110:	0800a114 	.word	0x0800a114
  ldr r2, =_sbss
 8003114:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8003118:	200003bc 	.word	0x200003bc

0800311c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800311c:	e7fe      	b.n	800311c <ADC1_2_IRQHandler>
	...

08003120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_Init+0x28>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_Init+0x28>)
 800312a:	f043 0310 	orr.w	r3, r3, #16
 800312e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003130:	2003      	movs	r0, #3
 8003132:	f000 f947 	bl	80033c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003136:	2000      	movs	r0, #0
 8003138:	f000 f808 	bl	800314c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800313c:	f7ff fc70 	bl	8002a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40022000 	.word	0x40022000

0800314c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_InitTick+0x54>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_InitTick+0x58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003162:	fbb3 f3f1 	udiv	r3, r3, r1
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f95f 	bl	800342e <HAL_SYSTICK_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00e      	b.n	8003198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d80a      	bhi.n	8003196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003180:	2200      	movs	r2, #0
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f000 f927 	bl	80033da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <HAL_InitTick+0x5c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000030 	.word	0x20000030
 80031a4:	20000038 	.word	0x20000038
 80031a8:	20000034 	.word	0x20000034

080031ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_IncTick+0x1c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_IncTick+0x20>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	4a03      	ldr	r2, [pc, #12]	; (80031cc <HAL_IncTick+0x20>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	20000038 	.word	0x20000038
 80031cc:	200003a8 	.word	0x200003a8

080031d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return uwTick;
 80031d4:	4b02      	ldr	r3, [pc, #8]	; (80031e0 <HAL_GetTick+0x10>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	200003a8 	.word	0x200003a8

080031e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7ff fff0 	bl	80031d0 <HAL_GetTick>
 80031f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d005      	beq.n	800320a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_Delay+0x44>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800320a:	bf00      	nop
 800320c:	f7ff ffe0 	bl	80031d0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	429a      	cmp	r2, r3
 800321a:	d8f7      	bhi.n	800320c <HAL_Delay+0x28>
  {
  }
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000038 	.word	0x20000038

0800322c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003248:	4013      	ands	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325e:	4a04      	ldr	r2, [pc, #16]	; (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	60d3      	str	r3, [r2, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <__NVIC_GetPriorityGrouping+0x18>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	f003 0307 	and.w	r3, r3, #7
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	db0b      	blt.n	80032ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	4906      	ldr	r1, [pc, #24]	; (80032c4 <__NVIC_EnableIRQ+0x34>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2001      	movs	r0, #1
 80032b2:	fa00 f202 	lsl.w	r2, r0, r2
 80032b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	db0a      	blt.n	80032f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	490c      	ldr	r1, [pc, #48]	; (8003314 <__NVIC_SetPriority+0x4c>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	440b      	add	r3, r1
 80032ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f0:	e00a      	b.n	8003308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4908      	ldr	r1, [pc, #32]	; (8003318 <__NVIC_SetPriority+0x50>)
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3b04      	subs	r3, #4
 8003300:	0112      	lsls	r2, r2, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	440b      	add	r3, r1
 8003306:	761a      	strb	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000e100 	.word	0xe000e100
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f1c3 0307 	rsb	r3, r3, #7
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf28      	it	cs
 800333a:	2304      	movcs	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3304      	adds	r3, #4
 8003342:	2b06      	cmp	r3, #6
 8003344:	d902      	bls.n	800334c <NVIC_EncodePriority+0x30>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3b03      	subs	r3, #3
 800334a:	e000      	b.n	800334e <NVIC_EncodePriority+0x32>
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43d9      	mvns	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	4313      	orrs	r3, r2
         );
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003390:	d301      	bcc.n	8003396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003392:	2301      	movs	r3, #1
 8003394:	e00f      	b.n	80033b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <SysTick_Config+0x40>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800339e:	210f      	movs	r1, #15
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	f7ff ff90 	bl	80032c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <SysTick_Config+0x40>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ae:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <SysTick_Config+0x40>)
 80033b0:	2207      	movs	r2, #7
 80033b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	e000e010 	.word	0xe000e010

080033c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff2d 	bl	800322c <__NVIC_SetPriorityGrouping>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ec:	f7ff ff42 	bl	8003274 <__NVIC_GetPriorityGrouping>
 80033f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f7ff ff90 	bl	800331c <NVIC_EncodePriority>
 80033fc:	4602      	mov	r2, r0
 80033fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff5f 	bl	80032c8 <__NVIC_SetPriority>
}
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	4603      	mov	r3, r0
 800341a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff35 	bl	8003290 <__NVIC_EnableIRQ>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ffa2 	bl	8003380 <SysTick_Config>
 800343c:	4603      	mov	r3, r0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d005      	beq.n	800346c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2204      	movs	r2, #4
 8003464:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	e051      	b.n	8003510 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 020e 	bic.w	r2, r2, #14
 800347a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a22      	ldr	r2, [pc, #136]	; (800351c <HAL_DMA_Abort_IT+0xd4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d029      	beq.n	80034ea <HAL_DMA_Abort_IT+0xa2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <HAL_DMA_Abort_IT+0xd8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d022      	beq.n	80034e6 <HAL_DMA_Abort_IT+0x9e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <HAL_DMA_Abort_IT+0xdc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01a      	beq.n	80034e0 <HAL_DMA_Abort_IT+0x98>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <HAL_DMA_Abort_IT+0xe0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d012      	beq.n	80034da <HAL_DMA_Abort_IT+0x92>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_DMA_Abort_IT+0xe4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00a      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x8c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_DMA_Abort_IT+0xe8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d102      	bne.n	80034ce <HAL_DMA_Abort_IT+0x86>
 80034c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034cc:	e00e      	b.n	80034ec <HAL_DMA_Abort_IT+0xa4>
 80034ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034d2:	e00b      	b.n	80034ec <HAL_DMA_Abort_IT+0xa4>
 80034d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034d8:	e008      	b.n	80034ec <HAL_DMA_Abort_IT+0xa4>
 80034da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034de:	e005      	b.n	80034ec <HAL_DMA_Abort_IT+0xa4>
 80034e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e4:	e002      	b.n	80034ec <HAL_DMA_Abort_IT+0xa4>
 80034e6:	2310      	movs	r3, #16
 80034e8:	e000      	b.n	80034ec <HAL_DMA_Abort_IT+0xa4>
 80034ea:	2301      	movs	r3, #1
 80034ec:	4a11      	ldr	r2, [pc, #68]	; (8003534 <HAL_DMA_Abort_IT+0xec>)
 80034ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
    } 
  }
  return status;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40020008 	.word	0x40020008
 8003520:	4002001c 	.word	0x4002001c
 8003524:	40020030 	.word	0x40020030
 8003528:	40020044 	.word	0x40020044
 800352c:	40020058 	.word	0x40020058
 8003530:	4002006c 	.word	0x4002006c
 8003534:	40020000 	.word	0x40020000

08003538 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003546:	b2db      	uxtb	r3, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
	...

08003554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003554:	b480      	push	{r7}
 8003556:	b08b      	sub	sp, #44	; 0x2c
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003562:	2300      	movs	r3, #0
 8003564:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003566:	e169      	b.n	800383c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003568:	2201      	movs	r2, #1
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	429a      	cmp	r2, r3
 8003582:	f040 8158 	bne.w	8003836 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4a9a      	ldr	r2, [pc, #616]	; (80037f4 <HAL_GPIO_Init+0x2a0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d05e      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 8003590:	4a98      	ldr	r2, [pc, #608]	; (80037f4 <HAL_GPIO_Init+0x2a0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d875      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 8003596:	4a98      	ldr	r2, [pc, #608]	; (80037f8 <HAL_GPIO_Init+0x2a4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d058      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 800359c:	4a96      	ldr	r2, [pc, #600]	; (80037f8 <HAL_GPIO_Init+0x2a4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d86f      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035a2:	4a96      	ldr	r2, [pc, #600]	; (80037fc <HAL_GPIO_Init+0x2a8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d052      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 80035a8:	4a94      	ldr	r2, [pc, #592]	; (80037fc <HAL_GPIO_Init+0x2a8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d869      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035ae:	4a94      	ldr	r2, [pc, #592]	; (8003800 <HAL_GPIO_Init+0x2ac>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d04c      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 80035b4:	4a92      	ldr	r2, [pc, #584]	; (8003800 <HAL_GPIO_Init+0x2ac>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d863      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035ba:	4a92      	ldr	r2, [pc, #584]	; (8003804 <HAL_GPIO_Init+0x2b0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d046      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 80035c0:	4a90      	ldr	r2, [pc, #576]	; (8003804 <HAL_GPIO_Init+0x2b0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d85d      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035c6:	2b12      	cmp	r3, #18
 80035c8:	d82a      	bhi.n	8003620 <HAL_GPIO_Init+0xcc>
 80035ca:	2b12      	cmp	r3, #18
 80035cc:	d859      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <HAL_GPIO_Init+0x80>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	0800364f 	.word	0x0800364f
 80035d8:	08003629 	.word	0x08003629
 80035dc:	0800363b 	.word	0x0800363b
 80035e0:	0800367d 	.word	0x0800367d
 80035e4:	08003683 	.word	0x08003683
 80035e8:	08003683 	.word	0x08003683
 80035ec:	08003683 	.word	0x08003683
 80035f0:	08003683 	.word	0x08003683
 80035f4:	08003683 	.word	0x08003683
 80035f8:	08003683 	.word	0x08003683
 80035fc:	08003683 	.word	0x08003683
 8003600:	08003683 	.word	0x08003683
 8003604:	08003683 	.word	0x08003683
 8003608:	08003683 	.word	0x08003683
 800360c:	08003683 	.word	0x08003683
 8003610:	08003683 	.word	0x08003683
 8003614:	08003683 	.word	0x08003683
 8003618:	08003631 	.word	0x08003631
 800361c:	08003645 	.word	0x08003645
 8003620:	4a79      	ldr	r2, [pc, #484]	; (8003808 <HAL_GPIO_Init+0x2b4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003626:	e02c      	b.n	8003682 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	623b      	str	r3, [r7, #32]
          break;
 800362e:	e029      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	3304      	adds	r3, #4
 8003636:	623b      	str	r3, [r7, #32]
          break;
 8003638:	e024      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	3308      	adds	r3, #8
 8003640:	623b      	str	r3, [r7, #32]
          break;
 8003642:	e01f      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	330c      	adds	r3, #12
 800364a:	623b      	str	r3, [r7, #32]
          break;
 800364c:	e01a      	b.n	8003684 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003656:	2304      	movs	r3, #4
 8003658:	623b      	str	r3, [r7, #32]
          break;
 800365a:	e013      	b.n	8003684 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003664:	2308      	movs	r3, #8
 8003666:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	611a      	str	r2, [r3, #16]
          break;
 800366e:	e009      	b.n	8003684 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003670:	2308      	movs	r3, #8
 8003672:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	615a      	str	r2, [r3, #20]
          break;
 800367a:	e003      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800367c:	2300      	movs	r3, #0
 800367e:	623b      	str	r3, [r7, #32]
          break;
 8003680:	e000      	b.n	8003684 <HAL_GPIO_Init+0x130>
          break;
 8003682:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2bff      	cmp	r3, #255	; 0xff
 8003688:	d801      	bhi.n	800368e <HAL_GPIO_Init+0x13a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	e001      	b.n	8003692 <HAL_GPIO_Init+0x13e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2bff      	cmp	r3, #255	; 0xff
 8003698:	d802      	bhi.n	80036a0 <HAL_GPIO_Init+0x14c>
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	e002      	b.n	80036a6 <HAL_GPIO_Init+0x152>
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	3b08      	subs	r3, #8
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	210f      	movs	r1, #15
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	401a      	ands	r2, r3
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	431a      	orrs	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80b1 	beq.w	8003836 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036d4:	4b4d      	ldr	r3, [pc, #308]	; (800380c <HAL_GPIO_Init+0x2b8>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	4a4c      	ldr	r2, [pc, #304]	; (800380c <HAL_GPIO_Init+0x2b8>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6193      	str	r3, [r2, #24]
 80036e0:	4b4a      	ldr	r3, [pc, #296]	; (800380c <HAL_GPIO_Init+0x2b8>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036ec:	4a48      	ldr	r2, [pc, #288]	; (8003810 <HAL_GPIO_Init+0x2bc>)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a40      	ldr	r2, [pc, #256]	; (8003814 <HAL_GPIO_Init+0x2c0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_GPIO_Init+0x1ec>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3f      	ldr	r2, [pc, #252]	; (8003818 <HAL_GPIO_Init+0x2c4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00d      	beq.n	800373c <HAL_GPIO_Init+0x1e8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3e      	ldr	r2, [pc, #248]	; (800381c <HAL_GPIO_Init+0x2c8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <HAL_GPIO_Init+0x1e4>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3d      	ldr	r2, [pc, #244]	; (8003820 <HAL_GPIO_Init+0x2cc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_GPIO_Init+0x1e0>
 8003730:	2303      	movs	r3, #3
 8003732:	e006      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 8003734:	2304      	movs	r3, #4
 8003736:	e004      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 8003738:	2302      	movs	r3, #2
 800373a:	e002      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 8003740:	2300      	movs	r3, #0
 8003742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003744:	f002 0203 	and.w	r2, r2, #3
 8003748:	0092      	lsls	r2, r2, #2
 800374a:	4093      	lsls	r3, r2
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003752:	492f      	ldr	r1, [pc, #188]	; (8003810 <HAL_GPIO_Init+0x2bc>)
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800376c:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	492c      	ldr	r1, [pc, #176]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	608b      	str	r3, [r1, #8]
 8003778:	e006      	b.n	8003788 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800377a:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	43db      	mvns	r3, r3
 8003782:	4928      	ldr	r1, [pc, #160]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 8003784:	4013      	ands	r3, r2
 8003786:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d006      	beq.n	80037a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	4922      	ldr	r1, [pc, #136]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4313      	orrs	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	491e      	ldr	r1, [pc, #120]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d006      	beq.n	80037ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	4918      	ldr	r1, [pc, #96]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	4914      	ldr	r1, [pc, #80]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d021      	beq.n	8003828 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	490e      	ldr	r1, [pc, #56]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
 80037f0:	e021      	b.n	8003836 <HAL_GPIO_Init+0x2e2>
 80037f2:	bf00      	nop
 80037f4:	10320000 	.word	0x10320000
 80037f8:	10310000 	.word	0x10310000
 80037fc:	10220000 	.word	0x10220000
 8003800:	10210000 	.word	0x10210000
 8003804:	10120000 	.word	0x10120000
 8003808:	10110000 	.word	0x10110000
 800380c:	40021000 	.word	0x40021000
 8003810:	40010000 	.word	0x40010000
 8003814:	40010800 	.word	0x40010800
 8003818:	40010c00 	.word	0x40010c00
 800381c:	40011000 	.word	0x40011000
 8003820:	40011400 	.word	0x40011400
 8003824:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_GPIO_Init+0x304>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	43db      	mvns	r3, r3
 8003830:	4909      	ldr	r1, [pc, #36]	; (8003858 <HAL_GPIO_Init+0x304>)
 8003832:	4013      	ands	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	3301      	adds	r3, #1
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	f47f ae8e 	bne.w	8003568 <HAL_GPIO_Init+0x14>
  }
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	372c      	adds	r7, #44	; 0x2c
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	40010400 	.word	0x40010400

0800385c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e001      	b.n	800387e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	807b      	strh	r3, [r7, #2]
 8003896:	4613      	mov	r3, r2
 8003898:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800389a:	787b      	ldrb	r3, [r7, #1]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038a0:	887a      	ldrh	r2, [r7, #2]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038a6:	e003      	b.n	80038b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	041a      	lsls	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	611a      	str	r2, [r3, #16]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038d2:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f806 	bl	80038ec <HAL_GPIO_EXTI_Callback>
  }
}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40010400 	.word	0x40010400

080038ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e12b      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff f8ac 	bl	8002a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003964:	f002 fd3e 	bl	80063e4 <HAL_RCC_GetPCLK1Freq>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a81      	ldr	r2, [pc, #516]	; (8003b74 <HAL_I2C_Init+0x274>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d807      	bhi.n	8003984 <HAL_I2C_Init+0x84>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a80      	ldr	r2, [pc, #512]	; (8003b78 <HAL_I2C_Init+0x278>)
 8003978:	4293      	cmp	r3, r2
 800397a:	bf94      	ite	ls
 800397c:	2301      	movls	r3, #1
 800397e:	2300      	movhi	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e006      	b.n	8003992 <HAL_I2C_Init+0x92>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a7d      	ldr	r2, [pc, #500]	; (8003b7c <HAL_I2C_Init+0x27c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	bf94      	ite	ls
 800398c:	2301      	movls	r3, #1
 800398e:	2300      	movhi	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0e7      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a78      	ldr	r2, [pc, #480]	; (8003b80 <HAL_I2C_Init+0x280>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a6a      	ldr	r2, [pc, #424]	; (8003b74 <HAL_I2C_Init+0x274>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d802      	bhi.n	80039d4 <HAL_I2C_Init+0xd4>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	e009      	b.n	80039e8 <HAL_I2C_Init+0xe8>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	4a69      	ldr	r2, [pc, #420]	; (8003b84 <HAL_I2C_Init+0x284>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	3301      	adds	r3, #1
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	495c      	ldr	r1, [pc, #368]	; (8003b74 <HAL_I2C_Init+0x274>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d819      	bhi.n	8003a3c <HAL_I2C_Init+0x13c>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e59      	subs	r1, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a16:	1c59      	adds	r1, r3, #1
 8003a18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_I2C_Init+0x138>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e59      	subs	r1, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	e051      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	e04f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d111      	bne.n	8003a68 <HAL_I2C_Init+0x168>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e58      	subs	r0, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	440b      	add	r3, r1
 8003a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a56:	3301      	adds	r3, #1
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e012      	b.n	8003a8e <HAL_I2C_Init+0x18e>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Init+0x196>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e022      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10e      	bne.n	8003abc <HAL_I2C_Init+0x1bc>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1e58      	subs	r0, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	440b      	add	r3, r1
 8003aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aba:	e00f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	0099      	lsls	r1, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	6809      	ldr	r1, [r1, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6911      	ldr	r1, [r2, #16]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	000186a0 	.word	0x000186a0
 8003b78:	001e847f 	.word	0x001e847f
 8003b7c:	003d08ff 	.word	0x003d08ff
 8003b80:	431bde83 	.word	0x431bde83
 8003b84:	10624dd3 	.word	0x10624dd3

08003b88 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	2b80      	cmp	r3, #128	; 0x80
 8003b9c:	d103      	bne.n	8003ba6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	817b      	strh	r3, [r7, #10]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bc4:	f7ff fb04 	bl	80031d0 <HAL_GetTick>
 8003bc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	f040 80e0 	bne.w	8003d98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2319      	movs	r3, #25
 8003bde:	2201      	movs	r2, #1
 8003be0:	4970      	ldr	r1, [pc, #448]	; (8003da4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f001 fe12 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e0d3      	b.n	8003d9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_I2C_Master_Transmit+0x50>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0cc      	b.n	8003d9a <HAL_I2C_Master_Transmit+0x1ea>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d007      	beq.n	8003c26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2221      	movs	r2, #33	; 0x21
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2210      	movs	r2, #16
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	893a      	ldrh	r2, [r7, #8]
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a50      	ldr	r2, [pc, #320]	; (8003da8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c68:	8979      	ldrh	r1, [r7, #10]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f001 fca2 	bl	80055b8 <I2C_MasterRequestWrite>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e08d      	b.n	8003d9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c94:	e066      	b.n	8003d64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	6a39      	ldr	r1, [r7, #32]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f001 fed0 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d107      	bne.n	8003cbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06b      	b.n	8003d9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d11b      	bne.n	8003d38 <HAL_I2C_Master_Transmit+0x188>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	6a39      	ldr	r1, [r7, #32]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f001 fec7 	bl	8005ad0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d107      	bne.n	8003d60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e01a      	b.n	8003d9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d194      	bne.n	8003c96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	00100002 	.word	0x00100002
 8003da8:	ffff0000 	.word	0xffff0000

08003dac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d003      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x38>
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	f040 80c1 	bne.w	8003f66 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <HAL_I2C_EV_IRQHandler+0x6e>
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e04:	d003      	beq.n	8003e0e <HAL_I2C_EV_IRQHandler+0x62>
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2C_EV_IRQHandler+0x66>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <HAL_I2C_EV_IRQHandler+0x68>
 8003e12:	2300      	movs	r3, #0
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	f000 8132 	beq.w	800407e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00c      	beq.n	8003e3e <HAL_I2C_EV_IRQHandler+0x92>
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	0a5b      	lsrs	r3, r3, #9
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d006      	beq.n	8003e3e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f001 fef5 	bl	8005c20 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fd99 	bl	800496e <I2C_Master_SB>
 8003e3c:	e092      	b.n	8003f64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	08db      	lsrs	r3, r3, #3
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_I2C_EV_IRQHandler+0xb2>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	0a5b      	lsrs	r3, r3, #9
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fe0e 	bl	8004a78 <I2C_Master_ADD10>
 8003e5c:	e082      	b.n	8003f64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_I2C_EV_IRQHandler+0xd2>
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	0a5b      	lsrs	r3, r3, #9
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fe27 	bl	8004aca <I2C_Master_ADDR>
 8003e7c:	e072      	b.n	8003f64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d03b      	beq.n	8003f02 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e98:	f000 80f3 	beq.w	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	09db      	lsrs	r3, r3, #7
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00f      	beq.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	0a9b      	lsrs	r3, r3, #10
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d103      	bne.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f9f1 	bl	80042a8 <I2C_MasterTransmit_TXE>
 8003ec6:	e04d      	b.n	8003f64 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80d6 	beq.w	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	0a5b      	lsrs	r3, r3, #9
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80cf 	beq.w	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	2b21      	cmp	r3, #33	; 0x21
 8003ee8:	d103      	bne.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fa78 	bl	80043e0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ef0:	e0c7      	b.n	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	f040 80c4 	bne.w	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fae6 	bl	80044cc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f00:	e0bf      	b.n	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f10:	f000 80b7 	beq.w	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00f      	beq.n	8003f40 <HAL_I2C_EV_IRQHandler+0x194>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	0a9b      	lsrs	r3, r3, #10
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d009      	beq.n	8003f40 <HAL_I2C_EV_IRQHandler+0x194>
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fb5f 	bl	80045fc <I2C_MasterReceive_RXNE>
 8003f3e:	e011      	b.n	8003f64 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 809a 	beq.w	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	0a5b      	lsrs	r3, r3, #9
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8093 	beq.w	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fc15 	bl	800478c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f62:	e08e      	b.n	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f64:	e08d      	b.n	8004082 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e007      	b.n	8003f88 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d012      	beq.n	8003fba <HAL_I2C_EV_IRQHandler+0x20e>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	0a5b      	lsrs	r3, r3, #9
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00c      	beq.n	8003fba <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003fb0:	69b9      	ldr	r1, [r7, #24]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 ffe0 	bl	8004f78 <I2C_Slave_ADDR>
 8003fb8:	e066      	b.n	8004088 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_I2C_EV_IRQHandler+0x22e>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	0a5b      	lsrs	r3, r3, #9
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f001 f81a 	bl	800500c <I2C_Slave_STOPF>
 8003fd8:	e056      	b.n	8004088 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fda:	7bbb      	ldrb	r3, [r7, #14]
 8003fdc:	2b21      	cmp	r3, #33	; 0x21
 8003fde:	d002      	beq.n	8003fe6 <HAL_I2C_EV_IRQHandler+0x23a>
 8003fe0:	7bbb      	ldrb	r3, [r7, #14]
 8003fe2:	2b29      	cmp	r3, #41	; 0x29
 8003fe4:	d125      	bne.n	8004032 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	09db      	lsrs	r3, r3, #7
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00f      	beq.n	8004012 <HAL_I2C_EV_IRQHandler+0x266>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	0a9b      	lsrs	r3, r3, #10
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_I2C_EV_IRQHandler+0x266>
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	089b      	lsrs	r3, r3, #2
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fef8 	bl	8004e00 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004010:	e039      	b.n	8004086 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	089b      	lsrs	r3, r3, #2
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d033      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x2da>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	0a5b      	lsrs	r3, r3, #9
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d02d      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 ff25 	bl	8004e7a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004030:	e029      	b.n	8004086 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00f      	beq.n	800405e <HAL_I2C_EV_IRQHandler+0x2b2>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	0a9b      	lsrs	r3, r3, #10
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_I2C_EV_IRQHandler+0x2b2>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 ff2f 	bl	8004eba <I2C_SlaveReceive_RXNE>
 800405c:	e014      	b.n	8004088 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00e      	beq.n	8004088 <HAL_I2C_EV_IRQHandler+0x2dc>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	0a5b      	lsrs	r3, r3, #9
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 ff5d 	bl	8004f36 <I2C_SlaveReceive_BTF>
 800407c:	e004      	b.n	8004088 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800407e:	bf00      	nop
 8004080:	e002      	b.n	8004088 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004082:	bf00      	nop
 8004084:	e000      	b.n	8004088 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004086:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b08a      	sub	sp, #40	; 0x28
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	0a1b      	lsrs	r3, r3, #8
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d016      	beq.n	80040ec <HAL_I2C_ER_IRQHandler+0x5e>
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d010      	beq.n	80040ec <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040da:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ea:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	0a5b      	lsrs	r3, r3, #9
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00e      	beq.n	8004116 <HAL_I2C_ER_IRQHandler+0x88>
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004114:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	0a9b      	lsrs	r3, r3, #10
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d03f      	beq.n	80041a2 <HAL_I2C_ER_IRQHandler+0x114>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d039      	beq.n	80041a2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800412e:	7efb      	ldrb	r3, [r7, #27]
 8004130:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004148:	7ebb      	ldrb	r3, [r7, #26]
 800414a:	2b20      	cmp	r3, #32
 800414c:	d112      	bne.n	8004174 <HAL_I2C_ER_IRQHandler+0xe6>
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10f      	bne.n	8004174 <HAL_I2C_ER_IRQHandler+0xe6>
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	2b21      	cmp	r3, #33	; 0x21
 8004158:	d008      	beq.n	800416c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b29      	cmp	r3, #41	; 0x29
 800415e:	d005      	beq.n	800416c <HAL_I2C_ER_IRQHandler+0xde>
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	2b28      	cmp	r3, #40	; 0x28
 8004164:	d106      	bne.n	8004174 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b21      	cmp	r3, #33	; 0x21
 800416a:	d103      	bne.n	8004174 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f001 f87d 	bl	800526c <I2C_Slave_AF>
 8004172:	e016      	b.n	80041a2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800417c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	f043 0304 	orr.w	r3, r3, #4
 8004184:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004186:	7efb      	ldrb	r3, [r7, #27]
 8004188:	2b10      	cmp	r3, #16
 800418a:	d002      	beq.n	8004192 <HAL_I2C_ER_IRQHandler+0x104>
 800418c:	7efb      	ldrb	r3, [r7, #27]
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d107      	bne.n	80041a2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	0adb      	lsrs	r3, r3, #11
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00e      	beq.n	80041cc <HAL_I2C_ER_IRQHandler+0x13e>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	0a1b      	lsrs	r3, r3, #8
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	f043 0308 	orr.w	r3, r3, #8
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80041ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f001 f8b8 	bl	8005354 <I2C_ITError>
  }
}
 80041e4:	bf00      	nop
 80041e6:	3728      	adds	r7, #40	; 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
 8004240:	4613      	mov	r3, r2
 8004242:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr

08004260 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr

08004272 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d150      	bne.n	8004370 <I2C_MasterTransmit_TXE+0xc8>
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b21      	cmp	r3, #33	; 0x21
 80042d2:	d14d      	bne.n	8004370 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d01d      	beq.n	8004316 <I2C_MasterTransmit_TXE+0x6e>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d01a      	beq.n	8004316 <I2C_MasterTransmit_TXE+0x6e>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042e6:	d016      	beq.n	8004316 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042f6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2211      	movs	r2, #17
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff ff6c 	bl	80041ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004314:	e060      	b.n	80043d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004324:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004334:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d107      	bne.n	8004360 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff81 	bl	8004260 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800435e:	e03b      	b.n	80043d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff3f 	bl	80041ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800436e:	e033      	b.n	80043d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b21      	cmp	r3, #33	; 0x21
 8004374:	d005      	beq.n	8004382 <I2C_MasterTransmit_TXE+0xda>
 8004376:	7bbb      	ldrb	r3, [r7, #14]
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d12d      	bne.n	80043d8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b22      	cmp	r3, #34	; 0x22
 8004380:	d12a      	bne.n	80043d8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d108      	bne.n	800439e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800439c:	e01c      	b.n	80043d8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d103      	bne.n	80043b2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f88e 	bl	80044cc <I2C_MemoryTransmit_TXE_BTF>
}
 80043b0:	e012      	b.n	80043d8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043d6:	e7ff      	b.n	80043d8 <I2C_MasterTransmit_TXE+0x130>
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b21      	cmp	r3, #33	; 0x21
 80043f8:	d164      	bne.n	80044c4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d012      	beq.n	800442a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004428:	e04c      	b.n	80044c4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d01d      	beq.n	800446c <I2C_MasterTransmit_BTF+0x8c>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b20      	cmp	r3, #32
 8004434:	d01a      	beq.n	800446c <I2C_MasterTransmit_BTF+0x8c>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800443c:	d016      	beq.n	800446c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800444c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2211      	movs	r2, #17
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff fec1 	bl	80041ec <HAL_I2C_MasterTxCpltCallback>
}
 800446a:	e02b      	b.n	80044c4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800447a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d107      	bne.n	80044b6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fed6 	bl	8004260 <HAL_I2C_MemTxCpltCallback>
}
 80044b4:	e006      	b.n	80044c4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fe94 	bl	80041ec <HAL_I2C_MasterTxCpltCallback>
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d11d      	bne.n	8004520 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10b      	bne.n	8004504 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	1c9a      	adds	r2, r3, #2
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004502:	e077      	b.n	80045f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004508:	b29b      	uxth	r3, r3
 800450a:	121b      	asrs	r3, r3, #8
 800450c:	b2da      	uxtb	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800451e:	e069      	b.n	80045f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	2b01      	cmp	r3, #1
 8004526:	d10b      	bne.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452c:	b2da      	uxtb	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800453e:	e059      	b.n	80045f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004544:	2b02      	cmp	r3, #2
 8004546:	d152      	bne.n	80045ee <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b22      	cmp	r3, #34	; 0x22
 800454c:	d10d      	bne.n	800456a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004568:	e044      	b.n	80045f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d015      	beq.n	80045a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b21      	cmp	r3, #33	; 0x21
 8004578:	d112      	bne.n	80045a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	781a      	ldrb	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800459e:	e029      	b.n	80045f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d124      	bne.n	80045f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b21      	cmp	r3, #33	; 0x21
 80045ae:	d121      	bne.n	80045f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045be:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fe3a 	bl	8004260 <HAL_I2C_MemTxCpltCallback>
}
 80045ec:	e002      	b.n	80045f4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff faca 	bl	8003b88 <I2C_Flush_DR>
}
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b22      	cmp	r3, #34	; 0x22
 800460e:	f040 80b9 	bne.w	8004784 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d921      	bls.n	800466a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b03      	cmp	r3, #3
 8004654:	f040 8096 	bne.w	8004784 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004666:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004668:	e08c      	b.n	8004784 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	2b02      	cmp	r3, #2
 8004670:	d07f      	beq.n	8004772 <I2C_MasterReceive_RXNE+0x176>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d002      	beq.n	800467e <I2C_MasterReceive_RXNE+0x82>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d179      	bne.n	8004772 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f001 fa6e 	bl	8005b60 <I2C_WaitOnSTOPRequestThroughIT>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d14c      	bne.n	8004724 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004698:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046a8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d10a      	bne.n	80046fa <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff fdbd 	bl	8004272 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80046f8:	e044      	b.n	8004784 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d002      	beq.n	800470e <I2C_MasterReceive_RXNE+0x112>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b20      	cmp	r3, #32
 800470c:	d103      	bne.n	8004716 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
 8004714:	e002      	b.n	800471c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2212      	movs	r2, #18
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff fd6e 	bl	80041fe <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004722:	e02f      	b.n	8004784 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004732:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fd8a 	bl	8004284 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004770:	e008      	b.n	8004784 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004780:	605a      	str	r2, [r3, #4]
}
 8004782:	e7ff      	b.n	8004784 <I2C_MasterReceive_RXNE+0x188>
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d11b      	bne.n	80047dc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80047da:	e0c4      	b.n	8004966 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d129      	bne.n	800483a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d00a      	beq.n	8004812 <I2C_MasterReceive_BTF+0x86>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d007      	beq.n	8004812 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004810:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004838:	e095      	b.n	8004966 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d17d      	bne.n	8004940 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d002      	beq.n	8004850 <I2C_MasterReceive_BTF+0xc4>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b10      	cmp	r3, #16
 800484e:	d108      	bne.n	8004862 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e016      	b.n	8004890 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d002      	beq.n	800486e <I2C_MasterReceive_BTF+0xe2>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d108      	bne.n	8004880 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e007      	b.n	8004890 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b40      	cmp	r3, #64	; 0x40
 80048fe:	d10a      	bne.n	8004916 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fcaf 	bl	8004272 <HAL_I2C_MemRxCpltCallback>
}
 8004914:	e027      	b.n	8004966 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d002      	beq.n	800492a <I2C_MasterReceive_BTF+0x19e>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b20      	cmp	r3, #32
 8004928:	d103      	bne.n	8004932 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
 8004930:	e002      	b.n	8004938 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2212      	movs	r2, #18
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff fc60 	bl	80041fe <HAL_I2C_MasterRxCpltCallback>
}
 800493e:	e012      	b.n	8004966 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d117      	bne.n	80049b2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800499a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800499c:	e067      	b.n	8004a6e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	611a      	str	r2, [r3, #16]
}
 80049b0:	e05d      	b.n	8004a6e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ba:	d133      	bne.n	8004a24 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b21      	cmp	r3, #33	; 0x21
 80049c6:	d109      	bne.n	80049dc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049d8:	611a      	str	r2, [r3, #16]
 80049da:	e008      	b.n	80049ee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d004      	beq.n	8004a00 <I2C_Master_SB+0x92>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d108      	bne.n	8004a12 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d032      	beq.n	8004a6e <I2C_Master_SB+0x100>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d02d      	beq.n	8004a6e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a20:	605a      	str	r2, [r3, #4]
}
 8004a22:	e024      	b.n	8004a6e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10e      	bne.n	8004a4a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	11db      	asrs	r3, r3, #7
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f003 0306 	and.w	r3, r3, #6
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f063 030f 	orn	r3, r3, #15
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	611a      	str	r2, [r3, #16]
}
 8004a48:	e011      	b.n	8004a6e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10d      	bne.n	8004a6e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	11db      	asrs	r3, r3, #7
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f003 0306 	and.w	r3, r3, #6
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	f063 030e 	orn	r3, r3, #14
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	611a      	str	r2, [r3, #16]
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d004      	beq.n	8004a9e <I2C_Master_ADD10+0x26>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d108      	bne.n	8004ab0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00c      	beq.n	8004ac0 <I2C_Master_ADD10+0x48>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004abe:	605a      	str	r2, [r3, #4]
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b091      	sub	sp, #68	; 0x44
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b22      	cmp	r3, #34	; 0x22
 8004af2:	f040 8174 	bne.w	8004dde <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10f      	bne.n	8004b1e <I2C_Master_ADDR+0x54>
 8004afe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d10b      	bne.n	8004b1e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b06:	2300      	movs	r3, #0
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	633b      	str	r3, [r7, #48]	; 0x30
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	e16b      	b.n	8004df6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11d      	bne.n	8004b62 <I2C_Master_ADDR+0x98>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b2e:	d118      	bne.n	8004b62 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b30:	2300      	movs	r3, #0
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b54:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	651a      	str	r2, [r3, #80]	; 0x50
 8004b60:	e149      	b.n	8004df6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d113      	bne.n	8004b94 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e120      	b.n	8004dd6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	f040 808a 	bne.w	8004cb4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ba6:	d137      	bne.n	8004c18 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc6:	d113      	bne.n	8004bf0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	e0f2      	b.n	8004dd6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	623b      	str	r3, [r7, #32]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	623b      	str	r3, [r7, #32]
 8004c04:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e0de      	b.n	8004dd6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d02e      	beq.n	8004c7c <I2C_Master_ADDR+0x1b2>
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d02b      	beq.n	8004c7c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	2b12      	cmp	r3, #18
 8004c28:	d102      	bne.n	8004c30 <I2C_Master_ADDR+0x166>
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d125      	bne.n	8004c7c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d00e      	beq.n	8004c54 <I2C_Master_ADDR+0x18a>
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d00b      	beq.n	8004c54 <I2C_Master_ADDR+0x18a>
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d008      	beq.n	8004c54 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e007      	b.n	8004c64 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c62:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	e0ac      	b.n	8004dd6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e090      	b.n	8004dd6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d158      	bne.n	8004d70 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d021      	beq.n	8004d08 <I2C_Master_ADDR+0x23e>
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d01e      	beq.n	8004d08 <I2C_Master_ADDR+0x23e>
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d01b      	beq.n	8004d08 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cde:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	e012      	b.n	8004d2e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3c:	d14b      	bne.n	8004dd6 <I2C_Master_ADDR+0x30c>
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d44:	d00b      	beq.n	8004d5e <I2C_Master_ADDR+0x294>
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d008      	beq.n	8004d5e <I2C_Master_ADDR+0x294>
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d005      	beq.n	8004d5e <I2C_Master_ADDR+0x294>
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d002      	beq.n	8004d5e <I2C_Master_ADDR+0x294>
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d13b      	bne.n	8004dd6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	e032      	b.n	8004dd6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d7e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8e:	d117      	bne.n	8004dc0 <I2C_Master_ADDR+0x2f6>
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d96:	d00b      	beq.n	8004db0 <I2C_Master_ADDR+0x2e6>
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d008      	beq.n	8004db0 <I2C_Master_ADDR+0x2e6>
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d005      	beq.n	8004db0 <I2C_Master_ADDR+0x2e6>
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d002      	beq.n	8004db0 <I2C_Master_ADDR+0x2e6>
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d107      	bne.n	8004dc0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dbe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004ddc:	e00b      	b.n	8004df6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dde:	2300      	movs	r3, #0
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
}
 8004df4:	e7ff      	b.n	8004df6 <I2C_Master_ADDR+0x32c>
 8004df6:	bf00      	nop
 8004df8:	3744      	adds	r7, #68	; 0x44
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d02b      	beq.n	8004e72 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d114      	bne.n	8004e72 <I2C_SlaveTransmit_TXE+0x72>
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b29      	cmp	r3, #41	; 0x29
 8004e4c:	d111      	bne.n	8004e72 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2221      	movs	r2, #33	; 0x21
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2228      	movs	r2, #40	; 0x28
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff f9cf 	bl	8004210 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d011      	beq.n	8004eb0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d02c      	beq.n	8004f2e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d114      	bne.n	8004f2e <I2C_SlaveReceive_RXNE+0x74>
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b2a      	cmp	r3, #42	; 0x2a
 8004f08:	d111      	bne.n	8004f2e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2222      	movs	r2, #34	; 0x22
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2228      	movs	r2, #40	; 0x28
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff f97a 	bl	8004222 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f2e:	bf00      	nop
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d012      	beq.n	8004f6e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f92:	2b28      	cmp	r3, #40	; 0x28
 8004f94:	d127      	bne.n	8004fe6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	089b      	lsrs	r3, r3, #2
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	09db      	lsrs	r3, r3, #7
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d103      	bne.n	8004fca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	81bb      	strh	r3, [r7, #12]
 8004fc8:	e002      	b.n	8004fd0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004fd8:	89ba      	ldrh	r2, [r7, #12]
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff f928 	bl	8004234 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004fe4:	e00e      	b.n	8005004 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005004:	bf00      	nop
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800502a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800502c:	2300      	movs	r3, #0
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005058:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005068:	d172      	bne.n	8005150 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b22      	cmp	r3, #34	; 0x22
 800506e:	d002      	beq.n	8005076 <I2C_Slave_STOPF+0x6a>
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b2a      	cmp	r3, #42	; 0x2a
 8005074:	d135      	bne.n	80050e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	b29a      	uxth	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f043 0204 	orr.w	r2, r3, #4
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fa42 	bl	8003538 <HAL_DMA_GetState>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d049      	beq.n	800514e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	4a69      	ldr	r2, [pc, #420]	; (8005264 <I2C_Slave_STOPF+0x258>)
 80050c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe f9be 	bl	8003448 <HAL_DMA_Abort_IT>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d03d      	beq.n	800514e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050dc:	4610      	mov	r0, r2
 80050de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050e0:	e035      	b.n	800514e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f043 0204 	orr.w	r2, r3, #4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005114:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe fa0c 	bl	8003538 <HAL_DMA_GetState>
 8005120:	4603      	mov	r3, r0
 8005122:	2b01      	cmp	r3, #1
 8005124:	d014      	beq.n	8005150 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512a:	4a4e      	ldr	r2, [pc, #312]	; (8005264 <I2C_Slave_STOPF+0x258>)
 800512c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe f988 	bl	8003448 <HAL_DMA_Abort_IT>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d008      	beq.n	8005150 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005148:	4610      	mov	r0, r2
 800514a:	4798      	blx	r3
 800514c:	e000      	b.n	8005150 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800514e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d03e      	beq.n	80051d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b04      	cmp	r3, #4
 8005166:	d112      	bne.n	800518e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d112      	bne.n	80051c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	f043 0204 	orr.w	r2, r3, #4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f8b7 	bl	8005354 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80051e6:	e039      	b.n	800525c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b2a      	cmp	r3, #42	; 0x2a
 80051ec:	d109      	bne.n	8005202 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2228      	movs	r2, #40	; 0x28
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff f810 	bl	8004222 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b28      	cmp	r3, #40	; 0x28
 800520c:	d111      	bne.n	8005232 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a15      	ldr	r2, [pc, #84]	; (8005268 <I2C_Slave_STOPF+0x25c>)
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff f80f 	bl	800424e <HAL_I2C_ListenCpltCallback>
}
 8005230:	e014      	b.n	800525c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	2b22      	cmp	r3, #34	; 0x22
 8005238:	d002      	beq.n	8005240 <I2C_Slave_STOPF+0x234>
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b22      	cmp	r3, #34	; 0x22
 800523e:	d10d      	bne.n	800525c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7fe ffe3 	bl	8004222 <HAL_I2C_SlaveRxCpltCallback>
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	080056bd 	.word	0x080056bd
 8005268:	ffff0000 	.word	0xffff0000

0800526c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b08      	cmp	r3, #8
 8005286:	d002      	beq.n	800528e <I2C_Slave_AF+0x22>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b20      	cmp	r3, #32
 800528c:	d129      	bne.n	80052e2 <I2C_Slave_AF+0x76>
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	2b28      	cmp	r3, #40	; 0x28
 8005292:	d126      	bne.n	80052e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a2e      	ldr	r2, [pc, #184]	; (8005350 <I2C_Slave_AF+0xe4>)
 8005298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fe ffb7 	bl	800424e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80052e0:	e031      	b.n	8005346 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b21      	cmp	r3, #33	; 0x21
 80052e6:	d129      	bne.n	800533c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a19      	ldr	r2, [pc, #100]	; (8005350 <I2C_Slave_AF+0xe4>)
 80052ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2221      	movs	r2, #33	; 0x21
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005312:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800531c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fe fc2a 	bl	8003b88 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fe ff6b 	bl	8004210 <HAL_I2C_SlaveTxCpltCallback>
}
 800533a:	e004      	b.n	8005346 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005344:	615a      	str	r2, [r3, #20]
}
 8005346:	bf00      	nop
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	ffff0000 	.word	0xffff0000

08005354 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005362:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800536a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800536c:	7bbb      	ldrb	r3, [r7, #14]
 800536e:	2b10      	cmp	r3, #16
 8005370:	d002      	beq.n	8005378 <I2C_ITError+0x24>
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d10a      	bne.n	800538e <I2C_ITError+0x3a>
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b22      	cmp	r3, #34	; 0x22
 800537c:	d107      	bne.n	800538e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800538c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005394:	2b28      	cmp	r3, #40	; 0x28
 8005396:	d107      	bne.n	80053a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2228      	movs	r2, #40	; 0x28
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053a6:	e015      	b.n	80053d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b6:	d00a      	beq.n	80053ce <I2C_ITError+0x7a>
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	2b60      	cmp	r3, #96	; 0x60
 80053bc:	d007      	beq.n	80053ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e2:	d162      	bne.n	80054aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d020      	beq.n	8005444 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005406:	4a6a      	ldr	r2, [pc, #424]	; (80055b0 <I2C_ITError+0x25c>)
 8005408:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	4618      	mov	r0, r3
 8005410:	f7fe f81a 	bl	8003448 <HAL_DMA_Abort_IT>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8089 	beq.w	800552e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800543e:	4610      	mov	r0, r2
 8005440:	4798      	blx	r3
 8005442:	e074      	b.n	800552e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	4a59      	ldr	r2, [pc, #356]	; (80055b0 <I2C_ITError+0x25c>)
 800544a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	4618      	mov	r0, r3
 8005452:	f7fd fff9 	bl	8003448 <HAL_DMA_Abort_IT>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d068      	beq.n	800552e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d10b      	bne.n	8005482 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0201 	bic.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054a4:	4610      	mov	r0, r2
 80054a6:	4798      	blx	r3
 80054a8:	e041      	b.n	800552e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b60      	cmp	r3, #96	; 0x60
 80054b4:	d125      	bne.n	8005502 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d10b      	bne.n	80054ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fe fecb 	bl	8004296 <HAL_I2C_AbortCpltCallback>
 8005500:	e015      	b.n	800552e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d10b      	bne.n	8005528 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fe feab 	bl	8004284 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10e      	bne.n	800555c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800556a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005572:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b04      	cmp	r3, #4
 800557e:	d113      	bne.n	80055a8 <I2C_ITError+0x254>
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	2b28      	cmp	r3, #40	; 0x28
 8005584:	d110      	bne.n	80055a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <I2C_ITError+0x260>)
 800558a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fe fe53 	bl	800424e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	080056bd 	.word	0x080056bd
 80055b4:	ffff0000 	.word	0xffff0000

080055b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	460b      	mov	r3, r1
 80055c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d006      	beq.n	80055e2 <I2C_MasterRequestWrite+0x2a>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d003      	beq.n	80055e2 <I2C_MasterRequestWrite+0x2a>
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055e0:	d108      	bne.n	80055f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e00b      	b.n	800560c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	2b12      	cmp	r3, #18
 80055fa:	d107      	bne.n	800560c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800560a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f8f7 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005632:	d103      	bne.n	800563c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800563a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e035      	b.n	80056ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005648:	d108      	bne.n	800565c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800564a:	897b      	ldrh	r3, [r7, #10]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005658:	611a      	str	r2, [r3, #16]
 800565a:	e01b      	b.n	8005694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800565c:	897b      	ldrh	r3, [r7, #10]
 800565e:	11db      	asrs	r3, r3, #7
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f003 0306 	and.w	r3, r3, #6
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f063 030f 	orn	r3, r3, #15
 800566c:	b2da      	uxtb	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	490e      	ldr	r1, [pc, #56]	; (80056b4 <I2C_MasterRequestWrite+0xfc>)
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f940 	bl	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e010      	b.n	80056ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800568a:	897b      	ldrh	r3, [r7, #10]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4907      	ldr	r1, [pc, #28]	; (80056b8 <I2C_MasterRequestWrite+0x100>)
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 f930 	bl	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	00010008 	.word	0x00010008
 80056b8:	00010002 	.word	0x00010002

080056bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80056d6:	4b4b      	ldr	r3, [pc, #300]	; (8005804 <I2C_DMAAbort+0x148>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	08db      	lsrs	r3, r3, #3
 80056dc:	4a4a      	ldr	r2, [pc, #296]	; (8005808 <I2C_DMAAbort+0x14c>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	0a1a      	lsrs	r2, r3, #8
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	00da      	lsls	r2, r3, #3
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005702:	e00a      	b.n	800571a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3b01      	subs	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005718:	d0ea      	beq.n	80056f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005726:	2200      	movs	r2, #0
 8005728:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	2200      	movs	r2, #0
 8005738:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005748:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2200      	movs	r2, #0
 800574e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	2200      	movs	r2, #0
 800575e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	2200      	movs	r2, #0
 800576e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b60      	cmp	r3, #96	; 0x60
 800578a:	d10e      	bne.n	80057aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2200      	movs	r2, #0
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057a2:	6978      	ldr	r0, [r7, #20]
 80057a4:	f7fe fd77 	bl	8004296 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057a8:	e027      	b.n	80057fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057aa:	7cfb      	ldrb	r3, [r7, #19]
 80057ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057b0:	2b28      	cmp	r3, #40	; 0x28
 80057b2:	d117      	bne.n	80057e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2228      	movs	r2, #40	; 0x28
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057e2:	e007      	b.n	80057f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80057f4:	6978      	ldr	r0, [r7, #20]
 80057f6:	f7fe fd45 	bl	8004284 <HAL_I2C_ErrorCallback>
}
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000030 	.word	0x20000030
 8005808:	14f8b589 	.word	0x14f8b589

0800580c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800581c:	e048      	b.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d044      	beq.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005826:	f7fd fcd3 	bl	80031d0 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d302      	bcc.n	800583c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d139      	bne.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	0c1b      	lsrs	r3, r3, #16
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d10d      	bne.n	8005862 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	43da      	mvns	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4013      	ands	r3, r2
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	e00c      	b.n	800587c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	43da      	mvns	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4013      	ands	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	429a      	cmp	r2, r3
 8005880:	d116      	bne.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	f043 0220 	orr.w	r2, r3, #32
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e023      	b.n	80058f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	0c1b      	lsrs	r3, r3, #16
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d10d      	bne.n	80058d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	43da      	mvns	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4013      	ands	r3, r2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf0c      	ite	eq
 80058cc:	2301      	moveq	r3, #1
 80058ce:	2300      	movne	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	e00c      	b.n	80058f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	43da      	mvns	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4013      	ands	r3, r2
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d093      	beq.n	800581e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800590e:	e071      	b.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591e:	d123      	bne.n	8005968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f043 0204 	orr.w	r2, r3, #4
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e067      	b.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d041      	beq.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005970:	f7fd fc2e 	bl	80031d0 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d136      	bne.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	0c1b      	lsrs	r3, r3, #16
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10c      	bne.n	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	43da      	mvns	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bf14      	ite	ne
 80059a2:	2301      	movne	r3, #1
 80059a4:	2300      	moveq	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	e00b      	b.n	80059c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	43da      	mvns	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4013      	ands	r3, r2
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bf14      	ite	ne
 80059bc:	2301      	movne	r3, #1
 80059be:	2300      	moveq	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d016      	beq.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	f043 0220 	orr.w	r2, r3, #32
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e021      	b.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	0c1b      	lsrs	r3, r3, #16
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d10c      	bne.n	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	43da      	mvns	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e00b      	b.n	8005a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4013      	ands	r3, r2
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bf14      	ite	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	2300      	moveq	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f47f af6d 	bne.w	8005910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a4c:	e034      	b.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f8b8 	bl	8005bc4 <I2C_IsAcknowledgeFailed>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e034      	b.n	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d028      	beq.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a66:	f7fd fbb3 	bl	80031d0 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11d      	bne.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a86:	2b80      	cmp	r3, #128	; 0x80
 8005a88:	d016      	beq.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	f043 0220 	orr.w	r2, r3, #32
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e007      	b.n	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d1c3      	bne.n	8005a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005adc:	e034      	b.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f870 	bl	8005bc4 <I2C_IsAcknowledgeFailed>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e034      	b.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d028      	beq.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af6:	f7fd fb6b 	bl	80031d0 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d11d      	bne.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d016      	beq.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	f043 0220 	orr.w	r2, r3, #32
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e007      	b.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d1c3      	bne.n	8005ade <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	08db      	lsrs	r3, r3, #3
 8005b72:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b74:	fba2 2303 	umull	r2, r3, r2, r3
 8005b78:	0a1a      	lsrs	r2, r3, #8
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f043 0220 	orr.w	r2, r3, #32
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e008      	b.n	8005bb0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bac:	d0e9      	beq.n	8005b82 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000030 	.word	0x20000030
 8005bc0:	14f8b589 	.word	0x14f8b589

08005bc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bda:	d11b      	bne.n	8005c14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005be4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	f043 0204 	orr.w	r2, r3, #4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e000      	b.n	8005c16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr

08005c20 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c30:	d103      	bne.n	8005c3a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c38:	e007      	b.n	8005c4a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c42:	d102      	bne.n	8005c4a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2208      	movs	r2, #8
 8005c48:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e26c      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8087 	beq.w	8005d82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c74:	4b92      	ldr	r3, [pc, #584]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d00c      	beq.n	8005c9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c80:	4b8f      	ldr	r3, [pc, #572]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f003 030c 	and.w	r3, r3, #12
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d112      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x5e>
 8005c8c:	4b8c      	ldr	r3, [pc, #560]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c98:	d10b      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c9a:	4b89      	ldr	r3, [pc, #548]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d06c      	beq.n	8005d80 <HAL_RCC_OscConfig+0x12c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d168      	bne.n	8005d80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e246      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cba:	d106      	bne.n	8005cca <HAL_RCC_OscConfig+0x76>
 8005cbc:	4b80      	ldr	r3, [pc, #512]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a7f      	ldr	r2, [pc, #508]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	e02e      	b.n	8005d28 <HAL_RCC_OscConfig+0xd4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10c      	bne.n	8005cec <HAL_RCC_OscConfig+0x98>
 8005cd2:	4b7b      	ldr	r3, [pc, #492]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a7a      	ldr	r2, [pc, #488]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	4b78      	ldr	r3, [pc, #480]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a77      	ldr	r2, [pc, #476]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e01d      	b.n	8005d28 <HAL_RCC_OscConfig+0xd4>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0xbc>
 8005cf6:	4b72      	ldr	r3, [pc, #456]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a71      	ldr	r2, [pc, #452]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	4b6f      	ldr	r3, [pc, #444]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6e      	ldr	r2, [pc, #440]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e00b      	b.n	8005d28 <HAL_RCC_OscConfig+0xd4>
 8005d10:	4b6b      	ldr	r3, [pc, #428]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6a      	ldr	r2, [pc, #424]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	4b68      	ldr	r3, [pc, #416]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a67      	ldr	r2, [pc, #412]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d013      	beq.n	8005d58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7fd fa4e 	bl	80031d0 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d38:	f7fd fa4a 	bl	80031d0 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	; 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e1fa      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4a:	4b5d      	ldr	r3, [pc, #372]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0xe4>
 8005d56:	e014      	b.n	8005d82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d58:	f7fd fa3a 	bl	80031d0 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d60:	f7fd fa36 	bl	80031d0 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	; 0x64
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e1e6      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d72:	4b53      	ldr	r3, [pc, #332]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x10c>
 8005d7e:	e000      	b.n	8005d82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d063      	beq.n	8005e56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d9a:	4b49      	ldr	r3, [pc, #292]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d11c      	bne.n	8005de0 <HAL_RCC_OscConfig+0x18c>
 8005da6:	4b46      	ldr	r3, [pc, #280]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db2:	4b43      	ldr	r3, [pc, #268]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x176>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d001      	beq.n	8005dca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e1ba      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dca:	4b3d      	ldr	r3, [pc, #244]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4939      	ldr	r1, [pc, #228]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dde:	e03a      	b.n	8005e56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d020      	beq.n	8005e2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005de8:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <HAL_RCC_OscConfig+0x270>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dee:	f7fd f9ef 	bl	80031d0 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df6:	f7fd f9eb 	bl	80031d0 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e19b      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e08:	4b2d      	ldr	r3, [pc, #180]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e14:	4b2a      	ldr	r3, [pc, #168]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4927      	ldr	r1, [pc, #156]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]
 8005e28:	e015      	b.n	8005e56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e2a:	4b26      	ldr	r3, [pc, #152]	; (8005ec4 <HAL_RCC_OscConfig+0x270>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e30:	f7fd f9ce 	bl	80031d0 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e38:	f7fd f9ca 	bl	80031d0 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e17a      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d03a      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d019      	beq.n	8005e9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e6a:	4b17      	ldr	r3, [pc, #92]	; (8005ec8 <HAL_RCC_OscConfig+0x274>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e70:	f7fd f9ae 	bl	80031d0 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e78:	f7fd f9aa 	bl	80031d0 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e15a      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e96:	2001      	movs	r0, #1
 8005e98:	f000 facc 	bl	8006434 <RCC_Delay>
 8005e9c:	e01c      	b.n	8005ed8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <HAL_RCC_OscConfig+0x274>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea4:	f7fd f994 	bl	80031d0 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eaa:	e00f      	b.n	8005ecc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eac:	f7fd f990 	bl	80031d0 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d908      	bls.n	8005ecc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e140      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
 8005ebe:	bf00      	nop
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	42420000 	.word	0x42420000
 8005ec8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ecc:	4b9e      	ldr	r3, [pc, #632]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e9      	bne.n	8005eac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80a6 	beq.w	8006032 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eea:	4b97      	ldr	r3, [pc, #604]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10d      	bne.n	8005f12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef6:	4b94      	ldr	r3, [pc, #592]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	4a93      	ldr	r2, [pc, #588]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f00:	61d3      	str	r3, [r2, #28]
 8005f02:	4b91      	ldr	r3, [pc, #580]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0a:	60bb      	str	r3, [r7, #8]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f12:	4b8e      	ldr	r3, [pc, #568]	; (800614c <HAL_RCC_OscConfig+0x4f8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d118      	bne.n	8005f50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f1e:	4b8b      	ldr	r3, [pc, #556]	; (800614c <HAL_RCC_OscConfig+0x4f8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a8a      	ldr	r2, [pc, #552]	; (800614c <HAL_RCC_OscConfig+0x4f8>)
 8005f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f2a:	f7fd f951 	bl	80031d0 <HAL_GetTick>
 8005f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f32:	f7fd f94d 	bl	80031d0 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b64      	cmp	r3, #100	; 0x64
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e0fd      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f44:	4b81      	ldr	r3, [pc, #516]	; (800614c <HAL_RCC_OscConfig+0x4f8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d106      	bne.n	8005f66 <HAL_RCC_OscConfig+0x312>
 8005f58:	4b7b      	ldr	r3, [pc, #492]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	4a7a      	ldr	r2, [pc, #488]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	6213      	str	r3, [r2, #32]
 8005f64:	e02d      	b.n	8005fc2 <HAL_RCC_OscConfig+0x36e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCC_OscConfig+0x334>
 8005f6e:	4b76      	ldr	r3, [pc, #472]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	4a75      	ldr	r2, [pc, #468]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	6213      	str	r3, [r2, #32]
 8005f7a:	4b73      	ldr	r3, [pc, #460]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	4a72      	ldr	r2, [pc, #456]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f80:	f023 0304 	bic.w	r3, r3, #4
 8005f84:	6213      	str	r3, [r2, #32]
 8005f86:	e01c      	b.n	8005fc2 <HAL_RCC_OscConfig+0x36e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	2b05      	cmp	r3, #5
 8005f8e:	d10c      	bne.n	8005faa <HAL_RCC_OscConfig+0x356>
 8005f90:	4b6d      	ldr	r3, [pc, #436]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	4a6c      	ldr	r2, [pc, #432]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f96:	f043 0304 	orr.w	r3, r3, #4
 8005f9a:	6213      	str	r3, [r2, #32]
 8005f9c:	4b6a      	ldr	r3, [pc, #424]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	4a69      	ldr	r2, [pc, #420]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	6213      	str	r3, [r2, #32]
 8005fa8:	e00b      	b.n	8005fc2 <HAL_RCC_OscConfig+0x36e>
 8005faa:	4b67      	ldr	r3, [pc, #412]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	4a66      	ldr	r2, [pc, #408]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	6213      	str	r3, [r2, #32]
 8005fb6:	4b64      	ldr	r3, [pc, #400]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	4a63      	ldr	r2, [pc, #396]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fbc:	f023 0304 	bic.w	r3, r3, #4
 8005fc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d015      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fca:	f7fd f901 	bl	80031d0 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fd f8fd 	bl	80031d0 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e0ab      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe8:	4b57      	ldr	r3, [pc, #348]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0ee      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x37e>
 8005ff4:	e014      	b.n	8006020 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff6:	f7fd f8eb 	bl	80031d0 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffc:	e00a      	b.n	8006014 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffe:	f7fd f8e7 	bl	80031d0 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	f241 3288 	movw	r2, #5000	; 0x1388
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e095      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006014:	4b4c      	ldr	r3, [pc, #304]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ee      	bne.n	8005ffe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d105      	bne.n	8006032 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006026:	4b48      	ldr	r3, [pc, #288]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	4a47      	ldr	r2, [pc, #284]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 800602c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006030:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8081 	beq.w	800613e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800603c:	4b42      	ldr	r3, [pc, #264]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b08      	cmp	r3, #8
 8006046:	d061      	beq.n	800610c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d146      	bne.n	80060de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006050:	4b3f      	ldr	r3, [pc, #252]	; (8006150 <HAL_RCC_OscConfig+0x4fc>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006056:	f7fd f8bb 	bl	80031d0 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800605e:	f7fd f8b7 	bl	80031d0 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e067      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006070:	4b35      	ldr	r3, [pc, #212]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f0      	bne.n	800605e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	d108      	bne.n	8006098 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006086:	4b30      	ldr	r3, [pc, #192]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	492d      	ldr	r1, [pc, #180]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006094:	4313      	orrs	r3, r2
 8006096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006098:	4b2b      	ldr	r3, [pc, #172]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a19      	ldr	r1, [r3, #32]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	430b      	orrs	r3, r1
 80060aa:	4927      	ldr	r1, [pc, #156]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b0:	4b27      	ldr	r3, [pc, #156]	; (8006150 <HAL_RCC_OscConfig+0x4fc>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b6:	f7fd f88b 	bl	80031d0 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060be:	f7fd f887 	bl	80031d0 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e037      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060d0:	4b1d      	ldr	r3, [pc, #116]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0x46a>
 80060dc:	e02f      	b.n	800613e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060de:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <HAL_RCC_OscConfig+0x4fc>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e4:	f7fd f874 	bl	80031d0 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ec:	f7fd f870 	bl	80031d0 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e020      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060fe:	4b12      	ldr	r3, [pc, #72]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f0      	bne.n	80060ec <HAL_RCC_OscConfig+0x498>
 800610a:	e018      	b.n	800613e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e013      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	429a      	cmp	r2, r3
 800612a:	d106      	bne.n	800613a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d001      	beq.n	800613e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000
 800614c:	40007000 	.word	0x40007000
 8006150:	42420060 	.word	0x42420060

08006154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0d0      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006168:	4b6a      	ldr	r3, [pc, #424]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d910      	bls.n	8006198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006176:	4b67      	ldr	r3, [pc, #412]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f023 0207 	bic.w	r2, r3, #7
 800617e:	4965      	ldr	r1, [pc, #404]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	4313      	orrs	r3, r2
 8006184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006186:	4b63      	ldr	r3, [pc, #396]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d001      	beq.n	8006198 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0b8      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d020      	beq.n	80061e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061b0:	4b59      	ldr	r3, [pc, #356]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4a58      	ldr	r2, [pc, #352]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061c8:	4b53      	ldr	r3, [pc, #332]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4a52      	ldr	r2, [pc, #328]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d4:	4b50      	ldr	r3, [pc, #320]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	494d      	ldr	r1, [pc, #308]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d040      	beq.n	8006274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d107      	bne.n	800620a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061fa:	4b47      	ldr	r3, [pc, #284]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d115      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e07f      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d107      	bne.n	8006222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006212:	4b41      	ldr	r3, [pc, #260]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e073      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006222:	4b3d      	ldr	r3, [pc, #244]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e06b      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006232:	4b39      	ldr	r3, [pc, #228]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f023 0203 	bic.w	r2, r3, #3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4936      	ldr	r1, [pc, #216]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006240:	4313      	orrs	r3, r2
 8006242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006244:	f7fc ffc4 	bl	80031d0 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	e00a      	b.n	8006262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624c:	f7fc ffc0 	bl	80031d0 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e053      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006262:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 020c 	and.w	r2, r3, #12
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	429a      	cmp	r2, r3
 8006272:	d1eb      	bne.n	800624c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006274:	4b27      	ldr	r3, [pc, #156]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d210      	bcs.n	80062a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006282:	4b24      	ldr	r3, [pc, #144]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f023 0207 	bic.w	r2, r3, #7
 800628a:	4922      	ldr	r1, [pc, #136]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	4313      	orrs	r3, r2
 8006290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e032      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062b0:	4b19      	ldr	r3, [pc, #100]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4916      	ldr	r1, [pc, #88]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	490e      	ldr	r1, [pc, #56]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062e2:	f000 f821 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 80062e6:	4602      	mov	r2, r0
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	490a      	ldr	r1, [pc, #40]	; (800631c <HAL_RCC_ClockConfig+0x1c8>)
 80062f4:	5ccb      	ldrb	r3, [r1, r3]
 80062f6:	fa22 f303 	lsr.w	r3, r2, r3
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <HAL_RCC_ClockConfig+0x1cc>)
 80062fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062fe:	4b09      	ldr	r3, [pc, #36]	; (8006324 <HAL_RCC_ClockConfig+0x1d0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7fc ff22 	bl	800314c <HAL_InitTick>

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40022000 	.word	0x40022000
 8006318:	40021000 	.word	0x40021000
 800631c:	08009d00 	.word	0x08009d00
 8006320:	20000030 	.word	0x20000030
 8006324:	20000034 	.word	0x20000034

08006328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	2300      	movs	r3, #0
 800633c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006342:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <HAL_RCC_GetSysClockFreq+0x94>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 030c 	and.w	r3, r3, #12
 800634e:	2b04      	cmp	r3, #4
 8006350:	d002      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x30>
 8006352:	2b08      	cmp	r3, #8
 8006354:	d003      	beq.n	800635e <HAL_RCC_GetSysClockFreq+0x36>
 8006356:	e027      	b.n	80063a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800635a:	613b      	str	r3, [r7, #16]
      break;
 800635c:	e027      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	0c9b      	lsrs	r3, r3, #18
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006368:	5cd3      	ldrb	r3, [r2, r3]
 800636a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d010      	beq.n	8006398 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006376:	4b11      	ldr	r3, [pc, #68]	; (80063bc <HAL_RCC_GetSysClockFreq+0x94>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	0c5b      	lsrs	r3, r3, #17
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	4a11      	ldr	r2, [pc, #68]	; (80063c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006382:	5cd3      	ldrb	r3, [r2, r3]
 8006384:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a0d      	ldr	r2, [pc, #52]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800638a:	fb02 f203 	mul.w	r2, r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	e004      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a0c      	ldr	r2, [pc, #48]	; (80063cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	613b      	str	r3, [r7, #16]
      break;
 80063a6:	e002      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80063aa:	613b      	str	r3, [r7, #16]
      break;
 80063ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ae:	693b      	ldr	r3, [r7, #16]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40021000 	.word	0x40021000
 80063c0:	007a1200 	.word	0x007a1200
 80063c4:	08009d18 	.word	0x08009d18
 80063c8:	08009d28 	.word	0x08009d28
 80063cc:	003d0900 	.word	0x003d0900

080063d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063d4:	4b02      	ldr	r3, [pc, #8]	; (80063e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80063d6:	681b      	ldr	r3, [r3, #0]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr
 80063e0:	20000030 	.word	0x20000030

080063e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063e8:	f7ff fff2 	bl	80063d0 <HAL_RCC_GetHCLKFreq>
 80063ec:	4602      	mov	r2, r0
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	0a1b      	lsrs	r3, r3, #8
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	4903      	ldr	r1, [pc, #12]	; (8006408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063fa:	5ccb      	ldrb	r3, [r1, r3]
 80063fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006400:	4618      	mov	r0, r3
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40021000 	.word	0x40021000
 8006408:	08009d10 	.word	0x08009d10

0800640c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006410:	f7ff ffde 	bl	80063d0 <HAL_RCC_GetHCLKFreq>
 8006414:	4602      	mov	r2, r0
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	0adb      	lsrs	r3, r3, #11
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4903      	ldr	r1, [pc, #12]	; (8006430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40021000 	.word	0x40021000
 8006430:	08009d10 	.word	0x08009d10

08006434 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <RCC_Delay+0x34>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0a      	ldr	r2, [pc, #40]	; (800646c <RCC_Delay+0x38>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	0a5b      	lsrs	r3, r3, #9
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	fb02 f303 	mul.w	r3, r2, r3
 800644e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006450:	bf00      	nop
  }
  while (Delay --);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1e5a      	subs	r2, r3, #1
 8006456:	60fa      	str	r2, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f9      	bne.n	8006450 <RCC_Delay+0x1c>
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr
 8006468:	20000030 	.word	0x20000030
 800646c:	10624dd3 	.word	0x10624dd3

08006470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e041      	b.n	8006506 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fc fb54 	bl	8002b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f000 fa5c 	bl	800696c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	d001      	beq.n	8006528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e03a      	b.n	800659e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a18      	ldr	r2, [pc, #96]	; (80065a8 <HAL_TIM_Base_Start_IT+0x98>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00e      	beq.n	8006568 <HAL_TIM_Base_Start_IT+0x58>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006552:	d009      	beq.n	8006568 <HAL_TIM_Base_Start_IT+0x58>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a14      	ldr	r2, [pc, #80]	; (80065ac <HAL_TIM_Base_Start_IT+0x9c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <HAL_TIM_Base_Start_IT+0x58>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d111      	bne.n	800658c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b06      	cmp	r3, #6
 8006578:	d010      	beq.n	800659c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 0201 	orr.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658a:	e007      	b.n	800659c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr
 80065a8:	40012c00 	.word	0x40012c00
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800

080065b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d020      	beq.n	8006618 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01b      	beq.n	8006618 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0202 	mvn.w	r2, #2
 80065e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f998 	bl	8006934 <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f98b 	bl	8006922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f99a 	bl	8006946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d020      	beq.n	8006664 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01b      	beq.n	8006664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0204 	mvn.w	r2, #4
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2202      	movs	r2, #2
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f972 	bl	8006934 <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f965 	bl	8006922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f974 	bl	8006946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d020      	beq.n	80066b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01b      	beq.n	80066b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0208 	mvn.w	r2, #8
 8006680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2204      	movs	r2, #4
 8006686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f94c 	bl	8006934 <HAL_TIM_IC_CaptureCallback>
 800669c:	e005      	b.n	80066aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f93f 	bl	8006922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f94e 	bl	8006946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f003 0310 	and.w	r3, r3, #16
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d020      	beq.n	80066fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f003 0310 	and.w	r3, r3, #16
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01b      	beq.n	80066fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0210 	mvn.w	r2, #16
 80066cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2208      	movs	r2, #8
 80066d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f926 	bl	8006934 <HAL_TIM_IC_CaptureCallback>
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f919 	bl	8006922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f928 	bl	8006946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00c      	beq.n	8006720 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d007      	beq.n	8006720 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0201 	mvn.w	r2, #1
 8006718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fc f96a 	bl	80029f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00c      	beq.n	8006744 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800673c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa7f 	bl	8006c42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00c      	beq.n	8006768 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f8f8 	bl	8006958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00c      	beq.n	800678c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d007      	beq.n	800678c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0220 	mvn.w	r2, #32
 8006784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa52 	bl	8006c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800678c:	bf00      	nop
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_TIM_ConfigClockSource+0x1c>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e0b4      	b.n	800691a <HAL_TIM_ConfigClockSource+0x186>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e8:	d03e      	beq.n	8006868 <HAL_TIM_ConfigClockSource+0xd4>
 80067ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ee:	f200 8087 	bhi.w	8006900 <HAL_TIM_ConfigClockSource+0x16c>
 80067f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f6:	f000 8086 	beq.w	8006906 <HAL_TIM_ConfigClockSource+0x172>
 80067fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fe:	d87f      	bhi.n	8006900 <HAL_TIM_ConfigClockSource+0x16c>
 8006800:	2b70      	cmp	r3, #112	; 0x70
 8006802:	d01a      	beq.n	800683a <HAL_TIM_ConfigClockSource+0xa6>
 8006804:	2b70      	cmp	r3, #112	; 0x70
 8006806:	d87b      	bhi.n	8006900 <HAL_TIM_ConfigClockSource+0x16c>
 8006808:	2b60      	cmp	r3, #96	; 0x60
 800680a:	d050      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x11a>
 800680c:	2b60      	cmp	r3, #96	; 0x60
 800680e:	d877      	bhi.n	8006900 <HAL_TIM_ConfigClockSource+0x16c>
 8006810:	2b50      	cmp	r3, #80	; 0x50
 8006812:	d03c      	beq.n	800688e <HAL_TIM_ConfigClockSource+0xfa>
 8006814:	2b50      	cmp	r3, #80	; 0x50
 8006816:	d873      	bhi.n	8006900 <HAL_TIM_ConfigClockSource+0x16c>
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	d058      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x13a>
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d86f      	bhi.n	8006900 <HAL_TIM_ConfigClockSource+0x16c>
 8006820:	2b30      	cmp	r3, #48	; 0x30
 8006822:	d064      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0x15a>
 8006824:	2b30      	cmp	r3, #48	; 0x30
 8006826:	d86b      	bhi.n	8006900 <HAL_TIM_ConfigClockSource+0x16c>
 8006828:	2b20      	cmp	r3, #32
 800682a:	d060      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0x15a>
 800682c:	2b20      	cmp	r3, #32
 800682e:	d867      	bhi.n	8006900 <HAL_TIM_ConfigClockSource+0x16c>
 8006830:	2b00      	cmp	r3, #0
 8006832:	d05c      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0x15a>
 8006834:	2b10      	cmp	r3, #16
 8006836:	d05a      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0x15a>
 8006838:	e062      	b.n	8006900 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6899      	ldr	r1, [r3, #8]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f000 f974 	bl	8006b36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800685c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	609a      	str	r2, [r3, #8]
      break;
 8006866:	e04f      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	6899      	ldr	r1, [r3, #8]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f000 f95d 	bl	8006b36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800688a:	609a      	str	r2, [r3, #8]
      break;
 800688c:	e03c      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	6859      	ldr	r1, [r3, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	461a      	mov	r2, r3
 800689c:	f000 f8d4 	bl	8006a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2150      	movs	r1, #80	; 0x50
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f92b 	bl	8006b02 <TIM_ITRx_SetConfig>
      break;
 80068ac:	e02c      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6859      	ldr	r1, [r3, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f000 f8f2 	bl	8006aa4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2160      	movs	r1, #96	; 0x60
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 f91b 	bl	8006b02 <TIM_ITRx_SetConfig>
      break;
 80068cc:	e01c      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6859      	ldr	r1, [r3, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	461a      	mov	r2, r3
 80068dc:	f000 f8b4 	bl	8006a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2140      	movs	r1, #64	; 0x40
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 f90b 	bl	8006b02 <TIM_ITRx_SetConfig>
      break;
 80068ec:	e00c      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f000 f902 	bl	8006b02 <TIM_ITRx_SetConfig>
      break;
 80068fe:	e003      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]
      break;
 8006904:	e000      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr

08006946 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	bc80      	pop	{r7}
 8006956:	4770      	bx	lr

08006958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr
	...

0800696c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a2f      	ldr	r2, [pc, #188]	; (8006a3c <TIM_Base_SetConfig+0xd0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00b      	beq.n	800699c <TIM_Base_SetConfig+0x30>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698a:	d007      	beq.n	800699c <TIM_Base_SetConfig+0x30>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a2c      	ldr	r2, [pc, #176]	; (8006a40 <TIM_Base_SetConfig+0xd4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_Base_SetConfig+0x30>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a2b      	ldr	r2, [pc, #172]	; (8006a44 <TIM_Base_SetConfig+0xd8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d108      	bne.n	80069ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a22      	ldr	r2, [pc, #136]	; (8006a3c <TIM_Base_SetConfig+0xd0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00b      	beq.n	80069ce <TIM_Base_SetConfig+0x62>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069bc:	d007      	beq.n	80069ce <TIM_Base_SetConfig+0x62>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <TIM_Base_SetConfig+0xd4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_Base_SetConfig+0x62>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a1e      	ldr	r2, [pc, #120]	; (8006a44 <TIM_Base_SetConfig+0xd8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d108      	bne.n	80069e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <TIM_Base_SetConfig+0xd0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d103      	bne.n	8006a14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f023 0201 	bic.w	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	611a      	str	r2, [r3, #16]
  }
}
 8006a32:	bf00      	nop
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr
 8006a3c:	40012c00 	.word	0x40012c00
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40000800 	.word	0x40000800

08006a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f023 0201 	bic.w	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f023 030a 	bic.w	r3, r3, #10
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f023 0210 	bic.w	r2, r3, #16
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	031b      	lsls	r3, r3, #12
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	621a      	str	r2, [r3, #32]
}
 8006af8:	bf00      	nop
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f043 0307 	orr.w	r3, r3, #7
 8006b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	609a      	str	r2, [r3, #8]
}
 8006b2c:	bf00      	nop
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr

08006b36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b087      	sub	sp, #28
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	021a      	lsls	r2, r3, #8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	609a      	str	r2, [r3, #8]
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr

08006b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e046      	b.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a16      	ldr	r2, [pc, #88]	; (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00e      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd8:	d009      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a12      	ldr	r2, [pc, #72]	; (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a10      	ldr	r2, [pc, #64]	; (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d10c      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40000400 	.word	0x40000400
 8006c2c:	40000800 	.word	0x40000800

08006c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr

08006c42 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e042      	b.n	8006cec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fb ff86 	bl	8002b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2224      	movs	r2, #36	; 0x24
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f82b 	bl	8006cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691a      	ldr	r2, [r3, #16]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695a      	ldr	r2, [r3, #20]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ccc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006d2e:	f023 030c 	bic.w	r3, r3, #12
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6812      	ldr	r2, [r2, #0]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a2c      	ldr	r2, [pc, #176]	; (8006e08 <UART_SetConfig+0x114>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d103      	bne.n	8006d64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d5c:	f7ff fb56 	bl	800640c <HAL_RCC_GetPCLK2Freq>
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	e002      	b.n	8006d6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d64:	f7ff fb3e 	bl	80063e4 <HAL_RCC_GetPCLK1Freq>
 8006d68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	009a      	lsls	r2, r3, #2
 8006d74:	441a      	add	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d80:	4a22      	ldr	r2, [pc, #136]	; (8006e0c <UART_SetConfig+0x118>)
 8006d82:	fba2 2303 	umull	r2, r3, r2, r3
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	0119      	lsls	r1, r3, #4
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009a      	lsls	r2, r3, #2
 8006d94:	441a      	add	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006da0:	4b1a      	ldr	r3, [pc, #104]	; (8006e0c <UART_SetConfig+0x118>)
 8006da2:	fba3 0302 	umull	r0, r3, r3, r2
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	2064      	movs	r0, #100	; 0x64
 8006daa:	fb00 f303 	mul.w	r3, r0, r3
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	3332      	adds	r3, #50	; 0x32
 8006db4:	4a15      	ldr	r2, [pc, #84]	; (8006e0c <UART_SetConfig+0x118>)
 8006db6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dc0:	4419      	add	r1, r3
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009a      	lsls	r2, r3, #2
 8006dcc:	441a      	add	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <UART_SetConfig+0x118>)
 8006dda:	fba3 0302 	umull	r0, r3, r3, r2
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	2064      	movs	r0, #100	; 0x64
 8006de2:	fb00 f303 	mul.w	r3, r0, r3
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	3332      	adds	r3, #50	; 0x32
 8006dec:	4a07      	ldr	r2, [pc, #28]	; (8006e0c <UART_SetConfig+0x118>)
 8006dee:	fba2 2303 	umull	r2, r3, r2, r3
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	f003 020f 	and.w	r2, r3, #15
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	440a      	add	r2, r1
 8006dfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40013800 	.word	0x40013800
 8006e0c:	51eb851f 	.word	0x51eb851f

08006e10 <__errno>:
 8006e10:	4b01      	ldr	r3, [pc, #4]	; (8006e18 <__errno+0x8>)
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	2000003c 	.word	0x2000003c

08006e1c <__libc_init_array>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	2600      	movs	r6, #0
 8006e20:	4d0c      	ldr	r5, [pc, #48]	; (8006e54 <__libc_init_array+0x38>)
 8006e22:	4c0d      	ldr	r4, [pc, #52]	; (8006e58 <__libc_init_array+0x3c>)
 8006e24:	1b64      	subs	r4, r4, r5
 8006e26:	10a4      	asrs	r4, r4, #2
 8006e28:	42a6      	cmp	r6, r4
 8006e2a:	d109      	bne.n	8006e40 <__libc_init_array+0x24>
 8006e2c:	f002 feba 	bl	8009ba4 <_init>
 8006e30:	2600      	movs	r6, #0
 8006e32:	4d0a      	ldr	r5, [pc, #40]	; (8006e5c <__libc_init_array+0x40>)
 8006e34:	4c0a      	ldr	r4, [pc, #40]	; (8006e60 <__libc_init_array+0x44>)
 8006e36:	1b64      	subs	r4, r4, r5
 8006e38:	10a4      	asrs	r4, r4, #2
 8006e3a:	42a6      	cmp	r6, r4
 8006e3c:	d105      	bne.n	8006e4a <__libc_init_array+0x2e>
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e44:	4798      	blx	r3
 8006e46:	3601      	adds	r6, #1
 8006e48:	e7ee      	b.n	8006e28 <__libc_init_array+0xc>
 8006e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4e:	4798      	blx	r3
 8006e50:	3601      	adds	r6, #1
 8006e52:	e7f2      	b.n	8006e3a <__libc_init_array+0x1e>
 8006e54:	0800a10c 	.word	0x0800a10c
 8006e58:	0800a10c 	.word	0x0800a10c
 8006e5c:	0800a10c 	.word	0x0800a10c
 8006e60:	0800a110 	.word	0x0800a110

08006e64 <memset>:
 8006e64:	4603      	mov	r3, r0
 8006e66:	4402      	add	r2, r0
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d100      	bne.n	8006e6e <memset+0xa>
 8006e6c:	4770      	bx	lr
 8006e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e72:	e7f9      	b.n	8006e68 <memset+0x4>

08006e74 <__cvt>:
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7a:	461f      	mov	r7, r3
 8006e7c:	bfbb      	ittet	lt
 8006e7e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006e82:	461f      	movlt	r7, r3
 8006e84:	2300      	movge	r3, #0
 8006e86:	232d      	movlt	r3, #45	; 0x2d
 8006e88:	b088      	sub	sp, #32
 8006e8a:	4614      	mov	r4, r2
 8006e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006e90:	7013      	strb	r3, [r2, #0]
 8006e92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e94:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006e98:	f023 0820 	bic.w	r8, r3, #32
 8006e9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ea0:	d005      	beq.n	8006eae <__cvt+0x3a>
 8006ea2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ea6:	d100      	bne.n	8006eaa <__cvt+0x36>
 8006ea8:	3501      	adds	r5, #1
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e000      	b.n	8006eb0 <__cvt+0x3c>
 8006eae:	2303      	movs	r3, #3
 8006eb0:	aa07      	add	r2, sp, #28
 8006eb2:	9204      	str	r2, [sp, #16]
 8006eb4:	aa06      	add	r2, sp, #24
 8006eb6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006eba:	e9cd 3500 	strd	r3, r5, [sp]
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	f000 fce5 	bl	8007890 <_dtoa_r>
 8006ec6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006eca:	4606      	mov	r6, r0
 8006ecc:	d102      	bne.n	8006ed4 <__cvt+0x60>
 8006ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ed0:	07db      	lsls	r3, r3, #31
 8006ed2:	d522      	bpl.n	8006f1a <__cvt+0xa6>
 8006ed4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ed8:	eb06 0905 	add.w	r9, r6, r5
 8006edc:	d110      	bne.n	8006f00 <__cvt+0x8c>
 8006ede:	7833      	ldrb	r3, [r6, #0]
 8006ee0:	2b30      	cmp	r3, #48	; 0x30
 8006ee2:	d10a      	bne.n	8006efa <__cvt+0x86>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	4620      	mov	r0, r4
 8006eea:	4639      	mov	r1, r7
 8006eec:	f7f9 fd5c 	bl	80009a8 <__aeabi_dcmpeq>
 8006ef0:	b918      	cbnz	r0, 8006efa <__cvt+0x86>
 8006ef2:	f1c5 0501 	rsb	r5, r5, #1
 8006ef6:	f8ca 5000 	str.w	r5, [sl]
 8006efa:	f8da 3000 	ldr.w	r3, [sl]
 8006efe:	4499      	add	r9, r3
 8006f00:	2200      	movs	r2, #0
 8006f02:	2300      	movs	r3, #0
 8006f04:	4620      	mov	r0, r4
 8006f06:	4639      	mov	r1, r7
 8006f08:	f7f9 fd4e 	bl	80009a8 <__aeabi_dcmpeq>
 8006f0c:	b108      	cbz	r0, 8006f12 <__cvt+0x9e>
 8006f0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f12:	2230      	movs	r2, #48	; 0x30
 8006f14:	9b07      	ldr	r3, [sp, #28]
 8006f16:	454b      	cmp	r3, r9
 8006f18:	d307      	bcc.n	8006f2a <__cvt+0xb6>
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	9b07      	ldr	r3, [sp, #28]
 8006f1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f20:	1b9b      	subs	r3, r3, r6
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	b008      	add	sp, #32
 8006f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2a:	1c59      	adds	r1, r3, #1
 8006f2c:	9107      	str	r1, [sp, #28]
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	e7f0      	b.n	8006f14 <__cvt+0xa0>

08006f32 <__exponent>:
 8006f32:	4603      	mov	r3, r0
 8006f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f36:	2900      	cmp	r1, #0
 8006f38:	f803 2b02 	strb.w	r2, [r3], #2
 8006f3c:	bfb6      	itet	lt
 8006f3e:	222d      	movlt	r2, #45	; 0x2d
 8006f40:	222b      	movge	r2, #43	; 0x2b
 8006f42:	4249      	neglt	r1, r1
 8006f44:	2909      	cmp	r1, #9
 8006f46:	7042      	strb	r2, [r0, #1]
 8006f48:	dd2b      	ble.n	8006fa2 <__exponent+0x70>
 8006f4a:	f10d 0407 	add.w	r4, sp, #7
 8006f4e:	46a4      	mov	ip, r4
 8006f50:	270a      	movs	r7, #10
 8006f52:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f56:	460a      	mov	r2, r1
 8006f58:	46a6      	mov	lr, r4
 8006f5a:	fb07 1516 	mls	r5, r7, r6, r1
 8006f5e:	2a63      	cmp	r2, #99	; 0x63
 8006f60:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006f64:	4631      	mov	r1, r6
 8006f66:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f6e:	dcf0      	bgt.n	8006f52 <__exponent+0x20>
 8006f70:	3130      	adds	r1, #48	; 0x30
 8006f72:	f1ae 0502 	sub.w	r5, lr, #2
 8006f76:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	1c44      	adds	r4, r0, #1
 8006f7e:	4561      	cmp	r1, ip
 8006f80:	d30a      	bcc.n	8006f98 <__exponent+0x66>
 8006f82:	f10d 0209 	add.w	r2, sp, #9
 8006f86:	eba2 020e 	sub.w	r2, r2, lr
 8006f8a:	4565      	cmp	r5, ip
 8006f8c:	bf88      	it	hi
 8006f8e:	2200      	movhi	r2, #0
 8006f90:	4413      	add	r3, r2
 8006f92:	1a18      	subs	r0, r3, r0
 8006f94:	b003      	add	sp, #12
 8006f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f9c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006fa0:	e7ed      	b.n	8006f7e <__exponent+0x4c>
 8006fa2:	2330      	movs	r3, #48	; 0x30
 8006fa4:	3130      	adds	r1, #48	; 0x30
 8006fa6:	7083      	strb	r3, [r0, #2]
 8006fa8:	70c1      	strb	r1, [r0, #3]
 8006faa:	1d03      	adds	r3, r0, #4
 8006fac:	e7f1      	b.n	8006f92 <__exponent+0x60>
	...

08006fb0 <_printf_float>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	b091      	sub	sp, #68	; 0x44
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	461f      	mov	r7, r3
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	f001 fa53 	bl	800846c <_localeconv_r>
 8006fc6:	6803      	ldr	r3, [r0, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	9309      	str	r3, [sp, #36]	; 0x24
 8006fcc:	f7f9 f8c0 	bl	8000150 <strlen>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	930e      	str	r3, [sp, #56]	; 0x38
 8006fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fd8:	900a      	str	r0, [sp, #40]	; 0x28
 8006fda:	3307      	adds	r3, #7
 8006fdc:	f023 0307 	bic.w	r3, r3, #7
 8006fe0:	f103 0208 	add.w	r2, r3, #8
 8006fe4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006fe8:	f8d4 b000 	ldr.w	fp, [r4]
 8006fec:	f8c8 2000 	str.w	r2, [r8]
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ff8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006ffc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007000:	930b      	str	r3, [sp, #44]	; 0x2c
 8007002:	f04f 32ff 	mov.w	r2, #4294967295
 8007006:	4640      	mov	r0, r8
 8007008:	4b9c      	ldr	r3, [pc, #624]	; (800727c <_printf_float+0x2cc>)
 800700a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800700c:	f7f9 fcfe 	bl	8000a0c <__aeabi_dcmpun>
 8007010:	bb70      	cbnz	r0, 8007070 <_printf_float+0xc0>
 8007012:	f04f 32ff 	mov.w	r2, #4294967295
 8007016:	4640      	mov	r0, r8
 8007018:	4b98      	ldr	r3, [pc, #608]	; (800727c <_printf_float+0x2cc>)
 800701a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800701c:	f7f9 fcd8 	bl	80009d0 <__aeabi_dcmple>
 8007020:	bb30      	cbnz	r0, 8007070 <_printf_float+0xc0>
 8007022:	2200      	movs	r2, #0
 8007024:	2300      	movs	r3, #0
 8007026:	4640      	mov	r0, r8
 8007028:	4651      	mov	r1, sl
 800702a:	f7f9 fcc7 	bl	80009bc <__aeabi_dcmplt>
 800702e:	b110      	cbz	r0, 8007036 <_printf_float+0x86>
 8007030:	232d      	movs	r3, #45	; 0x2d
 8007032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007036:	4b92      	ldr	r3, [pc, #584]	; (8007280 <_printf_float+0x2d0>)
 8007038:	4892      	ldr	r0, [pc, #584]	; (8007284 <_printf_float+0x2d4>)
 800703a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800703e:	bf94      	ite	ls
 8007040:	4698      	movls	r8, r3
 8007042:	4680      	movhi	r8, r0
 8007044:	2303      	movs	r3, #3
 8007046:	f04f 0a00 	mov.w	sl, #0
 800704a:	6123      	str	r3, [r4, #16]
 800704c:	f02b 0304 	bic.w	r3, fp, #4
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	4633      	mov	r3, r6
 8007054:	4621      	mov	r1, r4
 8007056:	4628      	mov	r0, r5
 8007058:	9700      	str	r7, [sp, #0]
 800705a:	aa0f      	add	r2, sp, #60	; 0x3c
 800705c:	f000 f9d4 	bl	8007408 <_printf_common>
 8007060:	3001      	adds	r0, #1
 8007062:	f040 8090 	bne.w	8007186 <_printf_float+0x1d6>
 8007066:	f04f 30ff 	mov.w	r0, #4294967295
 800706a:	b011      	add	sp, #68	; 0x44
 800706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007070:	4642      	mov	r2, r8
 8007072:	4653      	mov	r3, sl
 8007074:	4640      	mov	r0, r8
 8007076:	4651      	mov	r1, sl
 8007078:	f7f9 fcc8 	bl	8000a0c <__aeabi_dcmpun>
 800707c:	b148      	cbz	r0, 8007092 <_printf_float+0xe2>
 800707e:	f1ba 0f00 	cmp.w	sl, #0
 8007082:	bfb8      	it	lt
 8007084:	232d      	movlt	r3, #45	; 0x2d
 8007086:	4880      	ldr	r0, [pc, #512]	; (8007288 <_printf_float+0x2d8>)
 8007088:	bfb8      	it	lt
 800708a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800708e:	4b7f      	ldr	r3, [pc, #508]	; (800728c <_printf_float+0x2dc>)
 8007090:	e7d3      	b.n	800703a <_printf_float+0x8a>
 8007092:	6863      	ldr	r3, [r4, #4]
 8007094:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	d142      	bne.n	8007122 <_printf_float+0x172>
 800709c:	2306      	movs	r3, #6
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	9206      	str	r2, [sp, #24]
 80070a4:	aa0e      	add	r2, sp, #56	; 0x38
 80070a6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80070aa:	aa0d      	add	r2, sp, #52	; 0x34
 80070ac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80070b0:	9203      	str	r2, [sp, #12]
 80070b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80070b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80070ba:	6023      	str	r3, [r4, #0]
 80070bc:	6863      	ldr	r3, [r4, #4]
 80070be:	4642      	mov	r2, r8
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	4628      	mov	r0, r5
 80070c4:	4653      	mov	r3, sl
 80070c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80070c8:	f7ff fed4 	bl	8006e74 <__cvt>
 80070cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070ce:	4680      	mov	r8, r0
 80070d0:	2947      	cmp	r1, #71	; 0x47
 80070d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80070d4:	d108      	bne.n	80070e8 <_printf_float+0x138>
 80070d6:	1cc8      	adds	r0, r1, #3
 80070d8:	db02      	blt.n	80070e0 <_printf_float+0x130>
 80070da:	6863      	ldr	r3, [r4, #4]
 80070dc:	4299      	cmp	r1, r3
 80070de:	dd40      	ble.n	8007162 <_printf_float+0x1b2>
 80070e0:	f1a9 0902 	sub.w	r9, r9, #2
 80070e4:	fa5f f989 	uxtb.w	r9, r9
 80070e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070ec:	d81f      	bhi.n	800712e <_printf_float+0x17e>
 80070ee:	464a      	mov	r2, r9
 80070f0:	3901      	subs	r1, #1
 80070f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070f6:	910d      	str	r1, [sp, #52]	; 0x34
 80070f8:	f7ff ff1b 	bl	8006f32 <__exponent>
 80070fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070fe:	4682      	mov	sl, r0
 8007100:	1813      	adds	r3, r2, r0
 8007102:	2a01      	cmp	r2, #1
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	dc02      	bgt.n	800710e <_printf_float+0x15e>
 8007108:	6822      	ldr	r2, [r4, #0]
 800710a:	07d2      	lsls	r2, r2, #31
 800710c:	d501      	bpl.n	8007112 <_printf_float+0x162>
 800710e:	3301      	adds	r3, #1
 8007110:	6123      	str	r3, [r4, #16]
 8007112:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007116:	2b00      	cmp	r3, #0
 8007118:	d09b      	beq.n	8007052 <_printf_float+0xa2>
 800711a:	232d      	movs	r3, #45	; 0x2d
 800711c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007120:	e797      	b.n	8007052 <_printf_float+0xa2>
 8007122:	2947      	cmp	r1, #71	; 0x47
 8007124:	d1bc      	bne.n	80070a0 <_printf_float+0xf0>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1ba      	bne.n	80070a0 <_printf_float+0xf0>
 800712a:	2301      	movs	r3, #1
 800712c:	e7b7      	b.n	800709e <_printf_float+0xee>
 800712e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007132:	d118      	bne.n	8007166 <_printf_float+0x1b6>
 8007134:	2900      	cmp	r1, #0
 8007136:	6863      	ldr	r3, [r4, #4]
 8007138:	dd0b      	ble.n	8007152 <_printf_float+0x1a2>
 800713a:	6121      	str	r1, [r4, #16]
 800713c:	b913      	cbnz	r3, 8007144 <_printf_float+0x194>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	07d0      	lsls	r0, r2, #31
 8007142:	d502      	bpl.n	800714a <_printf_float+0x19a>
 8007144:	3301      	adds	r3, #1
 8007146:	440b      	add	r3, r1
 8007148:	6123      	str	r3, [r4, #16]
 800714a:	f04f 0a00 	mov.w	sl, #0
 800714e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007150:	e7df      	b.n	8007112 <_printf_float+0x162>
 8007152:	b913      	cbnz	r3, 800715a <_printf_float+0x1aa>
 8007154:	6822      	ldr	r2, [r4, #0]
 8007156:	07d2      	lsls	r2, r2, #31
 8007158:	d501      	bpl.n	800715e <_printf_float+0x1ae>
 800715a:	3302      	adds	r3, #2
 800715c:	e7f4      	b.n	8007148 <_printf_float+0x198>
 800715e:	2301      	movs	r3, #1
 8007160:	e7f2      	b.n	8007148 <_printf_float+0x198>
 8007162:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007168:	4299      	cmp	r1, r3
 800716a:	db05      	blt.n	8007178 <_printf_float+0x1c8>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	6121      	str	r1, [r4, #16]
 8007170:	07d8      	lsls	r0, r3, #31
 8007172:	d5ea      	bpl.n	800714a <_printf_float+0x19a>
 8007174:	1c4b      	adds	r3, r1, #1
 8007176:	e7e7      	b.n	8007148 <_printf_float+0x198>
 8007178:	2900      	cmp	r1, #0
 800717a:	bfcc      	ite	gt
 800717c:	2201      	movgt	r2, #1
 800717e:	f1c1 0202 	rsble	r2, r1, #2
 8007182:	4413      	add	r3, r2
 8007184:	e7e0      	b.n	8007148 <_printf_float+0x198>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	055a      	lsls	r2, r3, #21
 800718a:	d407      	bmi.n	800719c <_printf_float+0x1ec>
 800718c:	6923      	ldr	r3, [r4, #16]
 800718e:	4642      	mov	r2, r8
 8007190:	4631      	mov	r1, r6
 8007192:	4628      	mov	r0, r5
 8007194:	47b8      	blx	r7
 8007196:	3001      	adds	r0, #1
 8007198:	d12b      	bne.n	80071f2 <_printf_float+0x242>
 800719a:	e764      	b.n	8007066 <_printf_float+0xb6>
 800719c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80071a0:	f240 80dd 	bls.w	800735e <_printf_float+0x3ae>
 80071a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071a8:	2200      	movs	r2, #0
 80071aa:	2300      	movs	r3, #0
 80071ac:	f7f9 fbfc 	bl	80009a8 <__aeabi_dcmpeq>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d033      	beq.n	800721c <_printf_float+0x26c>
 80071b4:	2301      	movs	r3, #1
 80071b6:	4631      	mov	r1, r6
 80071b8:	4628      	mov	r0, r5
 80071ba:	4a35      	ldr	r2, [pc, #212]	; (8007290 <_printf_float+0x2e0>)
 80071bc:	47b8      	blx	r7
 80071be:	3001      	adds	r0, #1
 80071c0:	f43f af51 	beq.w	8007066 <_printf_float+0xb6>
 80071c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071c8:	429a      	cmp	r2, r3
 80071ca:	db02      	blt.n	80071d2 <_printf_float+0x222>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	07d8      	lsls	r0, r3, #31
 80071d0:	d50f      	bpl.n	80071f2 <_printf_float+0x242>
 80071d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	f43f af42 	beq.w	8007066 <_printf_float+0xb6>
 80071e2:	f04f 0800 	mov.w	r8, #0
 80071e6:	f104 091a 	add.w	r9, r4, #26
 80071ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ec:	3b01      	subs	r3, #1
 80071ee:	4543      	cmp	r3, r8
 80071f0:	dc09      	bgt.n	8007206 <_printf_float+0x256>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	079b      	lsls	r3, r3, #30
 80071f6:	f100 8102 	bmi.w	80073fe <_printf_float+0x44e>
 80071fa:	68e0      	ldr	r0, [r4, #12]
 80071fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071fe:	4298      	cmp	r0, r3
 8007200:	bfb8      	it	lt
 8007202:	4618      	movlt	r0, r3
 8007204:	e731      	b.n	800706a <_printf_float+0xba>
 8007206:	2301      	movs	r3, #1
 8007208:	464a      	mov	r2, r9
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f af28 	beq.w	8007066 <_printf_float+0xb6>
 8007216:	f108 0801 	add.w	r8, r8, #1
 800721a:	e7e6      	b.n	80071ea <_printf_float+0x23a>
 800721c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800721e:	2b00      	cmp	r3, #0
 8007220:	dc38      	bgt.n	8007294 <_printf_float+0x2e4>
 8007222:	2301      	movs	r3, #1
 8007224:	4631      	mov	r1, r6
 8007226:	4628      	mov	r0, r5
 8007228:	4a19      	ldr	r2, [pc, #100]	; (8007290 <_printf_float+0x2e0>)
 800722a:	47b8      	blx	r7
 800722c:	3001      	adds	r0, #1
 800722e:	f43f af1a 	beq.w	8007066 <_printf_float+0xb6>
 8007232:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007236:	4313      	orrs	r3, r2
 8007238:	d102      	bne.n	8007240 <_printf_float+0x290>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	07d9      	lsls	r1, r3, #31
 800723e:	d5d8      	bpl.n	80071f2 <_printf_float+0x242>
 8007240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007244:	4631      	mov	r1, r6
 8007246:	4628      	mov	r0, r5
 8007248:	47b8      	blx	r7
 800724a:	3001      	adds	r0, #1
 800724c:	f43f af0b 	beq.w	8007066 <_printf_float+0xb6>
 8007250:	f04f 0900 	mov.w	r9, #0
 8007254:	f104 0a1a 	add.w	sl, r4, #26
 8007258:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800725a:	425b      	negs	r3, r3
 800725c:	454b      	cmp	r3, r9
 800725e:	dc01      	bgt.n	8007264 <_printf_float+0x2b4>
 8007260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007262:	e794      	b.n	800718e <_printf_float+0x1de>
 8007264:	2301      	movs	r3, #1
 8007266:	4652      	mov	r2, sl
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	47b8      	blx	r7
 800726e:	3001      	adds	r0, #1
 8007270:	f43f aef9 	beq.w	8007066 <_printf_float+0xb6>
 8007274:	f109 0901 	add.w	r9, r9, #1
 8007278:	e7ee      	b.n	8007258 <_printf_float+0x2a8>
 800727a:	bf00      	nop
 800727c:	7fefffff 	.word	0x7fefffff
 8007280:	08009d30 	.word	0x08009d30
 8007284:	08009d34 	.word	0x08009d34
 8007288:	08009d3c 	.word	0x08009d3c
 800728c:	08009d38 	.word	0x08009d38
 8007290:	08009d40 	.word	0x08009d40
 8007294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007298:	429a      	cmp	r2, r3
 800729a:	bfa8      	it	ge
 800729c:	461a      	movge	r2, r3
 800729e:	2a00      	cmp	r2, #0
 80072a0:	4691      	mov	r9, r2
 80072a2:	dc37      	bgt.n	8007314 <_printf_float+0x364>
 80072a4:	f04f 0b00 	mov.w	fp, #0
 80072a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ac:	f104 021a 	add.w	r2, r4, #26
 80072b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80072b4:	ebaa 0309 	sub.w	r3, sl, r9
 80072b8:	455b      	cmp	r3, fp
 80072ba:	dc33      	bgt.n	8007324 <_printf_float+0x374>
 80072bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072c0:	429a      	cmp	r2, r3
 80072c2:	db3b      	blt.n	800733c <_printf_float+0x38c>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	07da      	lsls	r2, r3, #31
 80072c8:	d438      	bmi.n	800733c <_printf_float+0x38c>
 80072ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80072ce:	eba2 030a 	sub.w	r3, r2, sl
 80072d2:	eba2 0901 	sub.w	r9, r2, r1
 80072d6:	4599      	cmp	r9, r3
 80072d8:	bfa8      	it	ge
 80072da:	4699      	movge	r9, r3
 80072dc:	f1b9 0f00 	cmp.w	r9, #0
 80072e0:	dc34      	bgt.n	800734c <_printf_float+0x39c>
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ea:	f104 0a1a 	add.w	sl, r4, #26
 80072ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	eba3 0309 	sub.w	r3, r3, r9
 80072f8:	4543      	cmp	r3, r8
 80072fa:	f77f af7a 	ble.w	80071f2 <_printf_float+0x242>
 80072fe:	2301      	movs	r3, #1
 8007300:	4652      	mov	r2, sl
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	f43f aeac 	beq.w	8007066 <_printf_float+0xb6>
 800730e:	f108 0801 	add.w	r8, r8, #1
 8007312:	e7ec      	b.n	80072ee <_printf_float+0x33e>
 8007314:	4613      	mov	r3, r2
 8007316:	4631      	mov	r1, r6
 8007318:	4642      	mov	r2, r8
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	d1c0      	bne.n	80072a4 <_printf_float+0x2f4>
 8007322:	e6a0      	b.n	8007066 <_printf_float+0xb6>
 8007324:	2301      	movs	r3, #1
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	920b      	str	r2, [sp, #44]	; 0x2c
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	f43f ae99 	beq.w	8007066 <_printf_float+0xb6>
 8007334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007336:	f10b 0b01 	add.w	fp, fp, #1
 800733a:	e7b9      	b.n	80072b0 <_printf_float+0x300>
 800733c:	4631      	mov	r1, r6
 800733e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007342:	4628      	mov	r0, r5
 8007344:	47b8      	blx	r7
 8007346:	3001      	adds	r0, #1
 8007348:	d1bf      	bne.n	80072ca <_printf_float+0x31a>
 800734a:	e68c      	b.n	8007066 <_printf_float+0xb6>
 800734c:	464b      	mov	r3, r9
 800734e:	4631      	mov	r1, r6
 8007350:	4628      	mov	r0, r5
 8007352:	eb08 020a 	add.w	r2, r8, sl
 8007356:	47b8      	blx	r7
 8007358:	3001      	adds	r0, #1
 800735a:	d1c2      	bne.n	80072e2 <_printf_float+0x332>
 800735c:	e683      	b.n	8007066 <_printf_float+0xb6>
 800735e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007360:	2a01      	cmp	r2, #1
 8007362:	dc01      	bgt.n	8007368 <_printf_float+0x3b8>
 8007364:	07db      	lsls	r3, r3, #31
 8007366:	d537      	bpl.n	80073d8 <_printf_float+0x428>
 8007368:	2301      	movs	r3, #1
 800736a:	4642      	mov	r2, r8
 800736c:	4631      	mov	r1, r6
 800736e:	4628      	mov	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	3001      	adds	r0, #1
 8007374:	f43f ae77 	beq.w	8007066 <_printf_float+0xb6>
 8007378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800737c:	4631      	mov	r1, r6
 800737e:	4628      	mov	r0, r5
 8007380:	47b8      	blx	r7
 8007382:	3001      	adds	r0, #1
 8007384:	f43f ae6f 	beq.w	8007066 <_printf_float+0xb6>
 8007388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800738c:	2200      	movs	r2, #0
 800738e:	2300      	movs	r3, #0
 8007390:	f7f9 fb0a 	bl	80009a8 <__aeabi_dcmpeq>
 8007394:	b9d8      	cbnz	r0, 80073ce <_printf_float+0x41e>
 8007396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007398:	f108 0201 	add.w	r2, r8, #1
 800739c:	3b01      	subs	r3, #1
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	d10e      	bne.n	80073c6 <_printf_float+0x416>
 80073a8:	e65d      	b.n	8007066 <_printf_float+0xb6>
 80073aa:	2301      	movs	r3, #1
 80073ac:	464a      	mov	r2, r9
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b8      	blx	r7
 80073b4:	3001      	adds	r0, #1
 80073b6:	f43f ae56 	beq.w	8007066 <_printf_float+0xb6>
 80073ba:	f108 0801 	add.w	r8, r8, #1
 80073be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073c0:	3b01      	subs	r3, #1
 80073c2:	4543      	cmp	r3, r8
 80073c4:	dcf1      	bgt.n	80073aa <_printf_float+0x3fa>
 80073c6:	4653      	mov	r3, sl
 80073c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073cc:	e6e0      	b.n	8007190 <_printf_float+0x1e0>
 80073ce:	f04f 0800 	mov.w	r8, #0
 80073d2:	f104 091a 	add.w	r9, r4, #26
 80073d6:	e7f2      	b.n	80073be <_printf_float+0x40e>
 80073d8:	2301      	movs	r3, #1
 80073da:	4642      	mov	r2, r8
 80073dc:	e7df      	b.n	800739e <_printf_float+0x3ee>
 80073de:	2301      	movs	r3, #1
 80073e0:	464a      	mov	r2, r9
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f ae3c 	beq.w	8007066 <_printf_float+0xb6>
 80073ee:	f108 0801 	add.w	r8, r8, #1
 80073f2:	68e3      	ldr	r3, [r4, #12]
 80073f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073f6:	1a5b      	subs	r3, r3, r1
 80073f8:	4543      	cmp	r3, r8
 80073fa:	dcf0      	bgt.n	80073de <_printf_float+0x42e>
 80073fc:	e6fd      	b.n	80071fa <_printf_float+0x24a>
 80073fe:	f04f 0800 	mov.w	r8, #0
 8007402:	f104 0919 	add.w	r9, r4, #25
 8007406:	e7f4      	b.n	80073f2 <_printf_float+0x442>

08007408 <_printf_common>:
 8007408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800740c:	4616      	mov	r6, r2
 800740e:	4699      	mov	r9, r3
 8007410:	688a      	ldr	r2, [r1, #8]
 8007412:	690b      	ldr	r3, [r1, #16]
 8007414:	4607      	mov	r7, r0
 8007416:	4293      	cmp	r3, r2
 8007418:	bfb8      	it	lt
 800741a:	4613      	movlt	r3, r2
 800741c:	6033      	str	r3, [r6, #0]
 800741e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007422:	460c      	mov	r4, r1
 8007424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007428:	b10a      	cbz	r2, 800742e <_printf_common+0x26>
 800742a:	3301      	adds	r3, #1
 800742c:	6033      	str	r3, [r6, #0]
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	0699      	lsls	r1, r3, #26
 8007432:	bf42      	ittt	mi
 8007434:	6833      	ldrmi	r3, [r6, #0]
 8007436:	3302      	addmi	r3, #2
 8007438:	6033      	strmi	r3, [r6, #0]
 800743a:	6825      	ldr	r5, [r4, #0]
 800743c:	f015 0506 	ands.w	r5, r5, #6
 8007440:	d106      	bne.n	8007450 <_printf_common+0x48>
 8007442:	f104 0a19 	add.w	sl, r4, #25
 8007446:	68e3      	ldr	r3, [r4, #12]
 8007448:	6832      	ldr	r2, [r6, #0]
 800744a:	1a9b      	subs	r3, r3, r2
 800744c:	42ab      	cmp	r3, r5
 800744e:	dc28      	bgt.n	80074a2 <_printf_common+0x9a>
 8007450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007454:	1e13      	subs	r3, r2, #0
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	bf18      	it	ne
 800745a:	2301      	movne	r3, #1
 800745c:	0692      	lsls	r2, r2, #26
 800745e:	d42d      	bmi.n	80074bc <_printf_common+0xb4>
 8007460:	4649      	mov	r1, r9
 8007462:	4638      	mov	r0, r7
 8007464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007468:	47c0      	blx	r8
 800746a:	3001      	adds	r0, #1
 800746c:	d020      	beq.n	80074b0 <_printf_common+0xa8>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	68e5      	ldr	r5, [r4, #12]
 8007472:	f003 0306 	and.w	r3, r3, #6
 8007476:	2b04      	cmp	r3, #4
 8007478:	bf18      	it	ne
 800747a:	2500      	movne	r5, #0
 800747c:	6832      	ldr	r2, [r6, #0]
 800747e:	f04f 0600 	mov.w	r6, #0
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	bf08      	it	eq
 8007486:	1aad      	subeq	r5, r5, r2
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	bf08      	it	eq
 800748c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007490:	4293      	cmp	r3, r2
 8007492:	bfc4      	itt	gt
 8007494:	1a9b      	subgt	r3, r3, r2
 8007496:	18ed      	addgt	r5, r5, r3
 8007498:	341a      	adds	r4, #26
 800749a:	42b5      	cmp	r5, r6
 800749c:	d11a      	bne.n	80074d4 <_printf_common+0xcc>
 800749e:	2000      	movs	r0, #0
 80074a0:	e008      	b.n	80074b4 <_printf_common+0xac>
 80074a2:	2301      	movs	r3, #1
 80074a4:	4652      	mov	r2, sl
 80074a6:	4649      	mov	r1, r9
 80074a8:	4638      	mov	r0, r7
 80074aa:	47c0      	blx	r8
 80074ac:	3001      	adds	r0, #1
 80074ae:	d103      	bne.n	80074b8 <_printf_common+0xb0>
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295
 80074b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b8:	3501      	adds	r5, #1
 80074ba:	e7c4      	b.n	8007446 <_printf_common+0x3e>
 80074bc:	2030      	movs	r0, #48	; 0x30
 80074be:	18e1      	adds	r1, r4, r3
 80074c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074ca:	4422      	add	r2, r4
 80074cc:	3302      	adds	r3, #2
 80074ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074d2:	e7c5      	b.n	8007460 <_printf_common+0x58>
 80074d4:	2301      	movs	r3, #1
 80074d6:	4622      	mov	r2, r4
 80074d8:	4649      	mov	r1, r9
 80074da:	4638      	mov	r0, r7
 80074dc:	47c0      	blx	r8
 80074de:	3001      	adds	r0, #1
 80074e0:	d0e6      	beq.n	80074b0 <_printf_common+0xa8>
 80074e2:	3601      	adds	r6, #1
 80074e4:	e7d9      	b.n	800749a <_printf_common+0x92>
	...

080074e8 <_printf_i>:
 80074e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	460c      	mov	r4, r1
 80074ee:	7e27      	ldrb	r7, [r4, #24]
 80074f0:	4691      	mov	r9, r2
 80074f2:	2f78      	cmp	r7, #120	; 0x78
 80074f4:	4680      	mov	r8, r0
 80074f6:	469a      	mov	sl, r3
 80074f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074fe:	d807      	bhi.n	8007510 <_printf_i+0x28>
 8007500:	2f62      	cmp	r7, #98	; 0x62
 8007502:	d80a      	bhi.n	800751a <_printf_i+0x32>
 8007504:	2f00      	cmp	r7, #0
 8007506:	f000 80d9 	beq.w	80076bc <_printf_i+0x1d4>
 800750a:	2f58      	cmp	r7, #88	; 0x58
 800750c:	f000 80a4 	beq.w	8007658 <_printf_i+0x170>
 8007510:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007518:	e03a      	b.n	8007590 <_printf_i+0xa8>
 800751a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800751e:	2b15      	cmp	r3, #21
 8007520:	d8f6      	bhi.n	8007510 <_printf_i+0x28>
 8007522:	a001      	add	r0, pc, #4	; (adr r0, 8007528 <_printf_i+0x40>)
 8007524:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007528:	08007581 	.word	0x08007581
 800752c:	08007595 	.word	0x08007595
 8007530:	08007511 	.word	0x08007511
 8007534:	08007511 	.word	0x08007511
 8007538:	08007511 	.word	0x08007511
 800753c:	08007511 	.word	0x08007511
 8007540:	08007595 	.word	0x08007595
 8007544:	08007511 	.word	0x08007511
 8007548:	08007511 	.word	0x08007511
 800754c:	08007511 	.word	0x08007511
 8007550:	08007511 	.word	0x08007511
 8007554:	080076a3 	.word	0x080076a3
 8007558:	080075c5 	.word	0x080075c5
 800755c:	08007685 	.word	0x08007685
 8007560:	08007511 	.word	0x08007511
 8007564:	08007511 	.word	0x08007511
 8007568:	080076c5 	.word	0x080076c5
 800756c:	08007511 	.word	0x08007511
 8007570:	080075c5 	.word	0x080075c5
 8007574:	08007511 	.word	0x08007511
 8007578:	08007511 	.word	0x08007511
 800757c:	0800768d 	.word	0x0800768d
 8007580:	680b      	ldr	r3, [r1, #0]
 8007582:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007586:	1d1a      	adds	r2, r3, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	600a      	str	r2, [r1, #0]
 800758c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007590:	2301      	movs	r3, #1
 8007592:	e0a4      	b.n	80076de <_printf_i+0x1f6>
 8007594:	6825      	ldr	r5, [r4, #0]
 8007596:	6808      	ldr	r0, [r1, #0]
 8007598:	062e      	lsls	r6, r5, #24
 800759a:	f100 0304 	add.w	r3, r0, #4
 800759e:	d50a      	bpl.n	80075b6 <_printf_i+0xce>
 80075a0:	6805      	ldr	r5, [r0, #0]
 80075a2:	600b      	str	r3, [r1, #0]
 80075a4:	2d00      	cmp	r5, #0
 80075a6:	da03      	bge.n	80075b0 <_printf_i+0xc8>
 80075a8:	232d      	movs	r3, #45	; 0x2d
 80075aa:	426d      	negs	r5, r5
 80075ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b0:	230a      	movs	r3, #10
 80075b2:	485e      	ldr	r0, [pc, #376]	; (800772c <_printf_i+0x244>)
 80075b4:	e019      	b.n	80075ea <_printf_i+0x102>
 80075b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075ba:	6805      	ldr	r5, [r0, #0]
 80075bc:	600b      	str	r3, [r1, #0]
 80075be:	bf18      	it	ne
 80075c0:	b22d      	sxthne	r5, r5
 80075c2:	e7ef      	b.n	80075a4 <_printf_i+0xbc>
 80075c4:	680b      	ldr	r3, [r1, #0]
 80075c6:	6825      	ldr	r5, [r4, #0]
 80075c8:	1d18      	adds	r0, r3, #4
 80075ca:	6008      	str	r0, [r1, #0]
 80075cc:	0628      	lsls	r0, r5, #24
 80075ce:	d501      	bpl.n	80075d4 <_printf_i+0xec>
 80075d0:	681d      	ldr	r5, [r3, #0]
 80075d2:	e002      	b.n	80075da <_printf_i+0xf2>
 80075d4:	0669      	lsls	r1, r5, #25
 80075d6:	d5fb      	bpl.n	80075d0 <_printf_i+0xe8>
 80075d8:	881d      	ldrh	r5, [r3, #0]
 80075da:	2f6f      	cmp	r7, #111	; 0x6f
 80075dc:	bf0c      	ite	eq
 80075de:	2308      	moveq	r3, #8
 80075e0:	230a      	movne	r3, #10
 80075e2:	4852      	ldr	r0, [pc, #328]	; (800772c <_printf_i+0x244>)
 80075e4:	2100      	movs	r1, #0
 80075e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ea:	6866      	ldr	r6, [r4, #4]
 80075ec:	2e00      	cmp	r6, #0
 80075ee:	bfa8      	it	ge
 80075f0:	6821      	ldrge	r1, [r4, #0]
 80075f2:	60a6      	str	r6, [r4, #8]
 80075f4:	bfa4      	itt	ge
 80075f6:	f021 0104 	bicge.w	r1, r1, #4
 80075fa:	6021      	strge	r1, [r4, #0]
 80075fc:	b90d      	cbnz	r5, 8007602 <_printf_i+0x11a>
 80075fe:	2e00      	cmp	r6, #0
 8007600:	d04d      	beq.n	800769e <_printf_i+0x1b6>
 8007602:	4616      	mov	r6, r2
 8007604:	fbb5 f1f3 	udiv	r1, r5, r3
 8007608:	fb03 5711 	mls	r7, r3, r1, r5
 800760c:	5dc7      	ldrb	r7, [r0, r7]
 800760e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007612:	462f      	mov	r7, r5
 8007614:	42bb      	cmp	r3, r7
 8007616:	460d      	mov	r5, r1
 8007618:	d9f4      	bls.n	8007604 <_printf_i+0x11c>
 800761a:	2b08      	cmp	r3, #8
 800761c:	d10b      	bne.n	8007636 <_printf_i+0x14e>
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	07df      	lsls	r7, r3, #31
 8007622:	d508      	bpl.n	8007636 <_printf_i+0x14e>
 8007624:	6923      	ldr	r3, [r4, #16]
 8007626:	6861      	ldr	r1, [r4, #4]
 8007628:	4299      	cmp	r1, r3
 800762a:	bfde      	ittt	le
 800762c:	2330      	movle	r3, #48	; 0x30
 800762e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007632:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007636:	1b92      	subs	r2, r2, r6
 8007638:	6122      	str	r2, [r4, #16]
 800763a:	464b      	mov	r3, r9
 800763c:	4621      	mov	r1, r4
 800763e:	4640      	mov	r0, r8
 8007640:	f8cd a000 	str.w	sl, [sp]
 8007644:	aa03      	add	r2, sp, #12
 8007646:	f7ff fedf 	bl	8007408 <_printf_common>
 800764a:	3001      	adds	r0, #1
 800764c:	d14c      	bne.n	80076e8 <_printf_i+0x200>
 800764e:	f04f 30ff 	mov.w	r0, #4294967295
 8007652:	b004      	add	sp, #16
 8007654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007658:	4834      	ldr	r0, [pc, #208]	; (800772c <_printf_i+0x244>)
 800765a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800765e:	680e      	ldr	r6, [r1, #0]
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	f856 5b04 	ldr.w	r5, [r6], #4
 8007666:	061f      	lsls	r7, r3, #24
 8007668:	600e      	str	r6, [r1, #0]
 800766a:	d514      	bpl.n	8007696 <_printf_i+0x1ae>
 800766c:	07d9      	lsls	r1, r3, #31
 800766e:	bf44      	itt	mi
 8007670:	f043 0320 	orrmi.w	r3, r3, #32
 8007674:	6023      	strmi	r3, [r4, #0]
 8007676:	b91d      	cbnz	r5, 8007680 <_printf_i+0x198>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	f023 0320 	bic.w	r3, r3, #32
 800767e:	6023      	str	r3, [r4, #0]
 8007680:	2310      	movs	r3, #16
 8007682:	e7af      	b.n	80075e4 <_printf_i+0xfc>
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	f043 0320 	orr.w	r3, r3, #32
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	2378      	movs	r3, #120	; 0x78
 800768e:	4828      	ldr	r0, [pc, #160]	; (8007730 <_printf_i+0x248>)
 8007690:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007694:	e7e3      	b.n	800765e <_printf_i+0x176>
 8007696:	065e      	lsls	r6, r3, #25
 8007698:	bf48      	it	mi
 800769a:	b2ad      	uxthmi	r5, r5
 800769c:	e7e6      	b.n	800766c <_printf_i+0x184>
 800769e:	4616      	mov	r6, r2
 80076a0:	e7bb      	b.n	800761a <_printf_i+0x132>
 80076a2:	680b      	ldr	r3, [r1, #0]
 80076a4:	6826      	ldr	r6, [r4, #0]
 80076a6:	1d1d      	adds	r5, r3, #4
 80076a8:	6960      	ldr	r0, [r4, #20]
 80076aa:	600d      	str	r5, [r1, #0]
 80076ac:	0635      	lsls	r5, r6, #24
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	d501      	bpl.n	80076b6 <_printf_i+0x1ce>
 80076b2:	6018      	str	r0, [r3, #0]
 80076b4:	e002      	b.n	80076bc <_printf_i+0x1d4>
 80076b6:	0671      	lsls	r1, r6, #25
 80076b8:	d5fb      	bpl.n	80076b2 <_printf_i+0x1ca>
 80076ba:	8018      	strh	r0, [r3, #0]
 80076bc:	2300      	movs	r3, #0
 80076be:	4616      	mov	r6, r2
 80076c0:	6123      	str	r3, [r4, #16]
 80076c2:	e7ba      	b.n	800763a <_printf_i+0x152>
 80076c4:	680b      	ldr	r3, [r1, #0]
 80076c6:	1d1a      	adds	r2, r3, #4
 80076c8:	600a      	str	r2, [r1, #0]
 80076ca:	681e      	ldr	r6, [r3, #0]
 80076cc:	2100      	movs	r1, #0
 80076ce:	4630      	mov	r0, r6
 80076d0:	6862      	ldr	r2, [r4, #4]
 80076d2:	f000 fed7 	bl	8008484 <memchr>
 80076d6:	b108      	cbz	r0, 80076dc <_printf_i+0x1f4>
 80076d8:	1b80      	subs	r0, r0, r6
 80076da:	6060      	str	r0, [r4, #4]
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	6123      	str	r3, [r4, #16]
 80076e0:	2300      	movs	r3, #0
 80076e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e6:	e7a8      	b.n	800763a <_printf_i+0x152>
 80076e8:	4632      	mov	r2, r6
 80076ea:	4649      	mov	r1, r9
 80076ec:	4640      	mov	r0, r8
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	47d0      	blx	sl
 80076f2:	3001      	adds	r0, #1
 80076f4:	d0ab      	beq.n	800764e <_printf_i+0x166>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	079b      	lsls	r3, r3, #30
 80076fa:	d413      	bmi.n	8007724 <_printf_i+0x23c>
 80076fc:	68e0      	ldr	r0, [r4, #12]
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	4298      	cmp	r0, r3
 8007702:	bfb8      	it	lt
 8007704:	4618      	movlt	r0, r3
 8007706:	e7a4      	b.n	8007652 <_printf_i+0x16a>
 8007708:	2301      	movs	r3, #1
 800770a:	4632      	mov	r2, r6
 800770c:	4649      	mov	r1, r9
 800770e:	4640      	mov	r0, r8
 8007710:	47d0      	blx	sl
 8007712:	3001      	adds	r0, #1
 8007714:	d09b      	beq.n	800764e <_printf_i+0x166>
 8007716:	3501      	adds	r5, #1
 8007718:	68e3      	ldr	r3, [r4, #12]
 800771a:	9903      	ldr	r1, [sp, #12]
 800771c:	1a5b      	subs	r3, r3, r1
 800771e:	42ab      	cmp	r3, r5
 8007720:	dcf2      	bgt.n	8007708 <_printf_i+0x220>
 8007722:	e7eb      	b.n	80076fc <_printf_i+0x214>
 8007724:	2500      	movs	r5, #0
 8007726:	f104 0619 	add.w	r6, r4, #25
 800772a:	e7f5      	b.n	8007718 <_printf_i+0x230>
 800772c:	08009d42 	.word	0x08009d42
 8007730:	08009d53 	.word	0x08009d53

08007734 <siprintf>:
 8007734:	b40e      	push	{r1, r2, r3}
 8007736:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800773a:	b500      	push	{lr}
 800773c:	b09c      	sub	sp, #112	; 0x70
 800773e:	ab1d      	add	r3, sp, #116	; 0x74
 8007740:	9002      	str	r0, [sp, #8]
 8007742:	9006      	str	r0, [sp, #24]
 8007744:	9107      	str	r1, [sp, #28]
 8007746:	9104      	str	r1, [sp, #16]
 8007748:	4808      	ldr	r0, [pc, #32]	; (800776c <siprintf+0x38>)
 800774a:	4909      	ldr	r1, [pc, #36]	; (8007770 <siprintf+0x3c>)
 800774c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007750:	9105      	str	r1, [sp, #20]
 8007752:	6800      	ldr	r0, [r0, #0]
 8007754:	a902      	add	r1, sp, #8
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	f001 fb42 	bl	8008de0 <_svfiprintf_r>
 800775c:	2200      	movs	r2, #0
 800775e:	9b02      	ldr	r3, [sp, #8]
 8007760:	701a      	strb	r2, [r3, #0]
 8007762:	b01c      	add	sp, #112	; 0x70
 8007764:	f85d eb04 	ldr.w	lr, [sp], #4
 8007768:	b003      	add	sp, #12
 800776a:	4770      	bx	lr
 800776c:	2000003c 	.word	0x2000003c
 8007770:	ffff0208 	.word	0xffff0208

08007774 <quorem>:
 8007774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	6903      	ldr	r3, [r0, #16]
 800777a:	690c      	ldr	r4, [r1, #16]
 800777c:	4607      	mov	r7, r0
 800777e:	42a3      	cmp	r3, r4
 8007780:	f2c0 8083 	blt.w	800788a <quorem+0x116>
 8007784:	3c01      	subs	r4, #1
 8007786:	f100 0514 	add.w	r5, r0, #20
 800778a:	f101 0814 	add.w	r8, r1, #20
 800778e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007792:	9301      	str	r3, [sp, #4]
 8007794:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007798:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800779c:	3301      	adds	r3, #1
 800779e:	429a      	cmp	r2, r3
 80077a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80077a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077ac:	d332      	bcc.n	8007814 <quorem+0xa0>
 80077ae:	f04f 0e00 	mov.w	lr, #0
 80077b2:	4640      	mov	r0, r8
 80077b4:	46ac      	mov	ip, r5
 80077b6:	46f2      	mov	sl, lr
 80077b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80077bc:	b293      	uxth	r3, r2
 80077be:	fb06 e303 	mla	r3, r6, r3, lr
 80077c2:	0c12      	lsrs	r2, r2, #16
 80077c4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80077c8:	fb06 e202 	mla	r2, r6, r2, lr
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	ebaa 0303 	sub.w	r3, sl, r3
 80077d2:	f8dc a000 	ldr.w	sl, [ip]
 80077d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077da:	fa1f fa8a 	uxth.w	sl, sl
 80077de:	4453      	add	r3, sl
 80077e0:	fa1f fa82 	uxth.w	sl, r2
 80077e4:	f8dc 2000 	ldr.w	r2, [ip]
 80077e8:	4581      	cmp	r9, r0
 80077ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80077ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077fc:	f84c 3b04 	str.w	r3, [ip], #4
 8007800:	d2da      	bcs.n	80077b8 <quorem+0x44>
 8007802:	f855 300b 	ldr.w	r3, [r5, fp]
 8007806:	b92b      	cbnz	r3, 8007814 <quorem+0xa0>
 8007808:	9b01      	ldr	r3, [sp, #4]
 800780a:	3b04      	subs	r3, #4
 800780c:	429d      	cmp	r5, r3
 800780e:	461a      	mov	r2, r3
 8007810:	d32f      	bcc.n	8007872 <quorem+0xfe>
 8007812:	613c      	str	r4, [r7, #16]
 8007814:	4638      	mov	r0, r7
 8007816:	f001 f8cb 	bl	80089b0 <__mcmp>
 800781a:	2800      	cmp	r0, #0
 800781c:	db25      	blt.n	800786a <quorem+0xf6>
 800781e:	4628      	mov	r0, r5
 8007820:	f04f 0c00 	mov.w	ip, #0
 8007824:	3601      	adds	r6, #1
 8007826:	f858 1b04 	ldr.w	r1, [r8], #4
 800782a:	f8d0 e000 	ldr.w	lr, [r0]
 800782e:	b28b      	uxth	r3, r1
 8007830:	ebac 0303 	sub.w	r3, ip, r3
 8007834:	fa1f f28e 	uxth.w	r2, lr
 8007838:	4413      	add	r3, r2
 800783a:	0c0a      	lsrs	r2, r1, #16
 800783c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007840:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007844:	b29b      	uxth	r3, r3
 8007846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800784a:	45c1      	cmp	r9, r8
 800784c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007850:	f840 3b04 	str.w	r3, [r0], #4
 8007854:	d2e7      	bcs.n	8007826 <quorem+0xb2>
 8007856:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800785a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800785e:	b922      	cbnz	r2, 800786a <quorem+0xf6>
 8007860:	3b04      	subs	r3, #4
 8007862:	429d      	cmp	r5, r3
 8007864:	461a      	mov	r2, r3
 8007866:	d30a      	bcc.n	800787e <quorem+0x10a>
 8007868:	613c      	str	r4, [r7, #16]
 800786a:	4630      	mov	r0, r6
 800786c:	b003      	add	sp, #12
 800786e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	3b04      	subs	r3, #4
 8007876:	2a00      	cmp	r2, #0
 8007878:	d1cb      	bne.n	8007812 <quorem+0x9e>
 800787a:	3c01      	subs	r4, #1
 800787c:	e7c6      	b.n	800780c <quorem+0x98>
 800787e:	6812      	ldr	r2, [r2, #0]
 8007880:	3b04      	subs	r3, #4
 8007882:	2a00      	cmp	r2, #0
 8007884:	d1f0      	bne.n	8007868 <quorem+0xf4>
 8007886:	3c01      	subs	r4, #1
 8007888:	e7eb      	b.n	8007862 <quorem+0xee>
 800788a:	2000      	movs	r0, #0
 800788c:	e7ee      	b.n	800786c <quorem+0xf8>
	...

08007890 <_dtoa_r>:
 8007890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007894:	4616      	mov	r6, r2
 8007896:	461f      	mov	r7, r3
 8007898:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800789a:	b099      	sub	sp, #100	; 0x64
 800789c:	4605      	mov	r5, r0
 800789e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80078a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80078a6:	b974      	cbnz	r4, 80078c6 <_dtoa_r+0x36>
 80078a8:	2010      	movs	r0, #16
 80078aa:	f000 fde3 	bl	8008474 <malloc>
 80078ae:	4602      	mov	r2, r0
 80078b0:	6268      	str	r0, [r5, #36]	; 0x24
 80078b2:	b920      	cbnz	r0, 80078be <_dtoa_r+0x2e>
 80078b4:	21ea      	movs	r1, #234	; 0xea
 80078b6:	4bae      	ldr	r3, [pc, #696]	; (8007b70 <_dtoa_r+0x2e0>)
 80078b8:	48ae      	ldr	r0, [pc, #696]	; (8007b74 <_dtoa_r+0x2e4>)
 80078ba:	f001 fba1 	bl	8009000 <__assert_func>
 80078be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078c2:	6004      	str	r4, [r0, #0]
 80078c4:	60c4      	str	r4, [r0, #12]
 80078c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078c8:	6819      	ldr	r1, [r3, #0]
 80078ca:	b151      	cbz	r1, 80078e2 <_dtoa_r+0x52>
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	2301      	movs	r3, #1
 80078d0:	4093      	lsls	r3, r2
 80078d2:	604a      	str	r2, [r1, #4]
 80078d4:	608b      	str	r3, [r1, #8]
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 fe30 	bl	800853c <_Bfree>
 80078dc:	2200      	movs	r2, #0
 80078de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	1e3b      	subs	r3, r7, #0
 80078e4:	bfaf      	iteee	ge
 80078e6:	2300      	movge	r3, #0
 80078e8:	2201      	movlt	r2, #1
 80078ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078ee:	9305      	strlt	r3, [sp, #20]
 80078f0:	bfa8      	it	ge
 80078f2:	f8c8 3000 	strge.w	r3, [r8]
 80078f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80078fa:	4b9f      	ldr	r3, [pc, #636]	; (8007b78 <_dtoa_r+0x2e8>)
 80078fc:	bfb8      	it	lt
 80078fe:	f8c8 2000 	strlt.w	r2, [r8]
 8007902:	ea33 0309 	bics.w	r3, r3, r9
 8007906:	d119      	bne.n	800793c <_dtoa_r+0xac>
 8007908:	f242 730f 	movw	r3, #9999	; 0x270f
 800790c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007914:	4333      	orrs	r3, r6
 8007916:	f000 8580 	beq.w	800841a <_dtoa_r+0xb8a>
 800791a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800791c:	b953      	cbnz	r3, 8007934 <_dtoa_r+0xa4>
 800791e:	4b97      	ldr	r3, [pc, #604]	; (8007b7c <_dtoa_r+0x2ec>)
 8007920:	e022      	b.n	8007968 <_dtoa_r+0xd8>
 8007922:	4b97      	ldr	r3, [pc, #604]	; (8007b80 <_dtoa_r+0x2f0>)
 8007924:	9308      	str	r3, [sp, #32]
 8007926:	3308      	adds	r3, #8
 8007928:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	9808      	ldr	r0, [sp, #32]
 800792e:	b019      	add	sp, #100	; 0x64
 8007930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007934:	4b91      	ldr	r3, [pc, #580]	; (8007b7c <_dtoa_r+0x2ec>)
 8007936:	9308      	str	r3, [sp, #32]
 8007938:	3303      	adds	r3, #3
 800793a:	e7f5      	b.n	8007928 <_dtoa_r+0x98>
 800793c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007940:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007948:	2200      	movs	r2, #0
 800794a:	2300      	movs	r3, #0
 800794c:	f7f9 f82c 	bl	80009a8 <__aeabi_dcmpeq>
 8007950:	4680      	mov	r8, r0
 8007952:	b158      	cbz	r0, 800796c <_dtoa_r+0xdc>
 8007954:	2301      	movs	r3, #1
 8007956:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8559 	beq.w	8008414 <_dtoa_r+0xb84>
 8007962:	4888      	ldr	r0, [pc, #544]	; (8007b84 <_dtoa_r+0x2f4>)
 8007964:	6018      	str	r0, [r3, #0]
 8007966:	1e43      	subs	r3, r0, #1
 8007968:	9308      	str	r3, [sp, #32]
 800796a:	e7df      	b.n	800792c <_dtoa_r+0x9c>
 800796c:	ab16      	add	r3, sp, #88	; 0x58
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	ab17      	add	r3, sp, #92	; 0x5c
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4628      	mov	r0, r5
 8007976:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800797a:	f001 f8c5 	bl	8008b08 <__d2b>
 800797e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007982:	4682      	mov	sl, r0
 8007984:	2c00      	cmp	r4, #0
 8007986:	d07e      	beq.n	8007a86 <_dtoa_r+0x1f6>
 8007988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800798c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800798e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007992:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007996:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800799a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800799e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80079a2:	2200      	movs	r2, #0
 80079a4:	4b78      	ldr	r3, [pc, #480]	; (8007b88 <_dtoa_r+0x2f8>)
 80079a6:	f7f8 fbdf 	bl	8000168 <__aeabi_dsub>
 80079aa:	a36b      	add	r3, pc, #428	; (adr r3, 8007b58 <_dtoa_r+0x2c8>)
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f7f8 fd92 	bl	80004d8 <__aeabi_dmul>
 80079b4:	a36a      	add	r3, pc, #424	; (adr r3, 8007b60 <_dtoa_r+0x2d0>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f7f8 fbd7 	bl	800016c <__adddf3>
 80079be:	4606      	mov	r6, r0
 80079c0:	4620      	mov	r0, r4
 80079c2:	460f      	mov	r7, r1
 80079c4:	f7f8 fd1e 	bl	8000404 <__aeabi_i2d>
 80079c8:	a367      	add	r3, pc, #412	; (adr r3, 8007b68 <_dtoa_r+0x2d8>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fd83 	bl	80004d8 <__aeabi_dmul>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4630      	mov	r0, r6
 80079d8:	4639      	mov	r1, r7
 80079da:	f7f8 fbc7 	bl	800016c <__adddf3>
 80079de:	4606      	mov	r6, r0
 80079e0:	460f      	mov	r7, r1
 80079e2:	f7f9 f829 	bl	8000a38 <__aeabi_d2iz>
 80079e6:	2200      	movs	r2, #0
 80079e8:	4681      	mov	r9, r0
 80079ea:	2300      	movs	r3, #0
 80079ec:	4630      	mov	r0, r6
 80079ee:	4639      	mov	r1, r7
 80079f0:	f7f8 ffe4 	bl	80009bc <__aeabi_dcmplt>
 80079f4:	b148      	cbz	r0, 8007a0a <_dtoa_r+0x17a>
 80079f6:	4648      	mov	r0, r9
 80079f8:	f7f8 fd04 	bl	8000404 <__aeabi_i2d>
 80079fc:	4632      	mov	r2, r6
 80079fe:	463b      	mov	r3, r7
 8007a00:	f7f8 ffd2 	bl	80009a8 <__aeabi_dcmpeq>
 8007a04:	b908      	cbnz	r0, 8007a0a <_dtoa_r+0x17a>
 8007a06:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a0a:	f1b9 0f16 	cmp.w	r9, #22
 8007a0e:	d857      	bhi.n	8007ac0 <_dtoa_r+0x230>
 8007a10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a14:	4b5d      	ldr	r3, [pc, #372]	; (8007b8c <_dtoa_r+0x2fc>)
 8007a16:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f7f8 ffcd 	bl	80009bc <__aeabi_dcmplt>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d04e      	beq.n	8007ac4 <_dtoa_r+0x234>
 8007a26:	2300      	movs	r3, #0
 8007a28:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a30:	1b1c      	subs	r4, r3, r4
 8007a32:	1e63      	subs	r3, r4, #1
 8007a34:	9309      	str	r3, [sp, #36]	; 0x24
 8007a36:	bf49      	itett	mi
 8007a38:	f1c4 0301 	rsbmi	r3, r4, #1
 8007a3c:	2300      	movpl	r3, #0
 8007a3e:	9306      	strmi	r3, [sp, #24]
 8007a40:	2300      	movmi	r3, #0
 8007a42:	bf54      	ite	pl
 8007a44:	9306      	strpl	r3, [sp, #24]
 8007a46:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007a48:	f1b9 0f00 	cmp.w	r9, #0
 8007a4c:	db3c      	blt.n	8007ac8 <_dtoa_r+0x238>
 8007a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a50:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007a54:	444b      	add	r3, r9
 8007a56:	9309      	str	r3, [sp, #36]	; 0x24
 8007a58:	2300      	movs	r3, #0
 8007a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a5e:	2b09      	cmp	r3, #9
 8007a60:	d86c      	bhi.n	8007b3c <_dtoa_r+0x2ac>
 8007a62:	2b05      	cmp	r3, #5
 8007a64:	bfc4      	itt	gt
 8007a66:	3b04      	subgt	r3, #4
 8007a68:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007a6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a6c:	bfc8      	it	gt
 8007a6e:	2400      	movgt	r4, #0
 8007a70:	f1a3 0302 	sub.w	r3, r3, #2
 8007a74:	bfd8      	it	le
 8007a76:	2401      	movle	r4, #1
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	f200 808b 	bhi.w	8007b94 <_dtoa_r+0x304>
 8007a7e:	e8df f003 	tbb	[pc, r3]
 8007a82:	4f2d      	.short	0x4f2d
 8007a84:	5b4d      	.short	0x5b4d
 8007a86:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007a8a:	441c      	add	r4, r3
 8007a8c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	bfc3      	ittte	gt
 8007a94:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a98:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007a9c:	fa09 f303 	lslgt.w	r3, r9, r3
 8007aa0:	f1c3 0320 	rsble	r3, r3, #32
 8007aa4:	bfc6      	itte	gt
 8007aa6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007aaa:	4318      	orrgt	r0, r3
 8007aac:	fa06 f003 	lslle.w	r0, r6, r3
 8007ab0:	f7f8 fc98 	bl	80003e4 <__aeabi_ui2d>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007aba:	3c01      	subs	r4, #1
 8007abc:	9313      	str	r3, [sp, #76]	; 0x4c
 8007abe:	e770      	b.n	80079a2 <_dtoa_r+0x112>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e7b3      	b.n	8007a2c <_dtoa_r+0x19c>
 8007ac4:	900f      	str	r0, [sp, #60]	; 0x3c
 8007ac6:	e7b2      	b.n	8007a2e <_dtoa_r+0x19e>
 8007ac8:	9b06      	ldr	r3, [sp, #24]
 8007aca:	eba3 0309 	sub.w	r3, r3, r9
 8007ace:	9306      	str	r3, [sp, #24]
 8007ad0:	f1c9 0300 	rsb	r3, r9, #0
 8007ad4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	930e      	str	r3, [sp, #56]	; 0x38
 8007ada:	e7bf      	b.n	8007a5c <_dtoa_r+0x1cc>
 8007adc:	2300      	movs	r3, #0
 8007ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ae0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dc59      	bgt.n	8007b9a <_dtoa_r+0x30a>
 8007ae6:	f04f 0b01 	mov.w	fp, #1
 8007aea:	465b      	mov	r3, fp
 8007aec:	f8cd b008 	str.w	fp, [sp, #8]
 8007af0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007af4:	2200      	movs	r2, #0
 8007af6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007af8:	6042      	str	r2, [r0, #4]
 8007afa:	2204      	movs	r2, #4
 8007afc:	f102 0614 	add.w	r6, r2, #20
 8007b00:	429e      	cmp	r6, r3
 8007b02:	6841      	ldr	r1, [r0, #4]
 8007b04:	d94f      	bls.n	8007ba6 <_dtoa_r+0x316>
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 fcd8 	bl	80084bc <_Balloc>
 8007b0c:	9008      	str	r0, [sp, #32]
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d14d      	bne.n	8007bae <_dtoa_r+0x31e>
 8007b12:	4602      	mov	r2, r0
 8007b14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b18:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <_dtoa_r+0x300>)
 8007b1a:	e6cd      	b.n	80078b8 <_dtoa_r+0x28>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e7de      	b.n	8007ade <_dtoa_r+0x24e>
 8007b20:	2300      	movs	r3, #0
 8007b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b26:	eb09 0b03 	add.w	fp, r9, r3
 8007b2a:	f10b 0301 	add.w	r3, fp, #1
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	9302      	str	r3, [sp, #8]
 8007b32:	bfb8      	it	lt
 8007b34:	2301      	movlt	r3, #1
 8007b36:	e7dd      	b.n	8007af4 <_dtoa_r+0x264>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e7f2      	b.n	8007b22 <_dtoa_r+0x292>
 8007b3c:	2401      	movs	r4, #1
 8007b3e:	2300      	movs	r3, #0
 8007b40:	940b      	str	r4, [sp, #44]	; 0x2c
 8007b42:	9322      	str	r3, [sp, #136]	; 0x88
 8007b44:	f04f 3bff 	mov.w	fp, #4294967295
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2312      	movs	r3, #18
 8007b4c:	f8cd b008 	str.w	fp, [sp, #8]
 8007b50:	9223      	str	r2, [sp, #140]	; 0x8c
 8007b52:	e7cf      	b.n	8007af4 <_dtoa_r+0x264>
 8007b54:	f3af 8000 	nop.w
 8007b58:	636f4361 	.word	0x636f4361
 8007b5c:	3fd287a7 	.word	0x3fd287a7
 8007b60:	8b60c8b3 	.word	0x8b60c8b3
 8007b64:	3fc68a28 	.word	0x3fc68a28
 8007b68:	509f79fb 	.word	0x509f79fb
 8007b6c:	3fd34413 	.word	0x3fd34413
 8007b70:	08009d71 	.word	0x08009d71
 8007b74:	08009d88 	.word	0x08009d88
 8007b78:	7ff00000 	.word	0x7ff00000
 8007b7c:	08009d6d 	.word	0x08009d6d
 8007b80:	08009d64 	.word	0x08009d64
 8007b84:	08009d41 	.word	0x08009d41
 8007b88:	3ff80000 	.word	0x3ff80000
 8007b8c:	08009e80 	.word	0x08009e80
 8007b90:	08009de7 	.word	0x08009de7
 8007b94:	2301      	movs	r3, #1
 8007b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b98:	e7d4      	b.n	8007b44 <_dtoa_r+0x2b4>
 8007b9a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007b9e:	465b      	mov	r3, fp
 8007ba0:	f8cd b008 	str.w	fp, [sp, #8]
 8007ba4:	e7a6      	b.n	8007af4 <_dtoa_r+0x264>
 8007ba6:	3101      	adds	r1, #1
 8007ba8:	6041      	str	r1, [r0, #4]
 8007baa:	0052      	lsls	r2, r2, #1
 8007bac:	e7a6      	b.n	8007afc <_dtoa_r+0x26c>
 8007bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bb0:	9a08      	ldr	r2, [sp, #32]
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	9b02      	ldr	r3, [sp, #8]
 8007bb6:	2b0e      	cmp	r3, #14
 8007bb8:	f200 80a8 	bhi.w	8007d0c <_dtoa_r+0x47c>
 8007bbc:	2c00      	cmp	r4, #0
 8007bbe:	f000 80a5 	beq.w	8007d0c <_dtoa_r+0x47c>
 8007bc2:	f1b9 0f00 	cmp.w	r9, #0
 8007bc6:	dd34      	ble.n	8007c32 <_dtoa_r+0x3a2>
 8007bc8:	4a9a      	ldr	r2, [pc, #616]	; (8007e34 <_dtoa_r+0x5a4>)
 8007bca:	f009 030f 	and.w	r3, r9, #15
 8007bce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007bd2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007bd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007bde:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007be2:	d016      	beq.n	8007c12 <_dtoa_r+0x382>
 8007be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007be8:	4b93      	ldr	r3, [pc, #588]	; (8007e38 <_dtoa_r+0x5a8>)
 8007bea:	2703      	movs	r7, #3
 8007bec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bf0:	f7f8 fd9c 	bl	800072c <__aeabi_ddiv>
 8007bf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bf8:	f004 040f 	and.w	r4, r4, #15
 8007bfc:	4e8e      	ldr	r6, [pc, #568]	; (8007e38 <_dtoa_r+0x5a8>)
 8007bfe:	b954      	cbnz	r4, 8007c16 <_dtoa_r+0x386>
 8007c00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c08:	f7f8 fd90 	bl	800072c <__aeabi_ddiv>
 8007c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c10:	e029      	b.n	8007c66 <_dtoa_r+0x3d6>
 8007c12:	2702      	movs	r7, #2
 8007c14:	e7f2      	b.n	8007bfc <_dtoa_r+0x36c>
 8007c16:	07e1      	lsls	r1, r4, #31
 8007c18:	d508      	bpl.n	8007c2c <_dtoa_r+0x39c>
 8007c1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c22:	f7f8 fc59 	bl	80004d8 <__aeabi_dmul>
 8007c26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c2a:	3701      	adds	r7, #1
 8007c2c:	1064      	asrs	r4, r4, #1
 8007c2e:	3608      	adds	r6, #8
 8007c30:	e7e5      	b.n	8007bfe <_dtoa_r+0x36e>
 8007c32:	f000 80a5 	beq.w	8007d80 <_dtoa_r+0x4f0>
 8007c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c3a:	f1c9 0400 	rsb	r4, r9, #0
 8007c3e:	4b7d      	ldr	r3, [pc, #500]	; (8007e34 <_dtoa_r+0x5a4>)
 8007c40:	f004 020f 	and.w	r2, r4, #15
 8007c44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f7f8 fc44 	bl	80004d8 <__aeabi_dmul>
 8007c50:	2702      	movs	r7, #2
 8007c52:	2300      	movs	r3, #0
 8007c54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c58:	4e77      	ldr	r6, [pc, #476]	; (8007e38 <_dtoa_r+0x5a8>)
 8007c5a:	1124      	asrs	r4, r4, #4
 8007c5c:	2c00      	cmp	r4, #0
 8007c5e:	f040 8084 	bne.w	8007d6a <_dtoa_r+0x4da>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1d2      	bne.n	8007c0c <_dtoa_r+0x37c>
 8007c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 808b 	beq.w	8007d84 <_dtoa_r+0x4f4>
 8007c6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007c72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007c76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4b6f      	ldr	r3, [pc, #444]	; (8007e3c <_dtoa_r+0x5ac>)
 8007c7e:	f7f8 fe9d 	bl	80009bc <__aeabi_dcmplt>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d07e      	beq.n	8007d84 <_dtoa_r+0x4f4>
 8007c86:	9b02      	ldr	r3, [sp, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d07b      	beq.n	8007d84 <_dtoa_r+0x4f4>
 8007c8c:	f1bb 0f00 	cmp.w	fp, #0
 8007c90:	dd38      	ble.n	8007d04 <_dtoa_r+0x474>
 8007c92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c96:	2200      	movs	r2, #0
 8007c98:	4b69      	ldr	r3, [pc, #420]	; (8007e40 <_dtoa_r+0x5b0>)
 8007c9a:	f7f8 fc1d 	bl	80004d8 <__aeabi_dmul>
 8007c9e:	465c      	mov	r4, fp
 8007ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ca4:	f109 38ff 	add.w	r8, r9, #4294967295
 8007ca8:	3701      	adds	r7, #1
 8007caa:	4638      	mov	r0, r7
 8007cac:	f7f8 fbaa 	bl	8000404 <__aeabi_i2d>
 8007cb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb4:	f7f8 fc10 	bl	80004d8 <__aeabi_dmul>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4b62      	ldr	r3, [pc, #392]	; (8007e44 <_dtoa_r+0x5b4>)
 8007cbc:	f7f8 fa56 	bl	800016c <__adddf3>
 8007cc0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007cc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007cc8:	9611      	str	r6, [sp, #68]	; 0x44
 8007cca:	2c00      	cmp	r4, #0
 8007ccc:	d15d      	bne.n	8007d8a <_dtoa_r+0x4fa>
 8007cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4b5c      	ldr	r3, [pc, #368]	; (8007e48 <_dtoa_r+0x5b8>)
 8007cd6:	f7f8 fa47 	bl	8000168 <__aeabi_dsub>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ce2:	4633      	mov	r3, r6
 8007ce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ce6:	f7f8 fe87 	bl	80009f8 <__aeabi_dcmpgt>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	f040 829e 	bne.w	800822c <_dtoa_r+0x99c>
 8007cf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cf6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007cfa:	f7f8 fe5f 	bl	80009bc <__aeabi_dcmplt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f040 8292 	bne.w	8008228 <_dtoa_r+0x998>
 8007d04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007d08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f2c0 8153 	blt.w	8007fba <_dtoa_r+0x72a>
 8007d14:	f1b9 0f0e 	cmp.w	r9, #14
 8007d18:	f300 814f 	bgt.w	8007fba <_dtoa_r+0x72a>
 8007d1c:	4b45      	ldr	r3, [pc, #276]	; (8007e34 <_dtoa_r+0x5a4>)
 8007d1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007d22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d26:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007d2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f280 80db 	bge.w	8007ee8 <_dtoa_r+0x658>
 8007d32:	9b02      	ldr	r3, [sp, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f300 80d7 	bgt.w	8007ee8 <_dtoa_r+0x658>
 8007d3a:	f040 8274 	bne.w	8008226 <_dtoa_r+0x996>
 8007d3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d42:	2200      	movs	r2, #0
 8007d44:	4b40      	ldr	r3, [pc, #256]	; (8007e48 <_dtoa_r+0x5b8>)
 8007d46:	f7f8 fbc7 	bl	80004d8 <__aeabi_dmul>
 8007d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d4e:	f7f8 fe49 	bl	80009e4 <__aeabi_dcmpge>
 8007d52:	9c02      	ldr	r4, [sp, #8]
 8007d54:	4626      	mov	r6, r4
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f040 824a 	bne.w	80081f0 <_dtoa_r+0x960>
 8007d5c:	2331      	movs	r3, #49	; 0x31
 8007d5e:	9f08      	ldr	r7, [sp, #32]
 8007d60:	f109 0901 	add.w	r9, r9, #1
 8007d64:	f807 3b01 	strb.w	r3, [r7], #1
 8007d68:	e246      	b.n	80081f8 <_dtoa_r+0x968>
 8007d6a:	07e2      	lsls	r2, r4, #31
 8007d6c:	d505      	bpl.n	8007d7a <_dtoa_r+0x4ea>
 8007d6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d72:	f7f8 fbb1 	bl	80004d8 <__aeabi_dmul>
 8007d76:	2301      	movs	r3, #1
 8007d78:	3701      	adds	r7, #1
 8007d7a:	1064      	asrs	r4, r4, #1
 8007d7c:	3608      	adds	r6, #8
 8007d7e:	e76d      	b.n	8007c5c <_dtoa_r+0x3cc>
 8007d80:	2702      	movs	r7, #2
 8007d82:	e770      	b.n	8007c66 <_dtoa_r+0x3d6>
 8007d84:	46c8      	mov	r8, r9
 8007d86:	9c02      	ldr	r4, [sp, #8]
 8007d88:	e78f      	b.n	8007caa <_dtoa_r+0x41a>
 8007d8a:	9908      	ldr	r1, [sp, #32]
 8007d8c:	4b29      	ldr	r3, [pc, #164]	; (8007e34 <_dtoa_r+0x5a4>)
 8007d8e:	4421      	add	r1, r4
 8007d90:	9112      	str	r1, [sp, #72]	; 0x48
 8007d92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007d9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007da0:	2900      	cmp	r1, #0
 8007da2:	d055      	beq.n	8007e50 <_dtoa_r+0x5c0>
 8007da4:	2000      	movs	r0, #0
 8007da6:	4929      	ldr	r1, [pc, #164]	; (8007e4c <_dtoa_r+0x5bc>)
 8007da8:	f7f8 fcc0 	bl	800072c <__aeabi_ddiv>
 8007dac:	463b      	mov	r3, r7
 8007dae:	4632      	mov	r2, r6
 8007db0:	f7f8 f9da 	bl	8000168 <__aeabi_dsub>
 8007db4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007db8:	9f08      	ldr	r7, [sp, #32]
 8007dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dbe:	f7f8 fe3b 	bl	8000a38 <__aeabi_d2iz>
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	f7f8 fb1e 	bl	8000404 <__aeabi_i2d>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dd0:	f7f8 f9ca 	bl	8000168 <__aeabi_dsub>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	3430      	adds	r4, #48	; 0x30
 8007dda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007de2:	f807 4b01 	strb.w	r4, [r7], #1
 8007de6:	f7f8 fde9 	bl	80009bc <__aeabi_dcmplt>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d174      	bne.n	8007ed8 <_dtoa_r+0x648>
 8007dee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df2:	2000      	movs	r0, #0
 8007df4:	4911      	ldr	r1, [pc, #68]	; (8007e3c <_dtoa_r+0x5ac>)
 8007df6:	f7f8 f9b7 	bl	8000168 <__aeabi_dsub>
 8007dfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dfe:	f7f8 fddd 	bl	80009bc <__aeabi_dcmplt>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f040 80b6 	bne.w	8007f74 <_dtoa_r+0x6e4>
 8007e08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e0a:	429f      	cmp	r7, r3
 8007e0c:	f43f af7a 	beq.w	8007d04 <_dtoa_r+0x474>
 8007e10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e14:	2200      	movs	r2, #0
 8007e16:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <_dtoa_r+0x5b0>)
 8007e18:	f7f8 fb5e 	bl	80004d8 <__aeabi_dmul>
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e26:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <_dtoa_r+0x5b0>)
 8007e28:	f7f8 fb56 	bl	80004d8 <__aeabi_dmul>
 8007e2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e30:	e7c3      	b.n	8007dba <_dtoa_r+0x52a>
 8007e32:	bf00      	nop
 8007e34:	08009e80 	.word	0x08009e80
 8007e38:	08009e58 	.word	0x08009e58
 8007e3c:	3ff00000 	.word	0x3ff00000
 8007e40:	40240000 	.word	0x40240000
 8007e44:	401c0000 	.word	0x401c0000
 8007e48:	40140000 	.word	0x40140000
 8007e4c:	3fe00000 	.word	0x3fe00000
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fb40 	bl	80004d8 <__aeabi_dmul>
 8007e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e5e:	9c08      	ldr	r4, [sp, #32]
 8007e60:	9314      	str	r3, [sp, #80]	; 0x50
 8007e62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e66:	f7f8 fde7 	bl	8000a38 <__aeabi_d2iz>
 8007e6a:	9015      	str	r0, [sp, #84]	; 0x54
 8007e6c:	f7f8 faca 	bl	8000404 <__aeabi_i2d>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e78:	f7f8 f976 	bl	8000168 <__aeabi_dsub>
 8007e7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e7e:	4606      	mov	r6, r0
 8007e80:	3330      	adds	r3, #48	; 0x30
 8007e82:	f804 3b01 	strb.w	r3, [r4], #1
 8007e86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e88:	460f      	mov	r7, r1
 8007e8a:	429c      	cmp	r4, r3
 8007e8c:	f04f 0200 	mov.w	r2, #0
 8007e90:	d124      	bne.n	8007edc <_dtoa_r+0x64c>
 8007e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e96:	4bb3      	ldr	r3, [pc, #716]	; (8008164 <_dtoa_r+0x8d4>)
 8007e98:	f7f8 f968 	bl	800016c <__adddf3>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	f7f8 fda8 	bl	80009f8 <__aeabi_dcmpgt>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d162      	bne.n	8007f72 <_dtoa_r+0x6e2>
 8007eac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	49ac      	ldr	r1, [pc, #688]	; (8008164 <_dtoa_r+0x8d4>)
 8007eb4:	f7f8 f958 	bl	8000168 <__aeabi_dsub>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	4639      	mov	r1, r7
 8007ec0:	f7f8 fd7c 	bl	80009bc <__aeabi_dcmplt>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f43f af1d 	beq.w	8007d04 <_dtoa_r+0x474>
 8007eca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007ecc:	1e7b      	subs	r3, r7, #1
 8007ece:	9314      	str	r3, [sp, #80]	; 0x50
 8007ed0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007ed4:	2b30      	cmp	r3, #48	; 0x30
 8007ed6:	d0f8      	beq.n	8007eca <_dtoa_r+0x63a>
 8007ed8:	46c1      	mov	r9, r8
 8007eda:	e03a      	b.n	8007f52 <_dtoa_r+0x6c2>
 8007edc:	4ba2      	ldr	r3, [pc, #648]	; (8008168 <_dtoa_r+0x8d8>)
 8007ede:	f7f8 fafb 	bl	80004d8 <__aeabi_dmul>
 8007ee2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ee6:	e7bc      	b.n	8007e62 <_dtoa_r+0x5d2>
 8007ee8:	9f08      	ldr	r7, [sp, #32]
 8007eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ef2:	f7f8 fc1b 	bl	800072c <__aeabi_ddiv>
 8007ef6:	f7f8 fd9f 	bl	8000a38 <__aeabi_d2iz>
 8007efa:	4604      	mov	r4, r0
 8007efc:	f7f8 fa82 	bl	8000404 <__aeabi_i2d>
 8007f00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f04:	f7f8 fae8 	bl	80004d8 <__aeabi_dmul>
 8007f08:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4602      	mov	r2, r0
 8007f10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f14:	f7f8 f928 	bl	8000168 <__aeabi_dsub>
 8007f18:	f807 6b01 	strb.w	r6, [r7], #1
 8007f1c:	9e08      	ldr	r6, [sp, #32]
 8007f1e:	9b02      	ldr	r3, [sp, #8]
 8007f20:	1bbe      	subs	r6, r7, r6
 8007f22:	42b3      	cmp	r3, r6
 8007f24:	d13a      	bne.n	8007f9c <_dtoa_r+0x70c>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	f7f8 f91f 	bl	800016c <__adddf3>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f3a:	f7f8 fd5d 	bl	80009f8 <__aeabi_dcmpgt>
 8007f3e:	bb58      	cbnz	r0, 8007f98 <_dtoa_r+0x708>
 8007f40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f48:	f7f8 fd2e 	bl	80009a8 <__aeabi_dcmpeq>
 8007f4c:	b108      	cbz	r0, 8007f52 <_dtoa_r+0x6c2>
 8007f4e:	07e1      	lsls	r1, r4, #31
 8007f50:	d422      	bmi.n	8007f98 <_dtoa_r+0x708>
 8007f52:	4628      	mov	r0, r5
 8007f54:	4651      	mov	r1, sl
 8007f56:	f000 faf1 	bl	800853c <_Bfree>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	703b      	strb	r3, [r7, #0]
 8007f5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f60:	f109 0001 	add.w	r0, r9, #1
 8007f64:	6018      	str	r0, [r3, #0]
 8007f66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f43f acdf 	beq.w	800792c <_dtoa_r+0x9c>
 8007f6e:	601f      	str	r7, [r3, #0]
 8007f70:	e4dc      	b.n	800792c <_dtoa_r+0x9c>
 8007f72:	4627      	mov	r7, r4
 8007f74:	463b      	mov	r3, r7
 8007f76:	461f      	mov	r7, r3
 8007f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f7c:	2a39      	cmp	r2, #57	; 0x39
 8007f7e:	d107      	bne.n	8007f90 <_dtoa_r+0x700>
 8007f80:	9a08      	ldr	r2, [sp, #32]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d1f7      	bne.n	8007f76 <_dtoa_r+0x6e6>
 8007f86:	2230      	movs	r2, #48	; 0x30
 8007f88:	9908      	ldr	r1, [sp, #32]
 8007f8a:	f108 0801 	add.w	r8, r8, #1
 8007f8e:	700a      	strb	r2, [r1, #0]
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	3201      	adds	r2, #1
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	e79f      	b.n	8007ed8 <_dtoa_r+0x648>
 8007f98:	46c8      	mov	r8, r9
 8007f9a:	e7eb      	b.n	8007f74 <_dtoa_r+0x6e4>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4b72      	ldr	r3, [pc, #456]	; (8008168 <_dtoa_r+0x8d8>)
 8007fa0:	f7f8 fa9a 	bl	80004d8 <__aeabi_dmul>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fac:	2200      	movs	r2, #0
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f7f8 fcfa 	bl	80009a8 <__aeabi_dcmpeq>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d098      	beq.n	8007eea <_dtoa_r+0x65a>
 8007fb8:	e7cb      	b.n	8007f52 <_dtoa_r+0x6c2>
 8007fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fbc:	2a00      	cmp	r2, #0
 8007fbe:	f000 80cd 	beq.w	800815c <_dtoa_r+0x8cc>
 8007fc2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007fc4:	2a01      	cmp	r2, #1
 8007fc6:	f300 80af 	bgt.w	8008128 <_dtoa_r+0x898>
 8007fca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007fcc:	2a00      	cmp	r2, #0
 8007fce:	f000 80a7 	beq.w	8008120 <_dtoa_r+0x890>
 8007fd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fd8:	9f06      	ldr	r7, [sp, #24]
 8007fda:	9a06      	ldr	r2, [sp, #24]
 8007fdc:	2101      	movs	r1, #1
 8007fde:	441a      	add	r2, r3
 8007fe0:	9206      	str	r2, [sp, #24]
 8007fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	441a      	add	r2, r3
 8007fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8007fea:	f000 fb61 	bl	80086b0 <__i2b>
 8007fee:	4606      	mov	r6, r0
 8007ff0:	2f00      	cmp	r7, #0
 8007ff2:	dd0c      	ble.n	800800e <_dtoa_r+0x77e>
 8007ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	dd09      	ble.n	800800e <_dtoa_r+0x77e>
 8007ffa:	42bb      	cmp	r3, r7
 8007ffc:	bfa8      	it	ge
 8007ffe:	463b      	movge	r3, r7
 8008000:	9a06      	ldr	r2, [sp, #24]
 8008002:	1aff      	subs	r7, r7, r3
 8008004:	1ad2      	subs	r2, r2, r3
 8008006:	9206      	str	r2, [sp, #24]
 8008008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	9309      	str	r3, [sp, #36]	; 0x24
 800800e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008010:	b1f3      	cbz	r3, 8008050 <_dtoa_r+0x7c0>
 8008012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 80a9 	beq.w	800816c <_dtoa_r+0x8dc>
 800801a:	2c00      	cmp	r4, #0
 800801c:	dd10      	ble.n	8008040 <_dtoa_r+0x7b0>
 800801e:	4631      	mov	r1, r6
 8008020:	4622      	mov	r2, r4
 8008022:	4628      	mov	r0, r5
 8008024:	f000 fbfe 	bl	8008824 <__pow5mult>
 8008028:	4652      	mov	r2, sl
 800802a:	4601      	mov	r1, r0
 800802c:	4606      	mov	r6, r0
 800802e:	4628      	mov	r0, r5
 8008030:	f000 fb54 	bl	80086dc <__multiply>
 8008034:	4680      	mov	r8, r0
 8008036:	4651      	mov	r1, sl
 8008038:	4628      	mov	r0, r5
 800803a:	f000 fa7f 	bl	800853c <_Bfree>
 800803e:	46c2      	mov	sl, r8
 8008040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008042:	1b1a      	subs	r2, r3, r4
 8008044:	d004      	beq.n	8008050 <_dtoa_r+0x7c0>
 8008046:	4651      	mov	r1, sl
 8008048:	4628      	mov	r0, r5
 800804a:	f000 fbeb 	bl	8008824 <__pow5mult>
 800804e:	4682      	mov	sl, r0
 8008050:	2101      	movs	r1, #1
 8008052:	4628      	mov	r0, r5
 8008054:	f000 fb2c 	bl	80086b0 <__i2b>
 8008058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800805a:	4604      	mov	r4, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	f340 8087 	ble.w	8008170 <_dtoa_r+0x8e0>
 8008062:	461a      	mov	r2, r3
 8008064:	4601      	mov	r1, r0
 8008066:	4628      	mov	r0, r5
 8008068:	f000 fbdc 	bl	8008824 <__pow5mult>
 800806c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800806e:	4604      	mov	r4, r0
 8008070:	2b01      	cmp	r3, #1
 8008072:	f340 8080 	ble.w	8008176 <_dtoa_r+0x8e6>
 8008076:	f04f 0800 	mov.w	r8, #0
 800807a:	6923      	ldr	r3, [r4, #16]
 800807c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008080:	6918      	ldr	r0, [r3, #16]
 8008082:	f000 fac7 	bl	8008614 <__hi0bits>
 8008086:	f1c0 0020 	rsb	r0, r0, #32
 800808a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808c:	4418      	add	r0, r3
 800808e:	f010 001f 	ands.w	r0, r0, #31
 8008092:	f000 8092 	beq.w	80081ba <_dtoa_r+0x92a>
 8008096:	f1c0 0320 	rsb	r3, r0, #32
 800809a:	2b04      	cmp	r3, #4
 800809c:	f340 808a 	ble.w	80081b4 <_dtoa_r+0x924>
 80080a0:	f1c0 001c 	rsb	r0, r0, #28
 80080a4:	9b06      	ldr	r3, [sp, #24]
 80080a6:	4407      	add	r7, r0
 80080a8:	4403      	add	r3, r0
 80080aa:	9306      	str	r3, [sp, #24]
 80080ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ae:	4403      	add	r3, r0
 80080b0:	9309      	str	r3, [sp, #36]	; 0x24
 80080b2:	9b06      	ldr	r3, [sp, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dd05      	ble.n	80080c4 <_dtoa_r+0x834>
 80080b8:	4651      	mov	r1, sl
 80080ba:	461a      	mov	r2, r3
 80080bc:	4628      	mov	r0, r5
 80080be:	f000 fc0b 	bl	80088d8 <__lshift>
 80080c2:	4682      	mov	sl, r0
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dd05      	ble.n	80080d6 <_dtoa_r+0x846>
 80080ca:	4621      	mov	r1, r4
 80080cc:	461a      	mov	r2, r3
 80080ce:	4628      	mov	r0, r5
 80080d0:	f000 fc02 	bl	80088d8 <__lshift>
 80080d4:	4604      	mov	r4, r0
 80080d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d070      	beq.n	80081be <_dtoa_r+0x92e>
 80080dc:	4621      	mov	r1, r4
 80080de:	4650      	mov	r0, sl
 80080e0:	f000 fc66 	bl	80089b0 <__mcmp>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	da6a      	bge.n	80081be <_dtoa_r+0x92e>
 80080e8:	2300      	movs	r3, #0
 80080ea:	4651      	mov	r1, sl
 80080ec:	220a      	movs	r2, #10
 80080ee:	4628      	mov	r0, r5
 80080f0:	f000 fa46 	bl	8008580 <__multadd>
 80080f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f6:	4682      	mov	sl, r0
 80080f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 8193 	beq.w	8008428 <_dtoa_r+0xb98>
 8008102:	4631      	mov	r1, r6
 8008104:	2300      	movs	r3, #0
 8008106:	220a      	movs	r2, #10
 8008108:	4628      	mov	r0, r5
 800810a:	f000 fa39 	bl	8008580 <__multadd>
 800810e:	f1bb 0f00 	cmp.w	fp, #0
 8008112:	4606      	mov	r6, r0
 8008114:	f300 8093 	bgt.w	800823e <_dtoa_r+0x9ae>
 8008118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800811a:	2b02      	cmp	r3, #2
 800811c:	dc57      	bgt.n	80081ce <_dtoa_r+0x93e>
 800811e:	e08e      	b.n	800823e <_dtoa_r+0x9ae>
 8008120:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008122:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008126:	e756      	b.n	8007fd6 <_dtoa_r+0x746>
 8008128:	9b02      	ldr	r3, [sp, #8]
 800812a:	1e5c      	subs	r4, r3, #1
 800812c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800812e:	42a3      	cmp	r3, r4
 8008130:	bfb7      	itett	lt
 8008132:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008134:	1b1c      	subge	r4, r3, r4
 8008136:	1ae2      	sublt	r2, r4, r3
 8008138:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800813a:	bfbe      	ittt	lt
 800813c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800813e:	189b      	addlt	r3, r3, r2
 8008140:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008142:	9b02      	ldr	r3, [sp, #8]
 8008144:	bfb8      	it	lt
 8008146:	2400      	movlt	r4, #0
 8008148:	2b00      	cmp	r3, #0
 800814a:	bfbb      	ittet	lt
 800814c:	9b06      	ldrlt	r3, [sp, #24]
 800814e:	9a02      	ldrlt	r2, [sp, #8]
 8008150:	9f06      	ldrge	r7, [sp, #24]
 8008152:	1a9f      	sublt	r7, r3, r2
 8008154:	bfac      	ite	ge
 8008156:	9b02      	ldrge	r3, [sp, #8]
 8008158:	2300      	movlt	r3, #0
 800815a:	e73e      	b.n	8007fda <_dtoa_r+0x74a>
 800815c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800815e:	9f06      	ldr	r7, [sp, #24]
 8008160:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008162:	e745      	b.n	8007ff0 <_dtoa_r+0x760>
 8008164:	3fe00000 	.word	0x3fe00000
 8008168:	40240000 	.word	0x40240000
 800816c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800816e:	e76a      	b.n	8008046 <_dtoa_r+0x7b6>
 8008170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008172:	2b01      	cmp	r3, #1
 8008174:	dc19      	bgt.n	80081aa <_dtoa_r+0x91a>
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	b9bb      	cbnz	r3, 80081aa <_dtoa_r+0x91a>
 800817a:	9b05      	ldr	r3, [sp, #20]
 800817c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008180:	b99b      	cbnz	r3, 80081aa <_dtoa_r+0x91a>
 8008182:	9b05      	ldr	r3, [sp, #20]
 8008184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008188:	0d1b      	lsrs	r3, r3, #20
 800818a:	051b      	lsls	r3, r3, #20
 800818c:	b183      	cbz	r3, 80081b0 <_dtoa_r+0x920>
 800818e:	f04f 0801 	mov.w	r8, #1
 8008192:	9b06      	ldr	r3, [sp, #24]
 8008194:	3301      	adds	r3, #1
 8008196:	9306      	str	r3, [sp, #24]
 8008198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819a:	3301      	adds	r3, #1
 800819c:	9309      	str	r3, [sp, #36]	; 0x24
 800819e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f47f af6a 	bne.w	800807a <_dtoa_r+0x7ea>
 80081a6:	2001      	movs	r0, #1
 80081a8:	e76f      	b.n	800808a <_dtoa_r+0x7fa>
 80081aa:	f04f 0800 	mov.w	r8, #0
 80081ae:	e7f6      	b.n	800819e <_dtoa_r+0x90e>
 80081b0:	4698      	mov	r8, r3
 80081b2:	e7f4      	b.n	800819e <_dtoa_r+0x90e>
 80081b4:	f43f af7d 	beq.w	80080b2 <_dtoa_r+0x822>
 80081b8:	4618      	mov	r0, r3
 80081ba:	301c      	adds	r0, #28
 80081bc:	e772      	b.n	80080a4 <_dtoa_r+0x814>
 80081be:	9b02      	ldr	r3, [sp, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc36      	bgt.n	8008232 <_dtoa_r+0x9a2>
 80081c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	dd33      	ble.n	8008232 <_dtoa_r+0x9a2>
 80081ca:	f8dd b008 	ldr.w	fp, [sp, #8]
 80081ce:	f1bb 0f00 	cmp.w	fp, #0
 80081d2:	d10d      	bne.n	80081f0 <_dtoa_r+0x960>
 80081d4:	4621      	mov	r1, r4
 80081d6:	465b      	mov	r3, fp
 80081d8:	2205      	movs	r2, #5
 80081da:	4628      	mov	r0, r5
 80081dc:	f000 f9d0 	bl	8008580 <__multadd>
 80081e0:	4601      	mov	r1, r0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4650      	mov	r0, sl
 80081e6:	f000 fbe3 	bl	80089b0 <__mcmp>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	f73f adb6 	bgt.w	8007d5c <_dtoa_r+0x4cc>
 80081f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081f2:	9f08      	ldr	r7, [sp, #32]
 80081f4:	ea6f 0903 	mvn.w	r9, r3
 80081f8:	f04f 0800 	mov.w	r8, #0
 80081fc:	4621      	mov	r1, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 f99c 	bl	800853c <_Bfree>
 8008204:	2e00      	cmp	r6, #0
 8008206:	f43f aea4 	beq.w	8007f52 <_dtoa_r+0x6c2>
 800820a:	f1b8 0f00 	cmp.w	r8, #0
 800820e:	d005      	beq.n	800821c <_dtoa_r+0x98c>
 8008210:	45b0      	cmp	r8, r6
 8008212:	d003      	beq.n	800821c <_dtoa_r+0x98c>
 8008214:	4641      	mov	r1, r8
 8008216:	4628      	mov	r0, r5
 8008218:	f000 f990 	bl	800853c <_Bfree>
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	f000 f98c 	bl	800853c <_Bfree>
 8008224:	e695      	b.n	8007f52 <_dtoa_r+0x6c2>
 8008226:	2400      	movs	r4, #0
 8008228:	4626      	mov	r6, r4
 800822a:	e7e1      	b.n	80081f0 <_dtoa_r+0x960>
 800822c:	46c1      	mov	r9, r8
 800822e:	4626      	mov	r6, r4
 8008230:	e594      	b.n	8007d5c <_dtoa_r+0x4cc>
 8008232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008234:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 80fc 	beq.w	8008436 <_dtoa_r+0xba6>
 800823e:	2f00      	cmp	r7, #0
 8008240:	dd05      	ble.n	800824e <_dtoa_r+0x9be>
 8008242:	4631      	mov	r1, r6
 8008244:	463a      	mov	r2, r7
 8008246:	4628      	mov	r0, r5
 8008248:	f000 fb46 	bl	80088d8 <__lshift>
 800824c:	4606      	mov	r6, r0
 800824e:	f1b8 0f00 	cmp.w	r8, #0
 8008252:	d05c      	beq.n	800830e <_dtoa_r+0xa7e>
 8008254:	4628      	mov	r0, r5
 8008256:	6871      	ldr	r1, [r6, #4]
 8008258:	f000 f930 	bl	80084bc <_Balloc>
 800825c:	4607      	mov	r7, r0
 800825e:	b928      	cbnz	r0, 800826c <_dtoa_r+0x9dc>
 8008260:	4602      	mov	r2, r0
 8008262:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008266:	4b7e      	ldr	r3, [pc, #504]	; (8008460 <_dtoa_r+0xbd0>)
 8008268:	f7ff bb26 	b.w	80078b8 <_dtoa_r+0x28>
 800826c:	6932      	ldr	r2, [r6, #16]
 800826e:	f106 010c 	add.w	r1, r6, #12
 8008272:	3202      	adds	r2, #2
 8008274:	0092      	lsls	r2, r2, #2
 8008276:	300c      	adds	r0, #12
 8008278:	f000 f912 	bl	80084a0 <memcpy>
 800827c:	2201      	movs	r2, #1
 800827e:	4639      	mov	r1, r7
 8008280:	4628      	mov	r0, r5
 8008282:	f000 fb29 	bl	80088d8 <__lshift>
 8008286:	46b0      	mov	r8, r6
 8008288:	4606      	mov	r6, r0
 800828a:	9b08      	ldr	r3, [sp, #32]
 800828c:	3301      	adds	r3, #1
 800828e:	9302      	str	r3, [sp, #8]
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	445b      	add	r3, fp
 8008294:	930a      	str	r3, [sp, #40]	; 0x28
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	9309      	str	r3, [sp, #36]	; 0x24
 800829e:	9b02      	ldr	r3, [sp, #8]
 80082a0:	4621      	mov	r1, r4
 80082a2:	4650      	mov	r0, sl
 80082a4:	f103 3bff 	add.w	fp, r3, #4294967295
 80082a8:	f7ff fa64 	bl	8007774 <quorem>
 80082ac:	4603      	mov	r3, r0
 80082ae:	4641      	mov	r1, r8
 80082b0:	3330      	adds	r3, #48	; 0x30
 80082b2:	9004      	str	r0, [sp, #16]
 80082b4:	4650      	mov	r0, sl
 80082b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80082b8:	f000 fb7a 	bl	80089b0 <__mcmp>
 80082bc:	4632      	mov	r2, r6
 80082be:	9006      	str	r0, [sp, #24]
 80082c0:	4621      	mov	r1, r4
 80082c2:	4628      	mov	r0, r5
 80082c4:	f000 fb90 	bl	80089e8 <__mdiff>
 80082c8:	68c2      	ldr	r2, [r0, #12]
 80082ca:	4607      	mov	r7, r0
 80082cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ce:	bb02      	cbnz	r2, 8008312 <_dtoa_r+0xa82>
 80082d0:	4601      	mov	r1, r0
 80082d2:	4650      	mov	r0, sl
 80082d4:	f000 fb6c 	bl	80089b0 <__mcmp>
 80082d8:	4602      	mov	r2, r0
 80082da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082dc:	4639      	mov	r1, r7
 80082de:	4628      	mov	r0, r5
 80082e0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80082e4:	f000 f92a 	bl	800853c <_Bfree>
 80082e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ec:	9f02      	ldr	r7, [sp, #8]
 80082ee:	ea43 0102 	orr.w	r1, r3, r2
 80082f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f4:	430b      	orrs	r3, r1
 80082f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f8:	d10d      	bne.n	8008316 <_dtoa_r+0xa86>
 80082fa:	2b39      	cmp	r3, #57	; 0x39
 80082fc:	d027      	beq.n	800834e <_dtoa_r+0xabe>
 80082fe:	9a06      	ldr	r2, [sp, #24]
 8008300:	2a00      	cmp	r2, #0
 8008302:	dd01      	ble.n	8008308 <_dtoa_r+0xa78>
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	3331      	adds	r3, #49	; 0x31
 8008308:	f88b 3000 	strb.w	r3, [fp]
 800830c:	e776      	b.n	80081fc <_dtoa_r+0x96c>
 800830e:	4630      	mov	r0, r6
 8008310:	e7b9      	b.n	8008286 <_dtoa_r+0x9f6>
 8008312:	2201      	movs	r2, #1
 8008314:	e7e2      	b.n	80082dc <_dtoa_r+0xa4c>
 8008316:	9906      	ldr	r1, [sp, #24]
 8008318:	2900      	cmp	r1, #0
 800831a:	db04      	blt.n	8008326 <_dtoa_r+0xa96>
 800831c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800831e:	4301      	orrs	r1, r0
 8008320:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008322:	4301      	orrs	r1, r0
 8008324:	d120      	bne.n	8008368 <_dtoa_r+0xad8>
 8008326:	2a00      	cmp	r2, #0
 8008328:	ddee      	ble.n	8008308 <_dtoa_r+0xa78>
 800832a:	4651      	mov	r1, sl
 800832c:	2201      	movs	r2, #1
 800832e:	4628      	mov	r0, r5
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	f000 fad1 	bl	80088d8 <__lshift>
 8008336:	4621      	mov	r1, r4
 8008338:	4682      	mov	sl, r0
 800833a:	f000 fb39 	bl	80089b0 <__mcmp>
 800833e:	2800      	cmp	r0, #0
 8008340:	9b02      	ldr	r3, [sp, #8]
 8008342:	dc02      	bgt.n	800834a <_dtoa_r+0xaba>
 8008344:	d1e0      	bne.n	8008308 <_dtoa_r+0xa78>
 8008346:	07da      	lsls	r2, r3, #31
 8008348:	d5de      	bpl.n	8008308 <_dtoa_r+0xa78>
 800834a:	2b39      	cmp	r3, #57	; 0x39
 800834c:	d1da      	bne.n	8008304 <_dtoa_r+0xa74>
 800834e:	2339      	movs	r3, #57	; 0x39
 8008350:	f88b 3000 	strb.w	r3, [fp]
 8008354:	463b      	mov	r3, r7
 8008356:	461f      	mov	r7, r3
 8008358:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800835c:	3b01      	subs	r3, #1
 800835e:	2a39      	cmp	r2, #57	; 0x39
 8008360:	d050      	beq.n	8008404 <_dtoa_r+0xb74>
 8008362:	3201      	adds	r2, #1
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	e749      	b.n	80081fc <_dtoa_r+0x96c>
 8008368:	2a00      	cmp	r2, #0
 800836a:	dd03      	ble.n	8008374 <_dtoa_r+0xae4>
 800836c:	2b39      	cmp	r3, #57	; 0x39
 800836e:	d0ee      	beq.n	800834e <_dtoa_r+0xabe>
 8008370:	3301      	adds	r3, #1
 8008372:	e7c9      	b.n	8008308 <_dtoa_r+0xa78>
 8008374:	9a02      	ldr	r2, [sp, #8]
 8008376:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008378:	f802 3c01 	strb.w	r3, [r2, #-1]
 800837c:	428a      	cmp	r2, r1
 800837e:	d02a      	beq.n	80083d6 <_dtoa_r+0xb46>
 8008380:	4651      	mov	r1, sl
 8008382:	2300      	movs	r3, #0
 8008384:	220a      	movs	r2, #10
 8008386:	4628      	mov	r0, r5
 8008388:	f000 f8fa 	bl	8008580 <__multadd>
 800838c:	45b0      	cmp	r8, r6
 800838e:	4682      	mov	sl, r0
 8008390:	f04f 0300 	mov.w	r3, #0
 8008394:	f04f 020a 	mov.w	r2, #10
 8008398:	4641      	mov	r1, r8
 800839a:	4628      	mov	r0, r5
 800839c:	d107      	bne.n	80083ae <_dtoa_r+0xb1e>
 800839e:	f000 f8ef 	bl	8008580 <__multadd>
 80083a2:	4680      	mov	r8, r0
 80083a4:	4606      	mov	r6, r0
 80083a6:	9b02      	ldr	r3, [sp, #8]
 80083a8:	3301      	adds	r3, #1
 80083aa:	9302      	str	r3, [sp, #8]
 80083ac:	e777      	b.n	800829e <_dtoa_r+0xa0e>
 80083ae:	f000 f8e7 	bl	8008580 <__multadd>
 80083b2:	4631      	mov	r1, r6
 80083b4:	4680      	mov	r8, r0
 80083b6:	2300      	movs	r3, #0
 80083b8:	220a      	movs	r2, #10
 80083ba:	4628      	mov	r0, r5
 80083bc:	f000 f8e0 	bl	8008580 <__multadd>
 80083c0:	4606      	mov	r6, r0
 80083c2:	e7f0      	b.n	80083a6 <_dtoa_r+0xb16>
 80083c4:	f1bb 0f00 	cmp.w	fp, #0
 80083c8:	bfcc      	ite	gt
 80083ca:	465f      	movgt	r7, fp
 80083cc:	2701      	movle	r7, #1
 80083ce:	f04f 0800 	mov.w	r8, #0
 80083d2:	9a08      	ldr	r2, [sp, #32]
 80083d4:	4417      	add	r7, r2
 80083d6:	4651      	mov	r1, sl
 80083d8:	2201      	movs	r2, #1
 80083da:	4628      	mov	r0, r5
 80083dc:	9302      	str	r3, [sp, #8]
 80083de:	f000 fa7b 	bl	80088d8 <__lshift>
 80083e2:	4621      	mov	r1, r4
 80083e4:	4682      	mov	sl, r0
 80083e6:	f000 fae3 	bl	80089b0 <__mcmp>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	dcb2      	bgt.n	8008354 <_dtoa_r+0xac4>
 80083ee:	d102      	bne.n	80083f6 <_dtoa_r+0xb66>
 80083f0:	9b02      	ldr	r3, [sp, #8]
 80083f2:	07db      	lsls	r3, r3, #31
 80083f4:	d4ae      	bmi.n	8008354 <_dtoa_r+0xac4>
 80083f6:	463b      	mov	r3, r7
 80083f8:	461f      	mov	r7, r3
 80083fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083fe:	2a30      	cmp	r2, #48	; 0x30
 8008400:	d0fa      	beq.n	80083f8 <_dtoa_r+0xb68>
 8008402:	e6fb      	b.n	80081fc <_dtoa_r+0x96c>
 8008404:	9a08      	ldr	r2, [sp, #32]
 8008406:	429a      	cmp	r2, r3
 8008408:	d1a5      	bne.n	8008356 <_dtoa_r+0xac6>
 800840a:	2331      	movs	r3, #49	; 0x31
 800840c:	f109 0901 	add.w	r9, r9, #1
 8008410:	7013      	strb	r3, [r2, #0]
 8008412:	e6f3      	b.n	80081fc <_dtoa_r+0x96c>
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <_dtoa_r+0xbd4>)
 8008416:	f7ff baa7 	b.w	8007968 <_dtoa_r+0xd8>
 800841a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800841c:	2b00      	cmp	r3, #0
 800841e:	f47f aa80 	bne.w	8007922 <_dtoa_r+0x92>
 8008422:	4b11      	ldr	r3, [pc, #68]	; (8008468 <_dtoa_r+0xbd8>)
 8008424:	f7ff baa0 	b.w	8007968 <_dtoa_r+0xd8>
 8008428:	f1bb 0f00 	cmp.w	fp, #0
 800842c:	dc03      	bgt.n	8008436 <_dtoa_r+0xba6>
 800842e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008430:	2b02      	cmp	r3, #2
 8008432:	f73f aecc 	bgt.w	80081ce <_dtoa_r+0x93e>
 8008436:	9f08      	ldr	r7, [sp, #32]
 8008438:	4621      	mov	r1, r4
 800843a:	4650      	mov	r0, sl
 800843c:	f7ff f99a 	bl	8007774 <quorem>
 8008440:	9a08      	ldr	r2, [sp, #32]
 8008442:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008446:	f807 3b01 	strb.w	r3, [r7], #1
 800844a:	1aba      	subs	r2, r7, r2
 800844c:	4593      	cmp	fp, r2
 800844e:	ddb9      	ble.n	80083c4 <_dtoa_r+0xb34>
 8008450:	4651      	mov	r1, sl
 8008452:	2300      	movs	r3, #0
 8008454:	220a      	movs	r2, #10
 8008456:	4628      	mov	r0, r5
 8008458:	f000 f892 	bl	8008580 <__multadd>
 800845c:	4682      	mov	sl, r0
 800845e:	e7eb      	b.n	8008438 <_dtoa_r+0xba8>
 8008460:	08009de7 	.word	0x08009de7
 8008464:	08009d40 	.word	0x08009d40
 8008468:	08009d64 	.word	0x08009d64

0800846c <_localeconv_r>:
 800846c:	4800      	ldr	r0, [pc, #0]	; (8008470 <_localeconv_r+0x4>)
 800846e:	4770      	bx	lr
 8008470:	20000190 	.word	0x20000190

08008474 <malloc>:
 8008474:	4b02      	ldr	r3, [pc, #8]	; (8008480 <malloc+0xc>)
 8008476:	4601      	mov	r1, r0
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f000 bbfb 	b.w	8008c74 <_malloc_r>
 800847e:	bf00      	nop
 8008480:	2000003c 	.word	0x2000003c

08008484 <memchr>:
 8008484:	4603      	mov	r3, r0
 8008486:	b510      	push	{r4, lr}
 8008488:	b2c9      	uxtb	r1, r1
 800848a:	4402      	add	r2, r0
 800848c:	4293      	cmp	r3, r2
 800848e:	4618      	mov	r0, r3
 8008490:	d101      	bne.n	8008496 <memchr+0x12>
 8008492:	2000      	movs	r0, #0
 8008494:	e003      	b.n	800849e <memchr+0x1a>
 8008496:	7804      	ldrb	r4, [r0, #0]
 8008498:	3301      	adds	r3, #1
 800849a:	428c      	cmp	r4, r1
 800849c:	d1f6      	bne.n	800848c <memchr+0x8>
 800849e:	bd10      	pop	{r4, pc}

080084a0 <memcpy>:
 80084a0:	440a      	add	r2, r1
 80084a2:	4291      	cmp	r1, r2
 80084a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a8:	d100      	bne.n	80084ac <memcpy+0xc>
 80084aa:	4770      	bx	lr
 80084ac:	b510      	push	{r4, lr}
 80084ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084b2:	4291      	cmp	r1, r2
 80084b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b8:	d1f9      	bne.n	80084ae <memcpy+0xe>
 80084ba:	bd10      	pop	{r4, pc}

080084bc <_Balloc>:
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084c0:	4604      	mov	r4, r0
 80084c2:	460d      	mov	r5, r1
 80084c4:	b976      	cbnz	r6, 80084e4 <_Balloc+0x28>
 80084c6:	2010      	movs	r0, #16
 80084c8:	f7ff ffd4 	bl	8008474 <malloc>
 80084cc:	4602      	mov	r2, r0
 80084ce:	6260      	str	r0, [r4, #36]	; 0x24
 80084d0:	b920      	cbnz	r0, 80084dc <_Balloc+0x20>
 80084d2:	2166      	movs	r1, #102	; 0x66
 80084d4:	4b17      	ldr	r3, [pc, #92]	; (8008534 <_Balloc+0x78>)
 80084d6:	4818      	ldr	r0, [pc, #96]	; (8008538 <_Balloc+0x7c>)
 80084d8:	f000 fd92 	bl	8009000 <__assert_func>
 80084dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e0:	6006      	str	r6, [r0, #0]
 80084e2:	60c6      	str	r6, [r0, #12]
 80084e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084e6:	68f3      	ldr	r3, [r6, #12]
 80084e8:	b183      	cbz	r3, 800850c <_Balloc+0x50>
 80084ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084f2:	b9b8      	cbnz	r0, 8008524 <_Balloc+0x68>
 80084f4:	2101      	movs	r1, #1
 80084f6:	fa01 f605 	lsl.w	r6, r1, r5
 80084fa:	1d72      	adds	r2, r6, #5
 80084fc:	4620      	mov	r0, r4
 80084fe:	0092      	lsls	r2, r2, #2
 8008500:	f000 fb5e 	bl	8008bc0 <_calloc_r>
 8008504:	b160      	cbz	r0, 8008520 <_Balloc+0x64>
 8008506:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800850a:	e00e      	b.n	800852a <_Balloc+0x6e>
 800850c:	2221      	movs	r2, #33	; 0x21
 800850e:	2104      	movs	r1, #4
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fb55 	bl	8008bc0 <_calloc_r>
 8008516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008518:	60f0      	str	r0, [r6, #12]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1e4      	bne.n	80084ea <_Balloc+0x2e>
 8008520:	2000      	movs	r0, #0
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	6802      	ldr	r2, [r0, #0]
 8008526:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800852a:	2300      	movs	r3, #0
 800852c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008530:	e7f7      	b.n	8008522 <_Balloc+0x66>
 8008532:	bf00      	nop
 8008534:	08009d71 	.word	0x08009d71
 8008538:	08009df8 	.word	0x08009df8

0800853c <_Bfree>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008540:	4605      	mov	r5, r0
 8008542:	460c      	mov	r4, r1
 8008544:	b976      	cbnz	r6, 8008564 <_Bfree+0x28>
 8008546:	2010      	movs	r0, #16
 8008548:	f7ff ff94 	bl	8008474 <malloc>
 800854c:	4602      	mov	r2, r0
 800854e:	6268      	str	r0, [r5, #36]	; 0x24
 8008550:	b920      	cbnz	r0, 800855c <_Bfree+0x20>
 8008552:	218a      	movs	r1, #138	; 0x8a
 8008554:	4b08      	ldr	r3, [pc, #32]	; (8008578 <_Bfree+0x3c>)
 8008556:	4809      	ldr	r0, [pc, #36]	; (800857c <_Bfree+0x40>)
 8008558:	f000 fd52 	bl	8009000 <__assert_func>
 800855c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008560:	6006      	str	r6, [r0, #0]
 8008562:	60c6      	str	r6, [r0, #12]
 8008564:	b13c      	cbz	r4, 8008576 <_Bfree+0x3a>
 8008566:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008568:	6862      	ldr	r2, [r4, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008570:	6021      	str	r1, [r4, #0]
 8008572:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	08009d71 	.word	0x08009d71
 800857c:	08009df8 	.word	0x08009df8

08008580 <__multadd>:
 8008580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008584:	4698      	mov	r8, r3
 8008586:	460c      	mov	r4, r1
 8008588:	2300      	movs	r3, #0
 800858a:	690e      	ldr	r6, [r1, #16]
 800858c:	4607      	mov	r7, r0
 800858e:	f101 0014 	add.w	r0, r1, #20
 8008592:	6805      	ldr	r5, [r0, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	b2a9      	uxth	r1, r5
 8008598:	fb02 8101 	mla	r1, r2, r1, r8
 800859c:	0c2d      	lsrs	r5, r5, #16
 800859e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80085a2:	fb02 c505 	mla	r5, r2, r5, ip
 80085a6:	b289      	uxth	r1, r1
 80085a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80085ac:	429e      	cmp	r6, r3
 80085ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80085b2:	f840 1b04 	str.w	r1, [r0], #4
 80085b6:	dcec      	bgt.n	8008592 <__multadd+0x12>
 80085b8:	f1b8 0f00 	cmp.w	r8, #0
 80085bc:	d022      	beq.n	8008604 <__multadd+0x84>
 80085be:	68a3      	ldr	r3, [r4, #8]
 80085c0:	42b3      	cmp	r3, r6
 80085c2:	dc19      	bgt.n	80085f8 <__multadd+0x78>
 80085c4:	6861      	ldr	r1, [r4, #4]
 80085c6:	4638      	mov	r0, r7
 80085c8:	3101      	adds	r1, #1
 80085ca:	f7ff ff77 	bl	80084bc <_Balloc>
 80085ce:	4605      	mov	r5, r0
 80085d0:	b928      	cbnz	r0, 80085de <__multadd+0x5e>
 80085d2:	4602      	mov	r2, r0
 80085d4:	21b5      	movs	r1, #181	; 0xb5
 80085d6:	4b0d      	ldr	r3, [pc, #52]	; (800860c <__multadd+0x8c>)
 80085d8:	480d      	ldr	r0, [pc, #52]	; (8008610 <__multadd+0x90>)
 80085da:	f000 fd11 	bl	8009000 <__assert_func>
 80085de:	6922      	ldr	r2, [r4, #16]
 80085e0:	f104 010c 	add.w	r1, r4, #12
 80085e4:	3202      	adds	r2, #2
 80085e6:	0092      	lsls	r2, r2, #2
 80085e8:	300c      	adds	r0, #12
 80085ea:	f7ff ff59 	bl	80084a0 <memcpy>
 80085ee:	4621      	mov	r1, r4
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff ffa3 	bl	800853c <_Bfree>
 80085f6:	462c      	mov	r4, r5
 80085f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80085fc:	3601      	adds	r6, #1
 80085fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8008602:	6126      	str	r6, [r4, #16]
 8008604:	4620      	mov	r0, r4
 8008606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800860a:	bf00      	nop
 800860c:	08009de7 	.word	0x08009de7
 8008610:	08009df8 	.word	0x08009df8

08008614 <__hi0bits>:
 8008614:	0c02      	lsrs	r2, r0, #16
 8008616:	0412      	lsls	r2, r2, #16
 8008618:	4603      	mov	r3, r0
 800861a:	b9ca      	cbnz	r2, 8008650 <__hi0bits+0x3c>
 800861c:	0403      	lsls	r3, r0, #16
 800861e:	2010      	movs	r0, #16
 8008620:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008624:	bf04      	itt	eq
 8008626:	021b      	lsleq	r3, r3, #8
 8008628:	3008      	addeq	r0, #8
 800862a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800862e:	bf04      	itt	eq
 8008630:	011b      	lsleq	r3, r3, #4
 8008632:	3004      	addeq	r0, #4
 8008634:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008638:	bf04      	itt	eq
 800863a:	009b      	lsleq	r3, r3, #2
 800863c:	3002      	addeq	r0, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	db05      	blt.n	800864e <__hi0bits+0x3a>
 8008642:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008646:	f100 0001 	add.w	r0, r0, #1
 800864a:	bf08      	it	eq
 800864c:	2020      	moveq	r0, #32
 800864e:	4770      	bx	lr
 8008650:	2000      	movs	r0, #0
 8008652:	e7e5      	b.n	8008620 <__hi0bits+0xc>

08008654 <__lo0bits>:
 8008654:	6803      	ldr	r3, [r0, #0]
 8008656:	4602      	mov	r2, r0
 8008658:	f013 0007 	ands.w	r0, r3, #7
 800865c:	d00b      	beq.n	8008676 <__lo0bits+0x22>
 800865e:	07d9      	lsls	r1, r3, #31
 8008660:	d422      	bmi.n	80086a8 <__lo0bits+0x54>
 8008662:	0798      	lsls	r0, r3, #30
 8008664:	bf49      	itett	mi
 8008666:	085b      	lsrmi	r3, r3, #1
 8008668:	089b      	lsrpl	r3, r3, #2
 800866a:	2001      	movmi	r0, #1
 800866c:	6013      	strmi	r3, [r2, #0]
 800866e:	bf5c      	itt	pl
 8008670:	2002      	movpl	r0, #2
 8008672:	6013      	strpl	r3, [r2, #0]
 8008674:	4770      	bx	lr
 8008676:	b299      	uxth	r1, r3
 8008678:	b909      	cbnz	r1, 800867e <__lo0bits+0x2a>
 800867a:	2010      	movs	r0, #16
 800867c:	0c1b      	lsrs	r3, r3, #16
 800867e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008682:	bf04      	itt	eq
 8008684:	0a1b      	lsreq	r3, r3, #8
 8008686:	3008      	addeq	r0, #8
 8008688:	0719      	lsls	r1, r3, #28
 800868a:	bf04      	itt	eq
 800868c:	091b      	lsreq	r3, r3, #4
 800868e:	3004      	addeq	r0, #4
 8008690:	0799      	lsls	r1, r3, #30
 8008692:	bf04      	itt	eq
 8008694:	089b      	lsreq	r3, r3, #2
 8008696:	3002      	addeq	r0, #2
 8008698:	07d9      	lsls	r1, r3, #31
 800869a:	d403      	bmi.n	80086a4 <__lo0bits+0x50>
 800869c:	085b      	lsrs	r3, r3, #1
 800869e:	f100 0001 	add.w	r0, r0, #1
 80086a2:	d003      	beq.n	80086ac <__lo0bits+0x58>
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	4770      	bx	lr
 80086a8:	2000      	movs	r0, #0
 80086aa:	4770      	bx	lr
 80086ac:	2020      	movs	r0, #32
 80086ae:	4770      	bx	lr

080086b0 <__i2b>:
 80086b0:	b510      	push	{r4, lr}
 80086b2:	460c      	mov	r4, r1
 80086b4:	2101      	movs	r1, #1
 80086b6:	f7ff ff01 	bl	80084bc <_Balloc>
 80086ba:	4602      	mov	r2, r0
 80086bc:	b928      	cbnz	r0, 80086ca <__i2b+0x1a>
 80086be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086c2:	4b04      	ldr	r3, [pc, #16]	; (80086d4 <__i2b+0x24>)
 80086c4:	4804      	ldr	r0, [pc, #16]	; (80086d8 <__i2b+0x28>)
 80086c6:	f000 fc9b 	bl	8009000 <__assert_func>
 80086ca:	2301      	movs	r3, #1
 80086cc:	6144      	str	r4, [r0, #20]
 80086ce:	6103      	str	r3, [r0, #16]
 80086d0:	bd10      	pop	{r4, pc}
 80086d2:	bf00      	nop
 80086d4:	08009de7 	.word	0x08009de7
 80086d8:	08009df8 	.word	0x08009df8

080086dc <__multiply>:
 80086dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	4614      	mov	r4, r2
 80086e2:	690a      	ldr	r2, [r1, #16]
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	460d      	mov	r5, r1
 80086e8:	429a      	cmp	r2, r3
 80086ea:	bfbe      	ittt	lt
 80086ec:	460b      	movlt	r3, r1
 80086ee:	4625      	movlt	r5, r4
 80086f0:	461c      	movlt	r4, r3
 80086f2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80086f6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80086fa:	68ab      	ldr	r3, [r5, #8]
 80086fc:	6869      	ldr	r1, [r5, #4]
 80086fe:	eb0a 0709 	add.w	r7, sl, r9
 8008702:	42bb      	cmp	r3, r7
 8008704:	b085      	sub	sp, #20
 8008706:	bfb8      	it	lt
 8008708:	3101      	addlt	r1, #1
 800870a:	f7ff fed7 	bl	80084bc <_Balloc>
 800870e:	b930      	cbnz	r0, 800871e <__multiply+0x42>
 8008710:	4602      	mov	r2, r0
 8008712:	f240 115d 	movw	r1, #349	; 0x15d
 8008716:	4b41      	ldr	r3, [pc, #260]	; (800881c <__multiply+0x140>)
 8008718:	4841      	ldr	r0, [pc, #260]	; (8008820 <__multiply+0x144>)
 800871a:	f000 fc71 	bl	8009000 <__assert_func>
 800871e:	f100 0614 	add.w	r6, r0, #20
 8008722:	4633      	mov	r3, r6
 8008724:	2200      	movs	r2, #0
 8008726:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800872a:	4543      	cmp	r3, r8
 800872c:	d31e      	bcc.n	800876c <__multiply+0x90>
 800872e:	f105 0c14 	add.w	ip, r5, #20
 8008732:	f104 0314 	add.w	r3, r4, #20
 8008736:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800873a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800873e:	9202      	str	r2, [sp, #8]
 8008740:	ebac 0205 	sub.w	r2, ip, r5
 8008744:	3a15      	subs	r2, #21
 8008746:	f022 0203 	bic.w	r2, r2, #3
 800874a:	3204      	adds	r2, #4
 800874c:	f105 0115 	add.w	r1, r5, #21
 8008750:	458c      	cmp	ip, r1
 8008752:	bf38      	it	cc
 8008754:	2204      	movcc	r2, #4
 8008756:	9201      	str	r2, [sp, #4]
 8008758:	9a02      	ldr	r2, [sp, #8]
 800875a:	9303      	str	r3, [sp, #12]
 800875c:	429a      	cmp	r2, r3
 800875e:	d808      	bhi.n	8008772 <__multiply+0x96>
 8008760:	2f00      	cmp	r7, #0
 8008762:	dc55      	bgt.n	8008810 <__multiply+0x134>
 8008764:	6107      	str	r7, [r0, #16]
 8008766:	b005      	add	sp, #20
 8008768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876c:	f843 2b04 	str.w	r2, [r3], #4
 8008770:	e7db      	b.n	800872a <__multiply+0x4e>
 8008772:	f8b3 a000 	ldrh.w	sl, [r3]
 8008776:	f1ba 0f00 	cmp.w	sl, #0
 800877a:	d020      	beq.n	80087be <__multiply+0xe2>
 800877c:	46b1      	mov	r9, r6
 800877e:	2200      	movs	r2, #0
 8008780:	f105 0e14 	add.w	lr, r5, #20
 8008784:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008788:	f8d9 b000 	ldr.w	fp, [r9]
 800878c:	b2a1      	uxth	r1, r4
 800878e:	fa1f fb8b 	uxth.w	fp, fp
 8008792:	fb0a b101 	mla	r1, sl, r1, fp
 8008796:	4411      	add	r1, r2
 8008798:	f8d9 2000 	ldr.w	r2, [r9]
 800879c:	0c24      	lsrs	r4, r4, #16
 800879e:	0c12      	lsrs	r2, r2, #16
 80087a0:	fb0a 2404 	mla	r4, sl, r4, r2
 80087a4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80087a8:	b289      	uxth	r1, r1
 80087aa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80087ae:	45f4      	cmp	ip, lr
 80087b0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80087b4:	f849 1b04 	str.w	r1, [r9], #4
 80087b8:	d8e4      	bhi.n	8008784 <__multiply+0xa8>
 80087ba:	9901      	ldr	r1, [sp, #4]
 80087bc:	5072      	str	r2, [r6, r1]
 80087be:	9a03      	ldr	r2, [sp, #12]
 80087c0:	3304      	adds	r3, #4
 80087c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087c6:	f1b9 0f00 	cmp.w	r9, #0
 80087ca:	d01f      	beq.n	800880c <__multiply+0x130>
 80087cc:	46b6      	mov	lr, r6
 80087ce:	f04f 0a00 	mov.w	sl, #0
 80087d2:	6834      	ldr	r4, [r6, #0]
 80087d4:	f105 0114 	add.w	r1, r5, #20
 80087d8:	880a      	ldrh	r2, [r1, #0]
 80087da:	f8be b002 	ldrh.w	fp, [lr, #2]
 80087de:	b2a4      	uxth	r4, r4
 80087e0:	fb09 b202 	mla	r2, r9, r2, fp
 80087e4:	4492      	add	sl, r2
 80087e6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80087ea:	f84e 4b04 	str.w	r4, [lr], #4
 80087ee:	f851 4b04 	ldr.w	r4, [r1], #4
 80087f2:	f8be 2000 	ldrh.w	r2, [lr]
 80087f6:	0c24      	lsrs	r4, r4, #16
 80087f8:	fb09 2404 	mla	r4, r9, r4, r2
 80087fc:	458c      	cmp	ip, r1
 80087fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008802:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008806:	d8e7      	bhi.n	80087d8 <__multiply+0xfc>
 8008808:	9a01      	ldr	r2, [sp, #4]
 800880a:	50b4      	str	r4, [r6, r2]
 800880c:	3604      	adds	r6, #4
 800880e:	e7a3      	b.n	8008758 <__multiply+0x7c>
 8008810:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1a5      	bne.n	8008764 <__multiply+0x88>
 8008818:	3f01      	subs	r7, #1
 800881a:	e7a1      	b.n	8008760 <__multiply+0x84>
 800881c:	08009de7 	.word	0x08009de7
 8008820:	08009df8 	.word	0x08009df8

08008824 <__pow5mult>:
 8008824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008828:	4615      	mov	r5, r2
 800882a:	f012 0203 	ands.w	r2, r2, #3
 800882e:	4606      	mov	r6, r0
 8008830:	460f      	mov	r7, r1
 8008832:	d007      	beq.n	8008844 <__pow5mult+0x20>
 8008834:	4c25      	ldr	r4, [pc, #148]	; (80088cc <__pow5mult+0xa8>)
 8008836:	3a01      	subs	r2, #1
 8008838:	2300      	movs	r3, #0
 800883a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800883e:	f7ff fe9f 	bl	8008580 <__multadd>
 8008842:	4607      	mov	r7, r0
 8008844:	10ad      	asrs	r5, r5, #2
 8008846:	d03d      	beq.n	80088c4 <__pow5mult+0xa0>
 8008848:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800884a:	b97c      	cbnz	r4, 800886c <__pow5mult+0x48>
 800884c:	2010      	movs	r0, #16
 800884e:	f7ff fe11 	bl	8008474 <malloc>
 8008852:	4602      	mov	r2, r0
 8008854:	6270      	str	r0, [r6, #36]	; 0x24
 8008856:	b928      	cbnz	r0, 8008864 <__pow5mult+0x40>
 8008858:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800885c:	4b1c      	ldr	r3, [pc, #112]	; (80088d0 <__pow5mult+0xac>)
 800885e:	481d      	ldr	r0, [pc, #116]	; (80088d4 <__pow5mult+0xb0>)
 8008860:	f000 fbce 	bl	8009000 <__assert_func>
 8008864:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008868:	6004      	str	r4, [r0, #0]
 800886a:	60c4      	str	r4, [r0, #12]
 800886c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008870:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008874:	b94c      	cbnz	r4, 800888a <__pow5mult+0x66>
 8008876:	f240 2171 	movw	r1, #625	; 0x271
 800887a:	4630      	mov	r0, r6
 800887c:	f7ff ff18 	bl	80086b0 <__i2b>
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	f8c8 0008 	str.w	r0, [r8, #8]
 8008888:	6003      	str	r3, [r0, #0]
 800888a:	f04f 0900 	mov.w	r9, #0
 800888e:	07eb      	lsls	r3, r5, #31
 8008890:	d50a      	bpl.n	80088a8 <__pow5mult+0x84>
 8008892:	4639      	mov	r1, r7
 8008894:	4622      	mov	r2, r4
 8008896:	4630      	mov	r0, r6
 8008898:	f7ff ff20 	bl	80086dc <__multiply>
 800889c:	4680      	mov	r8, r0
 800889e:	4639      	mov	r1, r7
 80088a0:	4630      	mov	r0, r6
 80088a2:	f7ff fe4b 	bl	800853c <_Bfree>
 80088a6:	4647      	mov	r7, r8
 80088a8:	106d      	asrs	r5, r5, #1
 80088aa:	d00b      	beq.n	80088c4 <__pow5mult+0xa0>
 80088ac:	6820      	ldr	r0, [r4, #0]
 80088ae:	b938      	cbnz	r0, 80088c0 <__pow5mult+0x9c>
 80088b0:	4622      	mov	r2, r4
 80088b2:	4621      	mov	r1, r4
 80088b4:	4630      	mov	r0, r6
 80088b6:	f7ff ff11 	bl	80086dc <__multiply>
 80088ba:	6020      	str	r0, [r4, #0]
 80088bc:	f8c0 9000 	str.w	r9, [r0]
 80088c0:	4604      	mov	r4, r0
 80088c2:	e7e4      	b.n	800888e <__pow5mult+0x6a>
 80088c4:	4638      	mov	r0, r7
 80088c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ca:	bf00      	nop
 80088cc:	08009f48 	.word	0x08009f48
 80088d0:	08009d71 	.word	0x08009d71
 80088d4:	08009df8 	.word	0x08009df8

080088d8 <__lshift>:
 80088d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088dc:	460c      	mov	r4, r1
 80088de:	4607      	mov	r7, r0
 80088e0:	4691      	mov	r9, r2
 80088e2:	6923      	ldr	r3, [r4, #16]
 80088e4:	6849      	ldr	r1, [r1, #4]
 80088e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088ea:	68a3      	ldr	r3, [r4, #8]
 80088ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088f0:	f108 0601 	add.w	r6, r8, #1
 80088f4:	42b3      	cmp	r3, r6
 80088f6:	db0b      	blt.n	8008910 <__lshift+0x38>
 80088f8:	4638      	mov	r0, r7
 80088fa:	f7ff fddf 	bl	80084bc <_Balloc>
 80088fe:	4605      	mov	r5, r0
 8008900:	b948      	cbnz	r0, 8008916 <__lshift+0x3e>
 8008902:	4602      	mov	r2, r0
 8008904:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008908:	4b27      	ldr	r3, [pc, #156]	; (80089a8 <__lshift+0xd0>)
 800890a:	4828      	ldr	r0, [pc, #160]	; (80089ac <__lshift+0xd4>)
 800890c:	f000 fb78 	bl	8009000 <__assert_func>
 8008910:	3101      	adds	r1, #1
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	e7ee      	b.n	80088f4 <__lshift+0x1c>
 8008916:	2300      	movs	r3, #0
 8008918:	f100 0114 	add.w	r1, r0, #20
 800891c:	f100 0210 	add.w	r2, r0, #16
 8008920:	4618      	mov	r0, r3
 8008922:	4553      	cmp	r3, sl
 8008924:	db33      	blt.n	800898e <__lshift+0xb6>
 8008926:	6920      	ldr	r0, [r4, #16]
 8008928:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800892c:	f104 0314 	add.w	r3, r4, #20
 8008930:	f019 091f 	ands.w	r9, r9, #31
 8008934:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008938:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800893c:	d02b      	beq.n	8008996 <__lshift+0xbe>
 800893e:	468a      	mov	sl, r1
 8008940:	2200      	movs	r2, #0
 8008942:	f1c9 0e20 	rsb	lr, r9, #32
 8008946:	6818      	ldr	r0, [r3, #0]
 8008948:	fa00 f009 	lsl.w	r0, r0, r9
 800894c:	4302      	orrs	r2, r0
 800894e:	f84a 2b04 	str.w	r2, [sl], #4
 8008952:	f853 2b04 	ldr.w	r2, [r3], #4
 8008956:	459c      	cmp	ip, r3
 8008958:	fa22 f20e 	lsr.w	r2, r2, lr
 800895c:	d8f3      	bhi.n	8008946 <__lshift+0x6e>
 800895e:	ebac 0304 	sub.w	r3, ip, r4
 8008962:	3b15      	subs	r3, #21
 8008964:	f023 0303 	bic.w	r3, r3, #3
 8008968:	3304      	adds	r3, #4
 800896a:	f104 0015 	add.w	r0, r4, #21
 800896e:	4584      	cmp	ip, r0
 8008970:	bf38      	it	cc
 8008972:	2304      	movcc	r3, #4
 8008974:	50ca      	str	r2, [r1, r3]
 8008976:	b10a      	cbz	r2, 800897c <__lshift+0xa4>
 8008978:	f108 0602 	add.w	r6, r8, #2
 800897c:	3e01      	subs	r6, #1
 800897e:	4638      	mov	r0, r7
 8008980:	4621      	mov	r1, r4
 8008982:	612e      	str	r6, [r5, #16]
 8008984:	f7ff fdda 	bl	800853c <_Bfree>
 8008988:	4628      	mov	r0, r5
 800898a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008992:	3301      	adds	r3, #1
 8008994:	e7c5      	b.n	8008922 <__lshift+0x4a>
 8008996:	3904      	subs	r1, #4
 8008998:	f853 2b04 	ldr.w	r2, [r3], #4
 800899c:	459c      	cmp	ip, r3
 800899e:	f841 2f04 	str.w	r2, [r1, #4]!
 80089a2:	d8f9      	bhi.n	8008998 <__lshift+0xc0>
 80089a4:	e7ea      	b.n	800897c <__lshift+0xa4>
 80089a6:	bf00      	nop
 80089a8:	08009de7 	.word	0x08009de7
 80089ac:	08009df8 	.word	0x08009df8

080089b0 <__mcmp>:
 80089b0:	4603      	mov	r3, r0
 80089b2:	690a      	ldr	r2, [r1, #16]
 80089b4:	6900      	ldr	r0, [r0, #16]
 80089b6:	b530      	push	{r4, r5, lr}
 80089b8:	1a80      	subs	r0, r0, r2
 80089ba:	d10d      	bne.n	80089d8 <__mcmp+0x28>
 80089bc:	3314      	adds	r3, #20
 80089be:	3114      	adds	r1, #20
 80089c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089d0:	4295      	cmp	r5, r2
 80089d2:	d002      	beq.n	80089da <__mcmp+0x2a>
 80089d4:	d304      	bcc.n	80089e0 <__mcmp+0x30>
 80089d6:	2001      	movs	r0, #1
 80089d8:	bd30      	pop	{r4, r5, pc}
 80089da:	42a3      	cmp	r3, r4
 80089dc:	d3f4      	bcc.n	80089c8 <__mcmp+0x18>
 80089de:	e7fb      	b.n	80089d8 <__mcmp+0x28>
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	e7f8      	b.n	80089d8 <__mcmp+0x28>
	...

080089e8 <__mdiff>:
 80089e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	460c      	mov	r4, r1
 80089ee:	4606      	mov	r6, r0
 80089f0:	4611      	mov	r1, r2
 80089f2:	4620      	mov	r0, r4
 80089f4:	4692      	mov	sl, r2
 80089f6:	f7ff ffdb 	bl	80089b0 <__mcmp>
 80089fa:	1e05      	subs	r5, r0, #0
 80089fc:	d111      	bne.n	8008a22 <__mdiff+0x3a>
 80089fe:	4629      	mov	r1, r5
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff fd5b 	bl	80084bc <_Balloc>
 8008a06:	4602      	mov	r2, r0
 8008a08:	b928      	cbnz	r0, 8008a16 <__mdiff+0x2e>
 8008a0a:	f240 2132 	movw	r1, #562	; 0x232
 8008a0e:	4b3c      	ldr	r3, [pc, #240]	; (8008b00 <__mdiff+0x118>)
 8008a10:	483c      	ldr	r0, [pc, #240]	; (8008b04 <__mdiff+0x11c>)
 8008a12:	f000 faf5 	bl	8009000 <__assert_func>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a22:	bfa4      	itt	ge
 8008a24:	4653      	movge	r3, sl
 8008a26:	46a2      	movge	sl, r4
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008a2e:	bfa6      	itte	ge
 8008a30:	461c      	movge	r4, r3
 8008a32:	2500      	movge	r5, #0
 8008a34:	2501      	movlt	r5, #1
 8008a36:	f7ff fd41 	bl	80084bc <_Balloc>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	b918      	cbnz	r0, 8008a46 <__mdiff+0x5e>
 8008a3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a42:	4b2f      	ldr	r3, [pc, #188]	; (8008b00 <__mdiff+0x118>)
 8008a44:	e7e4      	b.n	8008a10 <__mdiff+0x28>
 8008a46:	f100 0814 	add.w	r8, r0, #20
 8008a4a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008a4e:	60c5      	str	r5, [r0, #12]
 8008a50:	f04f 0c00 	mov.w	ip, #0
 8008a54:	f10a 0514 	add.w	r5, sl, #20
 8008a58:	f10a 0010 	add.w	r0, sl, #16
 8008a5c:	46c2      	mov	sl, r8
 8008a5e:	6926      	ldr	r6, [r4, #16]
 8008a60:	f104 0914 	add.w	r9, r4, #20
 8008a64:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008a68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a6c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008a70:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a74:	fa1f f18b 	uxth.w	r1, fp
 8008a78:	4461      	add	r1, ip
 8008a7a:	fa1f fc83 	uxth.w	ip, r3
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	eba1 010c 	sub.w	r1, r1, ip
 8008a84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a88:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008a8c:	b289      	uxth	r1, r1
 8008a8e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008a92:	454e      	cmp	r6, r9
 8008a94:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008a98:	f84a 3b04 	str.w	r3, [sl], #4
 8008a9c:	d8e6      	bhi.n	8008a6c <__mdiff+0x84>
 8008a9e:	1b33      	subs	r3, r6, r4
 8008aa0:	3b15      	subs	r3, #21
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	3415      	adds	r4, #21
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	42a6      	cmp	r6, r4
 8008aac:	bf38      	it	cc
 8008aae:	2304      	movcc	r3, #4
 8008ab0:	441d      	add	r5, r3
 8008ab2:	4443      	add	r3, r8
 8008ab4:	461e      	mov	r6, r3
 8008ab6:	462c      	mov	r4, r5
 8008ab8:	4574      	cmp	r4, lr
 8008aba:	d30e      	bcc.n	8008ada <__mdiff+0xf2>
 8008abc:	f10e 0103 	add.w	r1, lr, #3
 8008ac0:	1b49      	subs	r1, r1, r5
 8008ac2:	f021 0103 	bic.w	r1, r1, #3
 8008ac6:	3d03      	subs	r5, #3
 8008ac8:	45ae      	cmp	lr, r5
 8008aca:	bf38      	it	cc
 8008acc:	2100      	movcc	r1, #0
 8008ace:	4419      	add	r1, r3
 8008ad0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008ad4:	b18b      	cbz	r3, 8008afa <__mdiff+0x112>
 8008ad6:	6117      	str	r7, [r2, #16]
 8008ad8:	e7a0      	b.n	8008a1c <__mdiff+0x34>
 8008ada:	f854 8b04 	ldr.w	r8, [r4], #4
 8008ade:	fa1f f188 	uxth.w	r1, r8
 8008ae2:	4461      	add	r1, ip
 8008ae4:	1408      	asrs	r0, r1, #16
 8008ae6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008aea:	b289      	uxth	r1, r1
 8008aec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008af0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008af4:	f846 1b04 	str.w	r1, [r6], #4
 8008af8:	e7de      	b.n	8008ab8 <__mdiff+0xd0>
 8008afa:	3f01      	subs	r7, #1
 8008afc:	e7e8      	b.n	8008ad0 <__mdiff+0xe8>
 8008afe:	bf00      	nop
 8008b00:	08009de7 	.word	0x08009de7
 8008b04:	08009df8 	.word	0x08009df8

08008b08 <__d2b>:
 8008b08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008b12:	4690      	mov	r8, r2
 8008b14:	461d      	mov	r5, r3
 8008b16:	f7ff fcd1 	bl	80084bc <_Balloc>
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	b930      	cbnz	r0, 8008b2c <__d2b+0x24>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	f240 310a 	movw	r1, #778	; 0x30a
 8008b24:	4b24      	ldr	r3, [pc, #144]	; (8008bb8 <__d2b+0xb0>)
 8008b26:	4825      	ldr	r0, [pc, #148]	; (8008bbc <__d2b+0xb4>)
 8008b28:	f000 fa6a 	bl	8009000 <__assert_func>
 8008b2c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008b30:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008b34:	bb2d      	cbnz	r5, 8008b82 <__d2b+0x7a>
 8008b36:	9301      	str	r3, [sp, #4]
 8008b38:	f1b8 0300 	subs.w	r3, r8, #0
 8008b3c:	d026      	beq.n	8008b8c <__d2b+0x84>
 8008b3e:	4668      	mov	r0, sp
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	f7ff fd87 	bl	8008654 <__lo0bits>
 8008b46:	9900      	ldr	r1, [sp, #0]
 8008b48:	b1f0      	cbz	r0, 8008b88 <__d2b+0x80>
 8008b4a:	9a01      	ldr	r2, [sp, #4]
 8008b4c:	f1c0 0320 	rsb	r3, r0, #32
 8008b50:	fa02 f303 	lsl.w	r3, r2, r3
 8008b54:	430b      	orrs	r3, r1
 8008b56:	40c2      	lsrs	r2, r0
 8008b58:	6163      	str	r3, [r4, #20]
 8008b5a:	9201      	str	r2, [sp, #4]
 8008b5c:	9b01      	ldr	r3, [sp, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bf14      	ite	ne
 8008b62:	2102      	movne	r1, #2
 8008b64:	2101      	moveq	r1, #1
 8008b66:	61a3      	str	r3, [r4, #24]
 8008b68:	6121      	str	r1, [r4, #16]
 8008b6a:	b1c5      	cbz	r5, 8008b9e <__d2b+0x96>
 8008b6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b70:	4405      	add	r5, r0
 8008b72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b76:	603d      	str	r5, [r7, #0]
 8008b78:	6030      	str	r0, [r6, #0]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	b002      	add	sp, #8
 8008b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b86:	e7d6      	b.n	8008b36 <__d2b+0x2e>
 8008b88:	6161      	str	r1, [r4, #20]
 8008b8a:	e7e7      	b.n	8008b5c <__d2b+0x54>
 8008b8c:	a801      	add	r0, sp, #4
 8008b8e:	f7ff fd61 	bl	8008654 <__lo0bits>
 8008b92:	2101      	movs	r1, #1
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	6121      	str	r1, [r4, #16]
 8008b98:	6163      	str	r3, [r4, #20]
 8008b9a:	3020      	adds	r0, #32
 8008b9c:	e7e5      	b.n	8008b6a <__d2b+0x62>
 8008b9e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008ba2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ba6:	6038      	str	r0, [r7, #0]
 8008ba8:	6918      	ldr	r0, [r3, #16]
 8008baa:	f7ff fd33 	bl	8008614 <__hi0bits>
 8008bae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008bb2:	6031      	str	r1, [r6, #0]
 8008bb4:	e7e1      	b.n	8008b7a <__d2b+0x72>
 8008bb6:	bf00      	nop
 8008bb8:	08009de7 	.word	0x08009de7
 8008bbc:	08009df8 	.word	0x08009df8

08008bc0 <_calloc_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	fb02 f501 	mul.w	r5, r2, r1
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f000 f854 	bl	8008c74 <_malloc_r>
 8008bcc:	4604      	mov	r4, r0
 8008bce:	b118      	cbz	r0, 8008bd8 <_calloc_r+0x18>
 8008bd0:	462a      	mov	r2, r5
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	f7fe f946 	bl	8006e64 <memset>
 8008bd8:	4620      	mov	r0, r4
 8008bda:	bd38      	pop	{r3, r4, r5, pc}

08008bdc <_free_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4605      	mov	r5, r0
 8008be0:	2900      	cmp	r1, #0
 8008be2:	d043      	beq.n	8008c6c <_free_r+0x90>
 8008be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008be8:	1f0c      	subs	r4, r1, #4
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	bfb8      	it	lt
 8008bee:	18e4      	addlt	r4, r4, r3
 8008bf0:	f000 fa62 	bl	80090b8 <__malloc_lock>
 8008bf4:	4a1e      	ldr	r2, [pc, #120]	; (8008c70 <_free_r+0x94>)
 8008bf6:	6813      	ldr	r3, [r2, #0]
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	b933      	cbnz	r3, 8008c0a <_free_r+0x2e>
 8008bfc:	6063      	str	r3, [r4, #4]
 8008bfe:	6014      	str	r4, [r2, #0]
 8008c00:	4628      	mov	r0, r5
 8008c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c06:	f000 ba5d 	b.w	80090c4 <__malloc_unlock>
 8008c0a:	42a3      	cmp	r3, r4
 8008c0c:	d90a      	bls.n	8008c24 <_free_r+0x48>
 8008c0e:	6821      	ldr	r1, [r4, #0]
 8008c10:	1862      	adds	r2, r4, r1
 8008c12:	4293      	cmp	r3, r2
 8008c14:	bf01      	itttt	eq
 8008c16:	681a      	ldreq	r2, [r3, #0]
 8008c18:	685b      	ldreq	r3, [r3, #4]
 8008c1a:	1852      	addeq	r2, r2, r1
 8008c1c:	6022      	streq	r2, [r4, #0]
 8008c1e:	6063      	str	r3, [r4, #4]
 8008c20:	6004      	str	r4, [r0, #0]
 8008c22:	e7ed      	b.n	8008c00 <_free_r+0x24>
 8008c24:	461a      	mov	r2, r3
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	b10b      	cbz	r3, 8008c2e <_free_r+0x52>
 8008c2a:	42a3      	cmp	r3, r4
 8008c2c:	d9fa      	bls.n	8008c24 <_free_r+0x48>
 8008c2e:	6811      	ldr	r1, [r2, #0]
 8008c30:	1850      	adds	r0, r2, r1
 8008c32:	42a0      	cmp	r0, r4
 8008c34:	d10b      	bne.n	8008c4e <_free_r+0x72>
 8008c36:	6820      	ldr	r0, [r4, #0]
 8008c38:	4401      	add	r1, r0
 8008c3a:	1850      	adds	r0, r2, r1
 8008c3c:	4283      	cmp	r3, r0
 8008c3e:	6011      	str	r1, [r2, #0]
 8008c40:	d1de      	bne.n	8008c00 <_free_r+0x24>
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	4401      	add	r1, r0
 8008c48:	6011      	str	r1, [r2, #0]
 8008c4a:	6053      	str	r3, [r2, #4]
 8008c4c:	e7d8      	b.n	8008c00 <_free_r+0x24>
 8008c4e:	d902      	bls.n	8008c56 <_free_r+0x7a>
 8008c50:	230c      	movs	r3, #12
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	e7d4      	b.n	8008c00 <_free_r+0x24>
 8008c56:	6820      	ldr	r0, [r4, #0]
 8008c58:	1821      	adds	r1, r4, r0
 8008c5a:	428b      	cmp	r3, r1
 8008c5c:	bf01      	itttt	eq
 8008c5e:	6819      	ldreq	r1, [r3, #0]
 8008c60:	685b      	ldreq	r3, [r3, #4]
 8008c62:	1809      	addeq	r1, r1, r0
 8008c64:	6021      	streq	r1, [r4, #0]
 8008c66:	6063      	str	r3, [r4, #4]
 8008c68:	6054      	str	r4, [r2, #4]
 8008c6a:	e7c9      	b.n	8008c00 <_free_r+0x24>
 8008c6c:	bd38      	pop	{r3, r4, r5, pc}
 8008c6e:	bf00      	nop
 8008c70:	2000027c 	.word	0x2000027c

08008c74 <_malloc_r>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	1ccd      	adds	r5, r1, #3
 8008c78:	f025 0503 	bic.w	r5, r5, #3
 8008c7c:	3508      	adds	r5, #8
 8008c7e:	2d0c      	cmp	r5, #12
 8008c80:	bf38      	it	cc
 8008c82:	250c      	movcc	r5, #12
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	4606      	mov	r6, r0
 8008c88:	db01      	blt.n	8008c8e <_malloc_r+0x1a>
 8008c8a:	42a9      	cmp	r1, r5
 8008c8c:	d903      	bls.n	8008c96 <_malloc_r+0x22>
 8008c8e:	230c      	movs	r3, #12
 8008c90:	6033      	str	r3, [r6, #0]
 8008c92:	2000      	movs	r0, #0
 8008c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c96:	f000 fa0f 	bl	80090b8 <__malloc_lock>
 8008c9a:	4921      	ldr	r1, [pc, #132]	; (8008d20 <_malloc_r+0xac>)
 8008c9c:	680a      	ldr	r2, [r1, #0]
 8008c9e:	4614      	mov	r4, r2
 8008ca0:	b99c      	cbnz	r4, 8008cca <_malloc_r+0x56>
 8008ca2:	4f20      	ldr	r7, [pc, #128]	; (8008d24 <_malloc_r+0xb0>)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	b923      	cbnz	r3, 8008cb2 <_malloc_r+0x3e>
 8008ca8:	4621      	mov	r1, r4
 8008caa:	4630      	mov	r0, r6
 8008cac:	f000 f998 	bl	8008fe0 <_sbrk_r>
 8008cb0:	6038      	str	r0, [r7, #0]
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f000 f993 	bl	8008fe0 <_sbrk_r>
 8008cba:	1c43      	adds	r3, r0, #1
 8008cbc:	d123      	bne.n	8008d06 <_malloc_r+0x92>
 8008cbe:	230c      	movs	r3, #12
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	6033      	str	r3, [r6, #0]
 8008cc4:	f000 f9fe 	bl	80090c4 <__malloc_unlock>
 8008cc8:	e7e3      	b.n	8008c92 <_malloc_r+0x1e>
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	1b5b      	subs	r3, r3, r5
 8008cce:	d417      	bmi.n	8008d00 <_malloc_r+0x8c>
 8008cd0:	2b0b      	cmp	r3, #11
 8008cd2:	d903      	bls.n	8008cdc <_malloc_r+0x68>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	441c      	add	r4, r3
 8008cd8:	6025      	str	r5, [r4, #0]
 8008cda:	e004      	b.n	8008ce6 <_malloc_r+0x72>
 8008cdc:	6863      	ldr	r3, [r4, #4]
 8008cde:	42a2      	cmp	r2, r4
 8008ce0:	bf0c      	ite	eq
 8008ce2:	600b      	streq	r3, [r1, #0]
 8008ce4:	6053      	strne	r3, [r2, #4]
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f000 f9ec 	bl	80090c4 <__malloc_unlock>
 8008cec:	f104 000b 	add.w	r0, r4, #11
 8008cf0:	1d23      	adds	r3, r4, #4
 8008cf2:	f020 0007 	bic.w	r0, r0, #7
 8008cf6:	1ac2      	subs	r2, r0, r3
 8008cf8:	d0cc      	beq.n	8008c94 <_malloc_r+0x20>
 8008cfa:	1a1b      	subs	r3, r3, r0
 8008cfc:	50a3      	str	r3, [r4, r2]
 8008cfe:	e7c9      	b.n	8008c94 <_malloc_r+0x20>
 8008d00:	4622      	mov	r2, r4
 8008d02:	6864      	ldr	r4, [r4, #4]
 8008d04:	e7cc      	b.n	8008ca0 <_malloc_r+0x2c>
 8008d06:	1cc4      	adds	r4, r0, #3
 8008d08:	f024 0403 	bic.w	r4, r4, #3
 8008d0c:	42a0      	cmp	r0, r4
 8008d0e:	d0e3      	beq.n	8008cd8 <_malloc_r+0x64>
 8008d10:	1a21      	subs	r1, r4, r0
 8008d12:	4630      	mov	r0, r6
 8008d14:	f000 f964 	bl	8008fe0 <_sbrk_r>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d1dd      	bne.n	8008cd8 <_malloc_r+0x64>
 8008d1c:	e7cf      	b.n	8008cbe <_malloc_r+0x4a>
 8008d1e:	bf00      	nop
 8008d20:	2000027c 	.word	0x2000027c
 8008d24:	20000280 	.word	0x20000280

08008d28 <__ssputs_r>:
 8008d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d2c:	688e      	ldr	r6, [r1, #8]
 8008d2e:	4682      	mov	sl, r0
 8008d30:	429e      	cmp	r6, r3
 8008d32:	460c      	mov	r4, r1
 8008d34:	4690      	mov	r8, r2
 8008d36:	461f      	mov	r7, r3
 8008d38:	d838      	bhi.n	8008dac <__ssputs_r+0x84>
 8008d3a:	898a      	ldrh	r2, [r1, #12]
 8008d3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d40:	d032      	beq.n	8008da8 <__ssputs_r+0x80>
 8008d42:	6825      	ldr	r5, [r4, #0]
 8008d44:	6909      	ldr	r1, [r1, #16]
 8008d46:	3301      	adds	r3, #1
 8008d48:	eba5 0901 	sub.w	r9, r5, r1
 8008d4c:	6965      	ldr	r5, [r4, #20]
 8008d4e:	444b      	add	r3, r9
 8008d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d58:	106d      	asrs	r5, r5, #1
 8008d5a:	429d      	cmp	r5, r3
 8008d5c:	bf38      	it	cc
 8008d5e:	461d      	movcc	r5, r3
 8008d60:	0553      	lsls	r3, r2, #21
 8008d62:	d531      	bpl.n	8008dc8 <__ssputs_r+0xa0>
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7ff ff85 	bl	8008c74 <_malloc_r>
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	b950      	cbnz	r0, 8008d84 <__ssputs_r+0x5c>
 8008d6e:	230c      	movs	r3, #12
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	f8ca 3000 	str.w	r3, [sl]
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d84:	464a      	mov	r2, r9
 8008d86:	6921      	ldr	r1, [r4, #16]
 8008d88:	f7ff fb8a 	bl	80084a0 <memcpy>
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d96:	81a3      	strh	r3, [r4, #12]
 8008d98:	6126      	str	r6, [r4, #16]
 8008d9a:	444e      	add	r6, r9
 8008d9c:	6026      	str	r6, [r4, #0]
 8008d9e:	463e      	mov	r6, r7
 8008da0:	6165      	str	r5, [r4, #20]
 8008da2:	eba5 0509 	sub.w	r5, r5, r9
 8008da6:	60a5      	str	r5, [r4, #8]
 8008da8:	42be      	cmp	r6, r7
 8008daa:	d900      	bls.n	8008dae <__ssputs_r+0x86>
 8008dac:	463e      	mov	r6, r7
 8008dae:	4632      	mov	r2, r6
 8008db0:	4641      	mov	r1, r8
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	f000 f966 	bl	8009084 <memmove>
 8008db8:	68a3      	ldr	r3, [r4, #8]
 8008dba:	6822      	ldr	r2, [r4, #0]
 8008dbc:	1b9b      	subs	r3, r3, r6
 8008dbe:	4432      	add	r2, r6
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	60a3      	str	r3, [r4, #8]
 8008dc4:	6022      	str	r2, [r4, #0]
 8008dc6:	e7db      	b.n	8008d80 <__ssputs_r+0x58>
 8008dc8:	462a      	mov	r2, r5
 8008dca:	f000 f981 	bl	80090d0 <_realloc_r>
 8008dce:	4606      	mov	r6, r0
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d1e1      	bne.n	8008d98 <__ssputs_r+0x70>
 8008dd4:	4650      	mov	r0, sl
 8008dd6:	6921      	ldr	r1, [r4, #16]
 8008dd8:	f7ff ff00 	bl	8008bdc <_free_r>
 8008ddc:	e7c7      	b.n	8008d6e <__ssputs_r+0x46>
	...

08008de0 <_svfiprintf_r>:
 8008de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de4:	4698      	mov	r8, r3
 8008de6:	898b      	ldrh	r3, [r1, #12]
 8008de8:	4607      	mov	r7, r0
 8008dea:	061b      	lsls	r3, r3, #24
 8008dec:	460d      	mov	r5, r1
 8008dee:	4614      	mov	r4, r2
 8008df0:	b09d      	sub	sp, #116	; 0x74
 8008df2:	d50e      	bpl.n	8008e12 <_svfiprintf_r+0x32>
 8008df4:	690b      	ldr	r3, [r1, #16]
 8008df6:	b963      	cbnz	r3, 8008e12 <_svfiprintf_r+0x32>
 8008df8:	2140      	movs	r1, #64	; 0x40
 8008dfa:	f7ff ff3b 	bl	8008c74 <_malloc_r>
 8008dfe:	6028      	str	r0, [r5, #0]
 8008e00:	6128      	str	r0, [r5, #16]
 8008e02:	b920      	cbnz	r0, 8008e0e <_svfiprintf_r+0x2e>
 8008e04:	230c      	movs	r3, #12
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	e0d1      	b.n	8008fb2 <_svfiprintf_r+0x1d2>
 8008e0e:	2340      	movs	r3, #64	; 0x40
 8008e10:	616b      	str	r3, [r5, #20]
 8008e12:	2300      	movs	r3, #0
 8008e14:	9309      	str	r3, [sp, #36]	; 0x24
 8008e16:	2320      	movs	r3, #32
 8008e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e1c:	2330      	movs	r3, #48	; 0x30
 8008e1e:	f04f 0901 	mov.w	r9, #1
 8008e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008fcc <_svfiprintf_r+0x1ec>
 8008e2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e2e:	4623      	mov	r3, r4
 8008e30:	469a      	mov	sl, r3
 8008e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e36:	b10a      	cbz	r2, 8008e3c <_svfiprintf_r+0x5c>
 8008e38:	2a25      	cmp	r2, #37	; 0x25
 8008e3a:	d1f9      	bne.n	8008e30 <_svfiprintf_r+0x50>
 8008e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e40:	d00b      	beq.n	8008e5a <_svfiprintf_r+0x7a>
 8008e42:	465b      	mov	r3, fp
 8008e44:	4622      	mov	r2, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	4638      	mov	r0, r7
 8008e4a:	f7ff ff6d 	bl	8008d28 <__ssputs_r>
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f000 80aa 	beq.w	8008fa8 <_svfiprintf_r+0x1c8>
 8008e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e56:	445a      	add	r2, fp
 8008e58:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 80a2 	beq.w	8008fa8 <_svfiprintf_r+0x1c8>
 8008e64:	2300      	movs	r3, #0
 8008e66:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e6e:	f10a 0a01 	add.w	sl, sl, #1
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	9307      	str	r3, [sp, #28]
 8008e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e7c:	4654      	mov	r4, sl
 8008e7e:	2205      	movs	r2, #5
 8008e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e84:	4851      	ldr	r0, [pc, #324]	; (8008fcc <_svfiprintf_r+0x1ec>)
 8008e86:	f7ff fafd 	bl	8008484 <memchr>
 8008e8a:	9a04      	ldr	r2, [sp, #16]
 8008e8c:	b9d8      	cbnz	r0, 8008ec6 <_svfiprintf_r+0xe6>
 8008e8e:	06d0      	lsls	r0, r2, #27
 8008e90:	bf44      	itt	mi
 8008e92:	2320      	movmi	r3, #32
 8008e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e98:	0711      	lsls	r1, r2, #28
 8008e9a:	bf44      	itt	mi
 8008e9c:	232b      	movmi	r3, #43	; 0x2b
 8008e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea8:	d015      	beq.n	8008ed6 <_svfiprintf_r+0xf6>
 8008eaa:	4654      	mov	r4, sl
 8008eac:	2000      	movs	r0, #0
 8008eae:	f04f 0c0a 	mov.w	ip, #10
 8008eb2:	9a07      	ldr	r2, [sp, #28]
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eba:	3b30      	subs	r3, #48	; 0x30
 8008ebc:	2b09      	cmp	r3, #9
 8008ebe:	d94e      	bls.n	8008f5e <_svfiprintf_r+0x17e>
 8008ec0:	b1b0      	cbz	r0, 8008ef0 <_svfiprintf_r+0x110>
 8008ec2:	9207      	str	r2, [sp, #28]
 8008ec4:	e014      	b.n	8008ef0 <_svfiprintf_r+0x110>
 8008ec6:	eba0 0308 	sub.w	r3, r0, r8
 8008eca:	fa09 f303 	lsl.w	r3, r9, r3
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	46a2      	mov	sl, r4
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	e7d2      	b.n	8008e7c <_svfiprintf_r+0x9c>
 8008ed6:	9b03      	ldr	r3, [sp, #12]
 8008ed8:	1d19      	adds	r1, r3, #4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	9103      	str	r1, [sp, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	bfbb      	ittet	lt
 8008ee2:	425b      	neglt	r3, r3
 8008ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ee8:	9307      	strge	r3, [sp, #28]
 8008eea:	9307      	strlt	r3, [sp, #28]
 8008eec:	bfb8      	it	lt
 8008eee:	9204      	strlt	r2, [sp, #16]
 8008ef0:	7823      	ldrb	r3, [r4, #0]
 8008ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ef4:	d10c      	bne.n	8008f10 <_svfiprintf_r+0x130>
 8008ef6:	7863      	ldrb	r3, [r4, #1]
 8008ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8008efa:	d135      	bne.n	8008f68 <_svfiprintf_r+0x188>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	3402      	adds	r4, #2
 8008f00:	1d1a      	adds	r2, r3, #4
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	9203      	str	r2, [sp, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	bfb8      	it	lt
 8008f0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f0e:	9305      	str	r3, [sp, #20]
 8008f10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fdc <_svfiprintf_r+0x1fc>
 8008f14:	2203      	movs	r2, #3
 8008f16:	4650      	mov	r0, sl
 8008f18:	7821      	ldrb	r1, [r4, #0]
 8008f1a:	f7ff fab3 	bl	8008484 <memchr>
 8008f1e:	b140      	cbz	r0, 8008f32 <_svfiprintf_r+0x152>
 8008f20:	2340      	movs	r3, #64	; 0x40
 8008f22:	eba0 000a 	sub.w	r0, r0, sl
 8008f26:	fa03 f000 	lsl.w	r0, r3, r0
 8008f2a:	9b04      	ldr	r3, [sp, #16]
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	4303      	orrs	r3, r0
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f36:	2206      	movs	r2, #6
 8008f38:	4825      	ldr	r0, [pc, #148]	; (8008fd0 <_svfiprintf_r+0x1f0>)
 8008f3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f3e:	f7ff faa1 	bl	8008484 <memchr>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d038      	beq.n	8008fb8 <_svfiprintf_r+0x1d8>
 8008f46:	4b23      	ldr	r3, [pc, #140]	; (8008fd4 <_svfiprintf_r+0x1f4>)
 8008f48:	bb1b      	cbnz	r3, 8008f92 <_svfiprintf_r+0x1b2>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	3307      	adds	r3, #7
 8008f4e:	f023 0307 	bic.w	r3, r3, #7
 8008f52:	3308      	adds	r3, #8
 8008f54:	9303      	str	r3, [sp, #12]
 8008f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f58:	4433      	add	r3, r6
 8008f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5c:	e767      	b.n	8008e2e <_svfiprintf_r+0x4e>
 8008f5e:	460c      	mov	r4, r1
 8008f60:	2001      	movs	r0, #1
 8008f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f66:	e7a5      	b.n	8008eb4 <_svfiprintf_r+0xd4>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f04f 0c0a 	mov.w	ip, #10
 8008f6e:	4619      	mov	r1, r3
 8008f70:	3401      	adds	r4, #1
 8008f72:	9305      	str	r3, [sp, #20]
 8008f74:	4620      	mov	r0, r4
 8008f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f7a:	3a30      	subs	r2, #48	; 0x30
 8008f7c:	2a09      	cmp	r2, #9
 8008f7e:	d903      	bls.n	8008f88 <_svfiprintf_r+0x1a8>
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0c5      	beq.n	8008f10 <_svfiprintf_r+0x130>
 8008f84:	9105      	str	r1, [sp, #20]
 8008f86:	e7c3      	b.n	8008f10 <_svfiprintf_r+0x130>
 8008f88:	4604      	mov	r4, r0
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f90:	e7f0      	b.n	8008f74 <_svfiprintf_r+0x194>
 8008f92:	ab03      	add	r3, sp, #12
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	462a      	mov	r2, r5
 8008f98:	4638      	mov	r0, r7
 8008f9a:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <_svfiprintf_r+0x1f8>)
 8008f9c:	a904      	add	r1, sp, #16
 8008f9e:	f7fe f807 	bl	8006fb0 <_printf_float>
 8008fa2:	1c42      	adds	r2, r0, #1
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	d1d6      	bne.n	8008f56 <_svfiprintf_r+0x176>
 8008fa8:	89ab      	ldrh	r3, [r5, #12]
 8008faa:	065b      	lsls	r3, r3, #25
 8008fac:	f53f af2c 	bmi.w	8008e08 <_svfiprintf_r+0x28>
 8008fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb2:	b01d      	add	sp, #116	; 0x74
 8008fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb8:	ab03      	add	r3, sp, #12
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	4b05      	ldr	r3, [pc, #20]	; (8008fd8 <_svfiprintf_r+0x1f8>)
 8008fc2:	a904      	add	r1, sp, #16
 8008fc4:	f7fe fa90 	bl	80074e8 <_printf_i>
 8008fc8:	e7eb      	b.n	8008fa2 <_svfiprintf_r+0x1c2>
 8008fca:	bf00      	nop
 8008fcc:	08009f54 	.word	0x08009f54
 8008fd0:	08009f5e 	.word	0x08009f5e
 8008fd4:	08006fb1 	.word	0x08006fb1
 8008fd8:	08008d29 	.word	0x08008d29
 8008fdc:	08009f5a 	.word	0x08009f5a

08008fe0 <_sbrk_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	4d05      	ldr	r5, [pc, #20]	; (8008ffc <_sbrk_r+0x1c>)
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	4608      	mov	r0, r1
 8008fea:	602b      	str	r3, [r5, #0]
 8008fec:	f7f9 fee4 	bl	8002db8 <_sbrk>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d102      	bne.n	8008ffa <_sbrk_r+0x1a>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	b103      	cbz	r3, 8008ffa <_sbrk_r+0x1a>
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	200003ac 	.word	0x200003ac

08009000 <__assert_func>:
 8009000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009002:	4614      	mov	r4, r2
 8009004:	461a      	mov	r2, r3
 8009006:	4b09      	ldr	r3, [pc, #36]	; (800902c <__assert_func+0x2c>)
 8009008:	4605      	mov	r5, r0
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68d8      	ldr	r0, [r3, #12]
 800900e:	b14c      	cbz	r4, 8009024 <__assert_func+0x24>
 8009010:	4b07      	ldr	r3, [pc, #28]	; (8009030 <__assert_func+0x30>)
 8009012:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009016:	9100      	str	r1, [sp, #0]
 8009018:	462b      	mov	r3, r5
 800901a:	4906      	ldr	r1, [pc, #24]	; (8009034 <__assert_func+0x34>)
 800901c:	f000 f80e 	bl	800903c <fiprintf>
 8009020:	f000 faa2 	bl	8009568 <abort>
 8009024:	4b04      	ldr	r3, [pc, #16]	; (8009038 <__assert_func+0x38>)
 8009026:	461c      	mov	r4, r3
 8009028:	e7f3      	b.n	8009012 <__assert_func+0x12>
 800902a:	bf00      	nop
 800902c:	2000003c 	.word	0x2000003c
 8009030:	08009f65 	.word	0x08009f65
 8009034:	08009f72 	.word	0x08009f72
 8009038:	08009fa0 	.word	0x08009fa0

0800903c <fiprintf>:
 800903c:	b40e      	push	{r1, r2, r3}
 800903e:	b503      	push	{r0, r1, lr}
 8009040:	4601      	mov	r1, r0
 8009042:	ab03      	add	r3, sp, #12
 8009044:	4805      	ldr	r0, [pc, #20]	; (800905c <fiprintf+0x20>)
 8009046:	f853 2b04 	ldr.w	r2, [r3], #4
 800904a:	6800      	ldr	r0, [r0, #0]
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	f000 f88d 	bl	800916c <_vfiprintf_r>
 8009052:	b002      	add	sp, #8
 8009054:	f85d eb04 	ldr.w	lr, [sp], #4
 8009058:	b003      	add	sp, #12
 800905a:	4770      	bx	lr
 800905c:	2000003c 	.word	0x2000003c

08009060 <__ascii_mbtowc>:
 8009060:	b082      	sub	sp, #8
 8009062:	b901      	cbnz	r1, 8009066 <__ascii_mbtowc+0x6>
 8009064:	a901      	add	r1, sp, #4
 8009066:	b142      	cbz	r2, 800907a <__ascii_mbtowc+0x1a>
 8009068:	b14b      	cbz	r3, 800907e <__ascii_mbtowc+0x1e>
 800906a:	7813      	ldrb	r3, [r2, #0]
 800906c:	600b      	str	r3, [r1, #0]
 800906e:	7812      	ldrb	r2, [r2, #0]
 8009070:	1e10      	subs	r0, r2, #0
 8009072:	bf18      	it	ne
 8009074:	2001      	movne	r0, #1
 8009076:	b002      	add	sp, #8
 8009078:	4770      	bx	lr
 800907a:	4610      	mov	r0, r2
 800907c:	e7fb      	b.n	8009076 <__ascii_mbtowc+0x16>
 800907e:	f06f 0001 	mvn.w	r0, #1
 8009082:	e7f8      	b.n	8009076 <__ascii_mbtowc+0x16>

08009084 <memmove>:
 8009084:	4288      	cmp	r0, r1
 8009086:	b510      	push	{r4, lr}
 8009088:	eb01 0402 	add.w	r4, r1, r2
 800908c:	d902      	bls.n	8009094 <memmove+0x10>
 800908e:	4284      	cmp	r4, r0
 8009090:	4623      	mov	r3, r4
 8009092:	d807      	bhi.n	80090a4 <memmove+0x20>
 8009094:	1e43      	subs	r3, r0, #1
 8009096:	42a1      	cmp	r1, r4
 8009098:	d008      	beq.n	80090ac <memmove+0x28>
 800909a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800909e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090a2:	e7f8      	b.n	8009096 <memmove+0x12>
 80090a4:	4601      	mov	r1, r0
 80090a6:	4402      	add	r2, r0
 80090a8:	428a      	cmp	r2, r1
 80090aa:	d100      	bne.n	80090ae <memmove+0x2a>
 80090ac:	bd10      	pop	{r4, pc}
 80090ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090b6:	e7f7      	b.n	80090a8 <memmove+0x24>

080090b8 <__malloc_lock>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__malloc_lock+0x8>)
 80090ba:	f000 bc15 	b.w	80098e8 <__retarget_lock_acquire_recursive>
 80090be:	bf00      	nop
 80090c0:	200003b4 	.word	0x200003b4

080090c4 <__malloc_unlock>:
 80090c4:	4801      	ldr	r0, [pc, #4]	; (80090cc <__malloc_unlock+0x8>)
 80090c6:	f000 bc10 	b.w	80098ea <__retarget_lock_release_recursive>
 80090ca:	bf00      	nop
 80090cc:	200003b4 	.word	0x200003b4

080090d0 <_realloc_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	4607      	mov	r7, r0
 80090d4:	4614      	mov	r4, r2
 80090d6:	460e      	mov	r6, r1
 80090d8:	b921      	cbnz	r1, 80090e4 <_realloc_r+0x14>
 80090da:	4611      	mov	r1, r2
 80090dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090e0:	f7ff bdc8 	b.w	8008c74 <_malloc_r>
 80090e4:	b922      	cbnz	r2, 80090f0 <_realloc_r+0x20>
 80090e6:	f7ff fd79 	bl	8008bdc <_free_r>
 80090ea:	4625      	mov	r5, r4
 80090ec:	4628      	mov	r0, r5
 80090ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f0:	f000 fc60 	bl	80099b4 <_malloc_usable_size_r>
 80090f4:	42a0      	cmp	r0, r4
 80090f6:	d20f      	bcs.n	8009118 <_realloc_r+0x48>
 80090f8:	4621      	mov	r1, r4
 80090fa:	4638      	mov	r0, r7
 80090fc:	f7ff fdba 	bl	8008c74 <_malloc_r>
 8009100:	4605      	mov	r5, r0
 8009102:	2800      	cmp	r0, #0
 8009104:	d0f2      	beq.n	80090ec <_realloc_r+0x1c>
 8009106:	4631      	mov	r1, r6
 8009108:	4622      	mov	r2, r4
 800910a:	f7ff f9c9 	bl	80084a0 <memcpy>
 800910e:	4631      	mov	r1, r6
 8009110:	4638      	mov	r0, r7
 8009112:	f7ff fd63 	bl	8008bdc <_free_r>
 8009116:	e7e9      	b.n	80090ec <_realloc_r+0x1c>
 8009118:	4635      	mov	r5, r6
 800911a:	e7e7      	b.n	80090ec <_realloc_r+0x1c>

0800911c <__sfputc_r>:
 800911c:	6893      	ldr	r3, [r2, #8]
 800911e:	b410      	push	{r4}
 8009120:	3b01      	subs	r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	6093      	str	r3, [r2, #8]
 8009126:	da07      	bge.n	8009138 <__sfputc_r+0x1c>
 8009128:	6994      	ldr	r4, [r2, #24]
 800912a:	42a3      	cmp	r3, r4
 800912c:	db01      	blt.n	8009132 <__sfputc_r+0x16>
 800912e:	290a      	cmp	r1, #10
 8009130:	d102      	bne.n	8009138 <__sfputc_r+0x1c>
 8009132:	bc10      	pop	{r4}
 8009134:	f000 b94a 	b.w	80093cc <__swbuf_r>
 8009138:	6813      	ldr	r3, [r2, #0]
 800913a:	1c58      	adds	r0, r3, #1
 800913c:	6010      	str	r0, [r2, #0]
 800913e:	7019      	strb	r1, [r3, #0]
 8009140:	4608      	mov	r0, r1
 8009142:	bc10      	pop	{r4}
 8009144:	4770      	bx	lr

08009146 <__sfputs_r>:
 8009146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009148:	4606      	mov	r6, r0
 800914a:	460f      	mov	r7, r1
 800914c:	4614      	mov	r4, r2
 800914e:	18d5      	adds	r5, r2, r3
 8009150:	42ac      	cmp	r4, r5
 8009152:	d101      	bne.n	8009158 <__sfputs_r+0x12>
 8009154:	2000      	movs	r0, #0
 8009156:	e007      	b.n	8009168 <__sfputs_r+0x22>
 8009158:	463a      	mov	r2, r7
 800915a:	4630      	mov	r0, r6
 800915c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009160:	f7ff ffdc 	bl	800911c <__sfputc_r>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d1f3      	bne.n	8009150 <__sfputs_r+0xa>
 8009168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800916c <_vfiprintf_r>:
 800916c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009170:	460d      	mov	r5, r1
 8009172:	4614      	mov	r4, r2
 8009174:	4698      	mov	r8, r3
 8009176:	4606      	mov	r6, r0
 8009178:	b09d      	sub	sp, #116	; 0x74
 800917a:	b118      	cbz	r0, 8009184 <_vfiprintf_r+0x18>
 800917c:	6983      	ldr	r3, [r0, #24]
 800917e:	b90b      	cbnz	r3, 8009184 <_vfiprintf_r+0x18>
 8009180:	f000 fb14 	bl	80097ac <__sinit>
 8009184:	4b89      	ldr	r3, [pc, #548]	; (80093ac <_vfiprintf_r+0x240>)
 8009186:	429d      	cmp	r5, r3
 8009188:	d11b      	bne.n	80091c2 <_vfiprintf_r+0x56>
 800918a:	6875      	ldr	r5, [r6, #4]
 800918c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800918e:	07d9      	lsls	r1, r3, #31
 8009190:	d405      	bmi.n	800919e <_vfiprintf_r+0x32>
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	059a      	lsls	r2, r3, #22
 8009196:	d402      	bmi.n	800919e <_vfiprintf_r+0x32>
 8009198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800919a:	f000 fba5 	bl	80098e8 <__retarget_lock_acquire_recursive>
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	071b      	lsls	r3, r3, #28
 80091a2:	d501      	bpl.n	80091a8 <_vfiprintf_r+0x3c>
 80091a4:	692b      	ldr	r3, [r5, #16]
 80091a6:	b9eb      	cbnz	r3, 80091e4 <_vfiprintf_r+0x78>
 80091a8:	4629      	mov	r1, r5
 80091aa:	4630      	mov	r0, r6
 80091ac:	f000 f96e 	bl	800948c <__swsetup_r>
 80091b0:	b1c0      	cbz	r0, 80091e4 <_vfiprintf_r+0x78>
 80091b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091b4:	07dc      	lsls	r4, r3, #31
 80091b6:	d50e      	bpl.n	80091d6 <_vfiprintf_r+0x6a>
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	b01d      	add	sp, #116	; 0x74
 80091be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c2:	4b7b      	ldr	r3, [pc, #492]	; (80093b0 <_vfiprintf_r+0x244>)
 80091c4:	429d      	cmp	r5, r3
 80091c6:	d101      	bne.n	80091cc <_vfiprintf_r+0x60>
 80091c8:	68b5      	ldr	r5, [r6, #8]
 80091ca:	e7df      	b.n	800918c <_vfiprintf_r+0x20>
 80091cc:	4b79      	ldr	r3, [pc, #484]	; (80093b4 <_vfiprintf_r+0x248>)
 80091ce:	429d      	cmp	r5, r3
 80091d0:	bf08      	it	eq
 80091d2:	68f5      	ldreq	r5, [r6, #12]
 80091d4:	e7da      	b.n	800918c <_vfiprintf_r+0x20>
 80091d6:	89ab      	ldrh	r3, [r5, #12]
 80091d8:	0598      	lsls	r0, r3, #22
 80091da:	d4ed      	bmi.n	80091b8 <_vfiprintf_r+0x4c>
 80091dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091de:	f000 fb84 	bl	80098ea <__retarget_lock_release_recursive>
 80091e2:	e7e9      	b.n	80091b8 <_vfiprintf_r+0x4c>
 80091e4:	2300      	movs	r3, #0
 80091e6:	9309      	str	r3, [sp, #36]	; 0x24
 80091e8:	2320      	movs	r3, #32
 80091ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ee:	2330      	movs	r3, #48	; 0x30
 80091f0:	f04f 0901 	mov.w	r9, #1
 80091f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80091f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80093b8 <_vfiprintf_r+0x24c>
 80091fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009200:	4623      	mov	r3, r4
 8009202:	469a      	mov	sl, r3
 8009204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009208:	b10a      	cbz	r2, 800920e <_vfiprintf_r+0xa2>
 800920a:	2a25      	cmp	r2, #37	; 0x25
 800920c:	d1f9      	bne.n	8009202 <_vfiprintf_r+0x96>
 800920e:	ebba 0b04 	subs.w	fp, sl, r4
 8009212:	d00b      	beq.n	800922c <_vfiprintf_r+0xc0>
 8009214:	465b      	mov	r3, fp
 8009216:	4622      	mov	r2, r4
 8009218:	4629      	mov	r1, r5
 800921a:	4630      	mov	r0, r6
 800921c:	f7ff ff93 	bl	8009146 <__sfputs_r>
 8009220:	3001      	adds	r0, #1
 8009222:	f000 80aa 	beq.w	800937a <_vfiprintf_r+0x20e>
 8009226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009228:	445a      	add	r2, fp
 800922a:	9209      	str	r2, [sp, #36]	; 0x24
 800922c:	f89a 3000 	ldrb.w	r3, [sl]
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 80a2 	beq.w	800937a <_vfiprintf_r+0x20e>
 8009236:	2300      	movs	r3, #0
 8009238:	f04f 32ff 	mov.w	r2, #4294967295
 800923c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009240:	f10a 0a01 	add.w	sl, sl, #1
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	9307      	str	r3, [sp, #28]
 8009248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800924c:	931a      	str	r3, [sp, #104]	; 0x68
 800924e:	4654      	mov	r4, sl
 8009250:	2205      	movs	r2, #5
 8009252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009256:	4858      	ldr	r0, [pc, #352]	; (80093b8 <_vfiprintf_r+0x24c>)
 8009258:	f7ff f914 	bl	8008484 <memchr>
 800925c:	9a04      	ldr	r2, [sp, #16]
 800925e:	b9d8      	cbnz	r0, 8009298 <_vfiprintf_r+0x12c>
 8009260:	06d1      	lsls	r1, r2, #27
 8009262:	bf44      	itt	mi
 8009264:	2320      	movmi	r3, #32
 8009266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800926a:	0713      	lsls	r3, r2, #28
 800926c:	bf44      	itt	mi
 800926e:	232b      	movmi	r3, #43	; 0x2b
 8009270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009274:	f89a 3000 	ldrb.w	r3, [sl]
 8009278:	2b2a      	cmp	r3, #42	; 0x2a
 800927a:	d015      	beq.n	80092a8 <_vfiprintf_r+0x13c>
 800927c:	4654      	mov	r4, sl
 800927e:	2000      	movs	r0, #0
 8009280:	f04f 0c0a 	mov.w	ip, #10
 8009284:	9a07      	ldr	r2, [sp, #28]
 8009286:	4621      	mov	r1, r4
 8009288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800928c:	3b30      	subs	r3, #48	; 0x30
 800928e:	2b09      	cmp	r3, #9
 8009290:	d94e      	bls.n	8009330 <_vfiprintf_r+0x1c4>
 8009292:	b1b0      	cbz	r0, 80092c2 <_vfiprintf_r+0x156>
 8009294:	9207      	str	r2, [sp, #28]
 8009296:	e014      	b.n	80092c2 <_vfiprintf_r+0x156>
 8009298:	eba0 0308 	sub.w	r3, r0, r8
 800929c:	fa09 f303 	lsl.w	r3, r9, r3
 80092a0:	4313      	orrs	r3, r2
 80092a2:	46a2      	mov	sl, r4
 80092a4:	9304      	str	r3, [sp, #16]
 80092a6:	e7d2      	b.n	800924e <_vfiprintf_r+0xe2>
 80092a8:	9b03      	ldr	r3, [sp, #12]
 80092aa:	1d19      	adds	r1, r3, #4
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	9103      	str	r1, [sp, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bfbb      	ittet	lt
 80092b4:	425b      	neglt	r3, r3
 80092b6:	f042 0202 	orrlt.w	r2, r2, #2
 80092ba:	9307      	strge	r3, [sp, #28]
 80092bc:	9307      	strlt	r3, [sp, #28]
 80092be:	bfb8      	it	lt
 80092c0:	9204      	strlt	r2, [sp, #16]
 80092c2:	7823      	ldrb	r3, [r4, #0]
 80092c4:	2b2e      	cmp	r3, #46	; 0x2e
 80092c6:	d10c      	bne.n	80092e2 <_vfiprintf_r+0x176>
 80092c8:	7863      	ldrb	r3, [r4, #1]
 80092ca:	2b2a      	cmp	r3, #42	; 0x2a
 80092cc:	d135      	bne.n	800933a <_vfiprintf_r+0x1ce>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	3402      	adds	r4, #2
 80092d2:	1d1a      	adds	r2, r3, #4
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	9203      	str	r2, [sp, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	bfb8      	it	lt
 80092dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80092e0:	9305      	str	r3, [sp, #20]
 80092e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093c8 <_vfiprintf_r+0x25c>
 80092e6:	2203      	movs	r2, #3
 80092e8:	4650      	mov	r0, sl
 80092ea:	7821      	ldrb	r1, [r4, #0]
 80092ec:	f7ff f8ca 	bl	8008484 <memchr>
 80092f0:	b140      	cbz	r0, 8009304 <_vfiprintf_r+0x198>
 80092f2:	2340      	movs	r3, #64	; 0x40
 80092f4:	eba0 000a 	sub.w	r0, r0, sl
 80092f8:	fa03 f000 	lsl.w	r0, r3, r0
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	3401      	adds	r4, #1
 8009300:	4303      	orrs	r3, r0
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009308:	2206      	movs	r2, #6
 800930a:	482c      	ldr	r0, [pc, #176]	; (80093bc <_vfiprintf_r+0x250>)
 800930c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009310:	f7ff f8b8 	bl	8008484 <memchr>
 8009314:	2800      	cmp	r0, #0
 8009316:	d03f      	beq.n	8009398 <_vfiprintf_r+0x22c>
 8009318:	4b29      	ldr	r3, [pc, #164]	; (80093c0 <_vfiprintf_r+0x254>)
 800931a:	bb1b      	cbnz	r3, 8009364 <_vfiprintf_r+0x1f8>
 800931c:	9b03      	ldr	r3, [sp, #12]
 800931e:	3307      	adds	r3, #7
 8009320:	f023 0307 	bic.w	r3, r3, #7
 8009324:	3308      	adds	r3, #8
 8009326:	9303      	str	r3, [sp, #12]
 8009328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800932a:	443b      	add	r3, r7
 800932c:	9309      	str	r3, [sp, #36]	; 0x24
 800932e:	e767      	b.n	8009200 <_vfiprintf_r+0x94>
 8009330:	460c      	mov	r4, r1
 8009332:	2001      	movs	r0, #1
 8009334:	fb0c 3202 	mla	r2, ip, r2, r3
 8009338:	e7a5      	b.n	8009286 <_vfiprintf_r+0x11a>
 800933a:	2300      	movs	r3, #0
 800933c:	f04f 0c0a 	mov.w	ip, #10
 8009340:	4619      	mov	r1, r3
 8009342:	3401      	adds	r4, #1
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	4620      	mov	r0, r4
 8009348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800934c:	3a30      	subs	r2, #48	; 0x30
 800934e:	2a09      	cmp	r2, #9
 8009350:	d903      	bls.n	800935a <_vfiprintf_r+0x1ee>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0c5      	beq.n	80092e2 <_vfiprintf_r+0x176>
 8009356:	9105      	str	r1, [sp, #20]
 8009358:	e7c3      	b.n	80092e2 <_vfiprintf_r+0x176>
 800935a:	4604      	mov	r4, r0
 800935c:	2301      	movs	r3, #1
 800935e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009362:	e7f0      	b.n	8009346 <_vfiprintf_r+0x1da>
 8009364:	ab03      	add	r3, sp, #12
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	462a      	mov	r2, r5
 800936a:	4630      	mov	r0, r6
 800936c:	4b15      	ldr	r3, [pc, #84]	; (80093c4 <_vfiprintf_r+0x258>)
 800936e:	a904      	add	r1, sp, #16
 8009370:	f7fd fe1e 	bl	8006fb0 <_printf_float>
 8009374:	4607      	mov	r7, r0
 8009376:	1c78      	adds	r0, r7, #1
 8009378:	d1d6      	bne.n	8009328 <_vfiprintf_r+0x1bc>
 800937a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800937c:	07d9      	lsls	r1, r3, #31
 800937e:	d405      	bmi.n	800938c <_vfiprintf_r+0x220>
 8009380:	89ab      	ldrh	r3, [r5, #12]
 8009382:	059a      	lsls	r2, r3, #22
 8009384:	d402      	bmi.n	800938c <_vfiprintf_r+0x220>
 8009386:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009388:	f000 faaf 	bl	80098ea <__retarget_lock_release_recursive>
 800938c:	89ab      	ldrh	r3, [r5, #12]
 800938e:	065b      	lsls	r3, r3, #25
 8009390:	f53f af12 	bmi.w	80091b8 <_vfiprintf_r+0x4c>
 8009394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009396:	e711      	b.n	80091bc <_vfiprintf_r+0x50>
 8009398:	ab03      	add	r3, sp, #12
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	462a      	mov	r2, r5
 800939e:	4630      	mov	r0, r6
 80093a0:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <_vfiprintf_r+0x258>)
 80093a2:	a904      	add	r1, sp, #16
 80093a4:	f7fe f8a0 	bl	80074e8 <_printf_i>
 80093a8:	e7e4      	b.n	8009374 <_vfiprintf_r+0x208>
 80093aa:	bf00      	nop
 80093ac:	0800a0cc 	.word	0x0800a0cc
 80093b0:	0800a0ec 	.word	0x0800a0ec
 80093b4:	0800a0ac 	.word	0x0800a0ac
 80093b8:	08009f54 	.word	0x08009f54
 80093bc:	08009f5e 	.word	0x08009f5e
 80093c0:	08006fb1 	.word	0x08006fb1
 80093c4:	08009147 	.word	0x08009147
 80093c8:	08009f5a 	.word	0x08009f5a

080093cc <__swbuf_r>:
 80093cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ce:	460e      	mov	r6, r1
 80093d0:	4614      	mov	r4, r2
 80093d2:	4605      	mov	r5, r0
 80093d4:	b118      	cbz	r0, 80093de <__swbuf_r+0x12>
 80093d6:	6983      	ldr	r3, [r0, #24]
 80093d8:	b90b      	cbnz	r3, 80093de <__swbuf_r+0x12>
 80093da:	f000 f9e7 	bl	80097ac <__sinit>
 80093de:	4b21      	ldr	r3, [pc, #132]	; (8009464 <__swbuf_r+0x98>)
 80093e0:	429c      	cmp	r4, r3
 80093e2:	d12b      	bne.n	800943c <__swbuf_r+0x70>
 80093e4:	686c      	ldr	r4, [r5, #4]
 80093e6:	69a3      	ldr	r3, [r4, #24]
 80093e8:	60a3      	str	r3, [r4, #8]
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	071a      	lsls	r2, r3, #28
 80093ee:	d52f      	bpl.n	8009450 <__swbuf_r+0x84>
 80093f0:	6923      	ldr	r3, [r4, #16]
 80093f2:	b36b      	cbz	r3, 8009450 <__swbuf_r+0x84>
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	6820      	ldr	r0, [r4, #0]
 80093f8:	b2f6      	uxtb	r6, r6
 80093fa:	1ac0      	subs	r0, r0, r3
 80093fc:	6963      	ldr	r3, [r4, #20]
 80093fe:	4637      	mov	r7, r6
 8009400:	4283      	cmp	r3, r0
 8009402:	dc04      	bgt.n	800940e <__swbuf_r+0x42>
 8009404:	4621      	mov	r1, r4
 8009406:	4628      	mov	r0, r5
 8009408:	f000 f93c 	bl	8009684 <_fflush_r>
 800940c:	bb30      	cbnz	r0, 800945c <__swbuf_r+0x90>
 800940e:	68a3      	ldr	r3, [r4, #8]
 8009410:	3001      	adds	r0, #1
 8009412:	3b01      	subs	r3, #1
 8009414:	60a3      	str	r3, [r4, #8]
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	6022      	str	r2, [r4, #0]
 800941c:	701e      	strb	r6, [r3, #0]
 800941e:	6963      	ldr	r3, [r4, #20]
 8009420:	4283      	cmp	r3, r0
 8009422:	d004      	beq.n	800942e <__swbuf_r+0x62>
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	07db      	lsls	r3, r3, #31
 8009428:	d506      	bpl.n	8009438 <__swbuf_r+0x6c>
 800942a:	2e0a      	cmp	r6, #10
 800942c:	d104      	bne.n	8009438 <__swbuf_r+0x6c>
 800942e:	4621      	mov	r1, r4
 8009430:	4628      	mov	r0, r5
 8009432:	f000 f927 	bl	8009684 <_fflush_r>
 8009436:	b988      	cbnz	r0, 800945c <__swbuf_r+0x90>
 8009438:	4638      	mov	r0, r7
 800943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800943c:	4b0a      	ldr	r3, [pc, #40]	; (8009468 <__swbuf_r+0x9c>)
 800943e:	429c      	cmp	r4, r3
 8009440:	d101      	bne.n	8009446 <__swbuf_r+0x7a>
 8009442:	68ac      	ldr	r4, [r5, #8]
 8009444:	e7cf      	b.n	80093e6 <__swbuf_r+0x1a>
 8009446:	4b09      	ldr	r3, [pc, #36]	; (800946c <__swbuf_r+0xa0>)
 8009448:	429c      	cmp	r4, r3
 800944a:	bf08      	it	eq
 800944c:	68ec      	ldreq	r4, [r5, #12]
 800944e:	e7ca      	b.n	80093e6 <__swbuf_r+0x1a>
 8009450:	4621      	mov	r1, r4
 8009452:	4628      	mov	r0, r5
 8009454:	f000 f81a 	bl	800948c <__swsetup_r>
 8009458:	2800      	cmp	r0, #0
 800945a:	d0cb      	beq.n	80093f4 <__swbuf_r+0x28>
 800945c:	f04f 37ff 	mov.w	r7, #4294967295
 8009460:	e7ea      	b.n	8009438 <__swbuf_r+0x6c>
 8009462:	bf00      	nop
 8009464:	0800a0cc 	.word	0x0800a0cc
 8009468:	0800a0ec 	.word	0x0800a0ec
 800946c:	0800a0ac 	.word	0x0800a0ac

08009470 <__ascii_wctomb>:
 8009470:	4603      	mov	r3, r0
 8009472:	4608      	mov	r0, r1
 8009474:	b141      	cbz	r1, 8009488 <__ascii_wctomb+0x18>
 8009476:	2aff      	cmp	r2, #255	; 0xff
 8009478:	d904      	bls.n	8009484 <__ascii_wctomb+0x14>
 800947a:	228a      	movs	r2, #138	; 0x8a
 800947c:	f04f 30ff 	mov.w	r0, #4294967295
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	4770      	bx	lr
 8009484:	2001      	movs	r0, #1
 8009486:	700a      	strb	r2, [r1, #0]
 8009488:	4770      	bx	lr
	...

0800948c <__swsetup_r>:
 800948c:	4b32      	ldr	r3, [pc, #200]	; (8009558 <__swsetup_r+0xcc>)
 800948e:	b570      	push	{r4, r5, r6, lr}
 8009490:	681d      	ldr	r5, [r3, #0]
 8009492:	4606      	mov	r6, r0
 8009494:	460c      	mov	r4, r1
 8009496:	b125      	cbz	r5, 80094a2 <__swsetup_r+0x16>
 8009498:	69ab      	ldr	r3, [r5, #24]
 800949a:	b913      	cbnz	r3, 80094a2 <__swsetup_r+0x16>
 800949c:	4628      	mov	r0, r5
 800949e:	f000 f985 	bl	80097ac <__sinit>
 80094a2:	4b2e      	ldr	r3, [pc, #184]	; (800955c <__swsetup_r+0xd0>)
 80094a4:	429c      	cmp	r4, r3
 80094a6:	d10f      	bne.n	80094c8 <__swsetup_r+0x3c>
 80094a8:	686c      	ldr	r4, [r5, #4]
 80094aa:	89a3      	ldrh	r3, [r4, #12]
 80094ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094b0:	0719      	lsls	r1, r3, #28
 80094b2:	d42c      	bmi.n	800950e <__swsetup_r+0x82>
 80094b4:	06dd      	lsls	r5, r3, #27
 80094b6:	d411      	bmi.n	80094dc <__swsetup_r+0x50>
 80094b8:	2309      	movs	r3, #9
 80094ba:	6033      	str	r3, [r6, #0]
 80094bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	e03e      	b.n	8009546 <__swsetup_r+0xba>
 80094c8:	4b25      	ldr	r3, [pc, #148]	; (8009560 <__swsetup_r+0xd4>)
 80094ca:	429c      	cmp	r4, r3
 80094cc:	d101      	bne.n	80094d2 <__swsetup_r+0x46>
 80094ce:	68ac      	ldr	r4, [r5, #8]
 80094d0:	e7eb      	b.n	80094aa <__swsetup_r+0x1e>
 80094d2:	4b24      	ldr	r3, [pc, #144]	; (8009564 <__swsetup_r+0xd8>)
 80094d4:	429c      	cmp	r4, r3
 80094d6:	bf08      	it	eq
 80094d8:	68ec      	ldreq	r4, [r5, #12]
 80094da:	e7e6      	b.n	80094aa <__swsetup_r+0x1e>
 80094dc:	0758      	lsls	r0, r3, #29
 80094de:	d512      	bpl.n	8009506 <__swsetup_r+0x7a>
 80094e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094e2:	b141      	cbz	r1, 80094f6 <__swsetup_r+0x6a>
 80094e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094e8:	4299      	cmp	r1, r3
 80094ea:	d002      	beq.n	80094f2 <__swsetup_r+0x66>
 80094ec:	4630      	mov	r0, r6
 80094ee:	f7ff fb75 	bl	8008bdc <_free_r>
 80094f2:	2300      	movs	r3, #0
 80094f4:	6363      	str	r3, [r4, #52]	; 0x34
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	2300      	movs	r3, #0
 8009500:	6063      	str	r3, [r4, #4]
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	f043 0308 	orr.w	r3, r3, #8
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	6923      	ldr	r3, [r4, #16]
 8009510:	b94b      	cbnz	r3, 8009526 <__swsetup_r+0x9a>
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800951c:	d003      	beq.n	8009526 <__swsetup_r+0x9a>
 800951e:	4621      	mov	r1, r4
 8009520:	4630      	mov	r0, r6
 8009522:	f000 fa07 	bl	8009934 <__smakebuf_r>
 8009526:	89a0      	ldrh	r0, [r4, #12]
 8009528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800952c:	f010 0301 	ands.w	r3, r0, #1
 8009530:	d00a      	beq.n	8009548 <__swsetup_r+0xbc>
 8009532:	2300      	movs	r3, #0
 8009534:	60a3      	str	r3, [r4, #8]
 8009536:	6963      	ldr	r3, [r4, #20]
 8009538:	425b      	negs	r3, r3
 800953a:	61a3      	str	r3, [r4, #24]
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	b943      	cbnz	r3, 8009552 <__swsetup_r+0xc6>
 8009540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009544:	d1ba      	bne.n	80094bc <__swsetup_r+0x30>
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	0781      	lsls	r1, r0, #30
 800954a:	bf58      	it	pl
 800954c:	6963      	ldrpl	r3, [r4, #20]
 800954e:	60a3      	str	r3, [r4, #8]
 8009550:	e7f4      	b.n	800953c <__swsetup_r+0xb0>
 8009552:	2000      	movs	r0, #0
 8009554:	e7f7      	b.n	8009546 <__swsetup_r+0xba>
 8009556:	bf00      	nop
 8009558:	2000003c 	.word	0x2000003c
 800955c:	0800a0cc 	.word	0x0800a0cc
 8009560:	0800a0ec 	.word	0x0800a0ec
 8009564:	0800a0ac 	.word	0x0800a0ac

08009568 <abort>:
 8009568:	2006      	movs	r0, #6
 800956a:	b508      	push	{r3, lr}
 800956c:	f000 fa52 	bl	8009a14 <raise>
 8009570:	2001      	movs	r0, #1
 8009572:	f7f9 fbae 	bl	8002cd2 <_exit>
	...

08009578 <__sflush_r>:
 8009578:	898a      	ldrh	r2, [r1, #12]
 800957a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957e:	4605      	mov	r5, r0
 8009580:	0710      	lsls	r0, r2, #28
 8009582:	460c      	mov	r4, r1
 8009584:	d458      	bmi.n	8009638 <__sflush_r+0xc0>
 8009586:	684b      	ldr	r3, [r1, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	dc05      	bgt.n	8009598 <__sflush_r+0x20>
 800958c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800958e:	2b00      	cmp	r3, #0
 8009590:	dc02      	bgt.n	8009598 <__sflush_r+0x20>
 8009592:	2000      	movs	r0, #0
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800959a:	2e00      	cmp	r6, #0
 800959c:	d0f9      	beq.n	8009592 <__sflush_r+0x1a>
 800959e:	2300      	movs	r3, #0
 80095a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095a4:	682f      	ldr	r7, [r5, #0]
 80095a6:	602b      	str	r3, [r5, #0]
 80095a8:	d032      	beq.n	8009610 <__sflush_r+0x98>
 80095aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	075a      	lsls	r2, r3, #29
 80095b0:	d505      	bpl.n	80095be <__sflush_r+0x46>
 80095b2:	6863      	ldr	r3, [r4, #4]
 80095b4:	1ac0      	subs	r0, r0, r3
 80095b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095b8:	b10b      	cbz	r3, 80095be <__sflush_r+0x46>
 80095ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095bc:	1ac0      	subs	r0, r0, r3
 80095be:	2300      	movs	r3, #0
 80095c0:	4602      	mov	r2, r0
 80095c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095c4:	4628      	mov	r0, r5
 80095c6:	6a21      	ldr	r1, [r4, #32]
 80095c8:	47b0      	blx	r6
 80095ca:	1c43      	adds	r3, r0, #1
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	d106      	bne.n	80095de <__sflush_r+0x66>
 80095d0:	6829      	ldr	r1, [r5, #0]
 80095d2:	291d      	cmp	r1, #29
 80095d4:	d82c      	bhi.n	8009630 <__sflush_r+0xb8>
 80095d6:	4a2a      	ldr	r2, [pc, #168]	; (8009680 <__sflush_r+0x108>)
 80095d8:	40ca      	lsrs	r2, r1
 80095da:	07d6      	lsls	r6, r2, #31
 80095dc:	d528      	bpl.n	8009630 <__sflush_r+0xb8>
 80095de:	2200      	movs	r2, #0
 80095e0:	6062      	str	r2, [r4, #4]
 80095e2:	6922      	ldr	r2, [r4, #16]
 80095e4:	04d9      	lsls	r1, r3, #19
 80095e6:	6022      	str	r2, [r4, #0]
 80095e8:	d504      	bpl.n	80095f4 <__sflush_r+0x7c>
 80095ea:	1c42      	adds	r2, r0, #1
 80095ec:	d101      	bne.n	80095f2 <__sflush_r+0x7a>
 80095ee:	682b      	ldr	r3, [r5, #0]
 80095f0:	b903      	cbnz	r3, 80095f4 <__sflush_r+0x7c>
 80095f2:	6560      	str	r0, [r4, #84]	; 0x54
 80095f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095f6:	602f      	str	r7, [r5, #0]
 80095f8:	2900      	cmp	r1, #0
 80095fa:	d0ca      	beq.n	8009592 <__sflush_r+0x1a>
 80095fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009600:	4299      	cmp	r1, r3
 8009602:	d002      	beq.n	800960a <__sflush_r+0x92>
 8009604:	4628      	mov	r0, r5
 8009606:	f7ff fae9 	bl	8008bdc <_free_r>
 800960a:	2000      	movs	r0, #0
 800960c:	6360      	str	r0, [r4, #52]	; 0x34
 800960e:	e7c1      	b.n	8009594 <__sflush_r+0x1c>
 8009610:	6a21      	ldr	r1, [r4, #32]
 8009612:	2301      	movs	r3, #1
 8009614:	4628      	mov	r0, r5
 8009616:	47b0      	blx	r6
 8009618:	1c41      	adds	r1, r0, #1
 800961a:	d1c7      	bne.n	80095ac <__sflush_r+0x34>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d0c4      	beq.n	80095ac <__sflush_r+0x34>
 8009622:	2b1d      	cmp	r3, #29
 8009624:	d001      	beq.n	800962a <__sflush_r+0xb2>
 8009626:	2b16      	cmp	r3, #22
 8009628:	d101      	bne.n	800962e <__sflush_r+0xb6>
 800962a:	602f      	str	r7, [r5, #0]
 800962c:	e7b1      	b.n	8009592 <__sflush_r+0x1a>
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	e7ad      	b.n	8009594 <__sflush_r+0x1c>
 8009638:	690f      	ldr	r7, [r1, #16]
 800963a:	2f00      	cmp	r7, #0
 800963c:	d0a9      	beq.n	8009592 <__sflush_r+0x1a>
 800963e:	0793      	lsls	r3, r2, #30
 8009640:	bf18      	it	ne
 8009642:	2300      	movne	r3, #0
 8009644:	680e      	ldr	r6, [r1, #0]
 8009646:	bf08      	it	eq
 8009648:	694b      	ldreq	r3, [r1, #20]
 800964a:	eba6 0807 	sub.w	r8, r6, r7
 800964e:	600f      	str	r7, [r1, #0]
 8009650:	608b      	str	r3, [r1, #8]
 8009652:	f1b8 0f00 	cmp.w	r8, #0
 8009656:	dd9c      	ble.n	8009592 <__sflush_r+0x1a>
 8009658:	4643      	mov	r3, r8
 800965a:	463a      	mov	r2, r7
 800965c:	4628      	mov	r0, r5
 800965e:	6a21      	ldr	r1, [r4, #32]
 8009660:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009662:	47b0      	blx	r6
 8009664:	2800      	cmp	r0, #0
 8009666:	dc06      	bgt.n	8009676 <__sflush_r+0xfe>
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	f04f 30ff 	mov.w	r0, #4294967295
 800966e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	e78e      	b.n	8009594 <__sflush_r+0x1c>
 8009676:	4407      	add	r7, r0
 8009678:	eba8 0800 	sub.w	r8, r8, r0
 800967c:	e7e9      	b.n	8009652 <__sflush_r+0xda>
 800967e:	bf00      	nop
 8009680:	20400001 	.word	0x20400001

08009684 <_fflush_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	690b      	ldr	r3, [r1, #16]
 8009688:	4605      	mov	r5, r0
 800968a:	460c      	mov	r4, r1
 800968c:	b913      	cbnz	r3, 8009694 <_fflush_r+0x10>
 800968e:	2500      	movs	r5, #0
 8009690:	4628      	mov	r0, r5
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	b118      	cbz	r0, 800969e <_fflush_r+0x1a>
 8009696:	6983      	ldr	r3, [r0, #24]
 8009698:	b90b      	cbnz	r3, 800969e <_fflush_r+0x1a>
 800969a:	f000 f887 	bl	80097ac <__sinit>
 800969e:	4b14      	ldr	r3, [pc, #80]	; (80096f0 <_fflush_r+0x6c>)
 80096a0:	429c      	cmp	r4, r3
 80096a2:	d11b      	bne.n	80096dc <_fflush_r+0x58>
 80096a4:	686c      	ldr	r4, [r5, #4]
 80096a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d0ef      	beq.n	800968e <_fflush_r+0xa>
 80096ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096b0:	07d0      	lsls	r0, r2, #31
 80096b2:	d404      	bmi.n	80096be <_fflush_r+0x3a>
 80096b4:	0599      	lsls	r1, r3, #22
 80096b6:	d402      	bmi.n	80096be <_fflush_r+0x3a>
 80096b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ba:	f000 f915 	bl	80098e8 <__retarget_lock_acquire_recursive>
 80096be:	4628      	mov	r0, r5
 80096c0:	4621      	mov	r1, r4
 80096c2:	f7ff ff59 	bl	8009578 <__sflush_r>
 80096c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096c8:	4605      	mov	r5, r0
 80096ca:	07da      	lsls	r2, r3, #31
 80096cc:	d4e0      	bmi.n	8009690 <_fflush_r+0xc>
 80096ce:	89a3      	ldrh	r3, [r4, #12]
 80096d0:	059b      	lsls	r3, r3, #22
 80096d2:	d4dd      	bmi.n	8009690 <_fflush_r+0xc>
 80096d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096d6:	f000 f908 	bl	80098ea <__retarget_lock_release_recursive>
 80096da:	e7d9      	b.n	8009690 <_fflush_r+0xc>
 80096dc:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <_fflush_r+0x70>)
 80096de:	429c      	cmp	r4, r3
 80096e0:	d101      	bne.n	80096e6 <_fflush_r+0x62>
 80096e2:	68ac      	ldr	r4, [r5, #8]
 80096e4:	e7df      	b.n	80096a6 <_fflush_r+0x22>
 80096e6:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <_fflush_r+0x74>)
 80096e8:	429c      	cmp	r4, r3
 80096ea:	bf08      	it	eq
 80096ec:	68ec      	ldreq	r4, [r5, #12]
 80096ee:	e7da      	b.n	80096a6 <_fflush_r+0x22>
 80096f0:	0800a0cc 	.word	0x0800a0cc
 80096f4:	0800a0ec 	.word	0x0800a0ec
 80096f8:	0800a0ac 	.word	0x0800a0ac

080096fc <std>:
 80096fc:	2300      	movs	r3, #0
 80096fe:	b510      	push	{r4, lr}
 8009700:	4604      	mov	r4, r0
 8009702:	e9c0 3300 	strd	r3, r3, [r0]
 8009706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800970a:	6083      	str	r3, [r0, #8]
 800970c:	8181      	strh	r1, [r0, #12]
 800970e:	6643      	str	r3, [r0, #100]	; 0x64
 8009710:	81c2      	strh	r2, [r0, #14]
 8009712:	6183      	str	r3, [r0, #24]
 8009714:	4619      	mov	r1, r3
 8009716:	2208      	movs	r2, #8
 8009718:	305c      	adds	r0, #92	; 0x5c
 800971a:	f7fd fba3 	bl	8006e64 <memset>
 800971e:	4b05      	ldr	r3, [pc, #20]	; (8009734 <std+0x38>)
 8009720:	6224      	str	r4, [r4, #32]
 8009722:	6263      	str	r3, [r4, #36]	; 0x24
 8009724:	4b04      	ldr	r3, [pc, #16]	; (8009738 <std+0x3c>)
 8009726:	62a3      	str	r3, [r4, #40]	; 0x28
 8009728:	4b04      	ldr	r3, [pc, #16]	; (800973c <std+0x40>)
 800972a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800972c:	4b04      	ldr	r3, [pc, #16]	; (8009740 <std+0x44>)
 800972e:	6323      	str	r3, [r4, #48]	; 0x30
 8009730:	bd10      	pop	{r4, pc}
 8009732:	bf00      	nop
 8009734:	08009a4d 	.word	0x08009a4d
 8009738:	08009a6f 	.word	0x08009a6f
 800973c:	08009aa7 	.word	0x08009aa7
 8009740:	08009acb 	.word	0x08009acb

08009744 <_cleanup_r>:
 8009744:	4901      	ldr	r1, [pc, #4]	; (800974c <_cleanup_r+0x8>)
 8009746:	f000 b8af 	b.w	80098a8 <_fwalk_reent>
 800974a:	bf00      	nop
 800974c:	08009685 	.word	0x08009685

08009750 <__sfmoreglue>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	2568      	movs	r5, #104	; 0x68
 8009754:	1e4a      	subs	r2, r1, #1
 8009756:	4355      	muls	r5, r2
 8009758:	460e      	mov	r6, r1
 800975a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800975e:	f7ff fa89 	bl	8008c74 <_malloc_r>
 8009762:	4604      	mov	r4, r0
 8009764:	b140      	cbz	r0, 8009778 <__sfmoreglue+0x28>
 8009766:	2100      	movs	r1, #0
 8009768:	e9c0 1600 	strd	r1, r6, [r0]
 800976c:	300c      	adds	r0, #12
 800976e:	60a0      	str	r0, [r4, #8]
 8009770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009774:	f7fd fb76 	bl	8006e64 <memset>
 8009778:	4620      	mov	r0, r4
 800977a:	bd70      	pop	{r4, r5, r6, pc}

0800977c <__sfp_lock_acquire>:
 800977c:	4801      	ldr	r0, [pc, #4]	; (8009784 <__sfp_lock_acquire+0x8>)
 800977e:	f000 b8b3 	b.w	80098e8 <__retarget_lock_acquire_recursive>
 8009782:	bf00      	nop
 8009784:	200003b8 	.word	0x200003b8

08009788 <__sfp_lock_release>:
 8009788:	4801      	ldr	r0, [pc, #4]	; (8009790 <__sfp_lock_release+0x8>)
 800978a:	f000 b8ae 	b.w	80098ea <__retarget_lock_release_recursive>
 800978e:	bf00      	nop
 8009790:	200003b8 	.word	0x200003b8

08009794 <__sinit_lock_acquire>:
 8009794:	4801      	ldr	r0, [pc, #4]	; (800979c <__sinit_lock_acquire+0x8>)
 8009796:	f000 b8a7 	b.w	80098e8 <__retarget_lock_acquire_recursive>
 800979a:	bf00      	nop
 800979c:	200003b3 	.word	0x200003b3

080097a0 <__sinit_lock_release>:
 80097a0:	4801      	ldr	r0, [pc, #4]	; (80097a8 <__sinit_lock_release+0x8>)
 80097a2:	f000 b8a2 	b.w	80098ea <__retarget_lock_release_recursive>
 80097a6:	bf00      	nop
 80097a8:	200003b3 	.word	0x200003b3

080097ac <__sinit>:
 80097ac:	b510      	push	{r4, lr}
 80097ae:	4604      	mov	r4, r0
 80097b0:	f7ff fff0 	bl	8009794 <__sinit_lock_acquire>
 80097b4:	69a3      	ldr	r3, [r4, #24]
 80097b6:	b11b      	cbz	r3, 80097c0 <__sinit+0x14>
 80097b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097bc:	f7ff bff0 	b.w	80097a0 <__sinit_lock_release>
 80097c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097c4:	6523      	str	r3, [r4, #80]	; 0x50
 80097c6:	4b13      	ldr	r3, [pc, #76]	; (8009814 <__sinit+0x68>)
 80097c8:	4a13      	ldr	r2, [pc, #76]	; (8009818 <__sinit+0x6c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80097ce:	42a3      	cmp	r3, r4
 80097d0:	bf08      	it	eq
 80097d2:	2301      	moveq	r3, #1
 80097d4:	4620      	mov	r0, r4
 80097d6:	bf08      	it	eq
 80097d8:	61a3      	streq	r3, [r4, #24]
 80097da:	f000 f81f 	bl	800981c <__sfp>
 80097de:	6060      	str	r0, [r4, #4]
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 f81b 	bl	800981c <__sfp>
 80097e6:	60a0      	str	r0, [r4, #8]
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 f817 	bl	800981c <__sfp>
 80097ee:	2200      	movs	r2, #0
 80097f0:	2104      	movs	r1, #4
 80097f2:	60e0      	str	r0, [r4, #12]
 80097f4:	6860      	ldr	r0, [r4, #4]
 80097f6:	f7ff ff81 	bl	80096fc <std>
 80097fa:	2201      	movs	r2, #1
 80097fc:	2109      	movs	r1, #9
 80097fe:	68a0      	ldr	r0, [r4, #8]
 8009800:	f7ff ff7c 	bl	80096fc <std>
 8009804:	2202      	movs	r2, #2
 8009806:	2112      	movs	r1, #18
 8009808:	68e0      	ldr	r0, [r4, #12]
 800980a:	f7ff ff77 	bl	80096fc <std>
 800980e:	2301      	movs	r3, #1
 8009810:	61a3      	str	r3, [r4, #24]
 8009812:	e7d1      	b.n	80097b8 <__sinit+0xc>
 8009814:	08009d2c 	.word	0x08009d2c
 8009818:	08009745 	.word	0x08009745

0800981c <__sfp>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	4607      	mov	r7, r0
 8009820:	f7ff ffac 	bl	800977c <__sfp_lock_acquire>
 8009824:	4b1e      	ldr	r3, [pc, #120]	; (80098a0 <__sfp+0x84>)
 8009826:	681e      	ldr	r6, [r3, #0]
 8009828:	69b3      	ldr	r3, [r6, #24]
 800982a:	b913      	cbnz	r3, 8009832 <__sfp+0x16>
 800982c:	4630      	mov	r0, r6
 800982e:	f7ff ffbd 	bl	80097ac <__sinit>
 8009832:	3648      	adds	r6, #72	; 0x48
 8009834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009838:	3b01      	subs	r3, #1
 800983a:	d503      	bpl.n	8009844 <__sfp+0x28>
 800983c:	6833      	ldr	r3, [r6, #0]
 800983e:	b30b      	cbz	r3, 8009884 <__sfp+0x68>
 8009840:	6836      	ldr	r6, [r6, #0]
 8009842:	e7f7      	b.n	8009834 <__sfp+0x18>
 8009844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009848:	b9d5      	cbnz	r5, 8009880 <__sfp+0x64>
 800984a:	4b16      	ldr	r3, [pc, #88]	; (80098a4 <__sfp+0x88>)
 800984c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009850:	60e3      	str	r3, [r4, #12]
 8009852:	6665      	str	r5, [r4, #100]	; 0x64
 8009854:	f000 f847 	bl	80098e6 <__retarget_lock_init_recursive>
 8009858:	f7ff ff96 	bl	8009788 <__sfp_lock_release>
 800985c:	2208      	movs	r2, #8
 800985e:	4629      	mov	r1, r5
 8009860:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009864:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009868:	6025      	str	r5, [r4, #0]
 800986a:	61a5      	str	r5, [r4, #24]
 800986c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009870:	f7fd faf8 	bl	8006e64 <memset>
 8009874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800987c:	4620      	mov	r0, r4
 800987e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009880:	3468      	adds	r4, #104	; 0x68
 8009882:	e7d9      	b.n	8009838 <__sfp+0x1c>
 8009884:	2104      	movs	r1, #4
 8009886:	4638      	mov	r0, r7
 8009888:	f7ff ff62 	bl	8009750 <__sfmoreglue>
 800988c:	4604      	mov	r4, r0
 800988e:	6030      	str	r0, [r6, #0]
 8009890:	2800      	cmp	r0, #0
 8009892:	d1d5      	bne.n	8009840 <__sfp+0x24>
 8009894:	f7ff ff78 	bl	8009788 <__sfp_lock_release>
 8009898:	230c      	movs	r3, #12
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	e7ee      	b.n	800987c <__sfp+0x60>
 800989e:	bf00      	nop
 80098a0:	08009d2c 	.word	0x08009d2c
 80098a4:	ffff0001 	.word	0xffff0001

080098a8 <_fwalk_reent>:
 80098a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098ac:	4606      	mov	r6, r0
 80098ae:	4688      	mov	r8, r1
 80098b0:	2700      	movs	r7, #0
 80098b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098ba:	f1b9 0901 	subs.w	r9, r9, #1
 80098be:	d505      	bpl.n	80098cc <_fwalk_reent+0x24>
 80098c0:	6824      	ldr	r4, [r4, #0]
 80098c2:	2c00      	cmp	r4, #0
 80098c4:	d1f7      	bne.n	80098b6 <_fwalk_reent+0xe>
 80098c6:	4638      	mov	r0, r7
 80098c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098cc:	89ab      	ldrh	r3, [r5, #12]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d907      	bls.n	80098e2 <_fwalk_reent+0x3a>
 80098d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098d6:	3301      	adds	r3, #1
 80098d8:	d003      	beq.n	80098e2 <_fwalk_reent+0x3a>
 80098da:	4629      	mov	r1, r5
 80098dc:	4630      	mov	r0, r6
 80098de:	47c0      	blx	r8
 80098e0:	4307      	orrs	r7, r0
 80098e2:	3568      	adds	r5, #104	; 0x68
 80098e4:	e7e9      	b.n	80098ba <_fwalk_reent+0x12>

080098e6 <__retarget_lock_init_recursive>:
 80098e6:	4770      	bx	lr

080098e8 <__retarget_lock_acquire_recursive>:
 80098e8:	4770      	bx	lr

080098ea <__retarget_lock_release_recursive>:
 80098ea:	4770      	bx	lr

080098ec <__swhatbuf_r>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	460e      	mov	r6, r1
 80098f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f4:	4614      	mov	r4, r2
 80098f6:	2900      	cmp	r1, #0
 80098f8:	461d      	mov	r5, r3
 80098fa:	b096      	sub	sp, #88	; 0x58
 80098fc:	da07      	bge.n	800990e <__swhatbuf_r+0x22>
 80098fe:	2300      	movs	r3, #0
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	89b3      	ldrh	r3, [r6, #12]
 8009904:	061a      	lsls	r2, r3, #24
 8009906:	d410      	bmi.n	800992a <__swhatbuf_r+0x3e>
 8009908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800990c:	e00e      	b.n	800992c <__swhatbuf_r+0x40>
 800990e:	466a      	mov	r2, sp
 8009910:	f000 f902 	bl	8009b18 <_fstat_r>
 8009914:	2800      	cmp	r0, #0
 8009916:	dbf2      	blt.n	80098fe <__swhatbuf_r+0x12>
 8009918:	9a01      	ldr	r2, [sp, #4]
 800991a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800991e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009922:	425a      	negs	r2, r3
 8009924:	415a      	adcs	r2, r3
 8009926:	602a      	str	r2, [r5, #0]
 8009928:	e7ee      	b.n	8009908 <__swhatbuf_r+0x1c>
 800992a:	2340      	movs	r3, #64	; 0x40
 800992c:	2000      	movs	r0, #0
 800992e:	6023      	str	r3, [r4, #0]
 8009930:	b016      	add	sp, #88	; 0x58
 8009932:	bd70      	pop	{r4, r5, r6, pc}

08009934 <__smakebuf_r>:
 8009934:	898b      	ldrh	r3, [r1, #12]
 8009936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009938:	079d      	lsls	r5, r3, #30
 800993a:	4606      	mov	r6, r0
 800993c:	460c      	mov	r4, r1
 800993e:	d507      	bpl.n	8009950 <__smakebuf_r+0x1c>
 8009940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	6123      	str	r3, [r4, #16]
 8009948:	2301      	movs	r3, #1
 800994a:	6163      	str	r3, [r4, #20]
 800994c:	b002      	add	sp, #8
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	466a      	mov	r2, sp
 8009952:	ab01      	add	r3, sp, #4
 8009954:	f7ff ffca 	bl	80098ec <__swhatbuf_r>
 8009958:	9900      	ldr	r1, [sp, #0]
 800995a:	4605      	mov	r5, r0
 800995c:	4630      	mov	r0, r6
 800995e:	f7ff f989 	bl	8008c74 <_malloc_r>
 8009962:	b948      	cbnz	r0, 8009978 <__smakebuf_r+0x44>
 8009964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009968:	059a      	lsls	r2, r3, #22
 800996a:	d4ef      	bmi.n	800994c <__smakebuf_r+0x18>
 800996c:	f023 0303 	bic.w	r3, r3, #3
 8009970:	f043 0302 	orr.w	r3, r3, #2
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	e7e3      	b.n	8009940 <__smakebuf_r+0xc>
 8009978:	4b0d      	ldr	r3, [pc, #52]	; (80099b0 <__smakebuf_r+0x7c>)
 800997a:	62b3      	str	r3, [r6, #40]	; 0x28
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	6020      	str	r0, [r4, #0]
 8009980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	9b00      	ldr	r3, [sp, #0]
 8009988:	6120      	str	r0, [r4, #16]
 800998a:	6163      	str	r3, [r4, #20]
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	b15b      	cbz	r3, 80099a8 <__smakebuf_r+0x74>
 8009990:	4630      	mov	r0, r6
 8009992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009996:	f000 f8d1 	bl	8009b3c <_isatty_r>
 800999a:	b128      	cbz	r0, 80099a8 <__smakebuf_r+0x74>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	f023 0303 	bic.w	r3, r3, #3
 80099a2:	f043 0301 	orr.w	r3, r3, #1
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	89a0      	ldrh	r0, [r4, #12]
 80099aa:	4305      	orrs	r5, r0
 80099ac:	81a5      	strh	r5, [r4, #12]
 80099ae:	e7cd      	b.n	800994c <__smakebuf_r+0x18>
 80099b0:	08009745 	.word	0x08009745

080099b4 <_malloc_usable_size_r>:
 80099b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099b8:	1f18      	subs	r0, r3, #4
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bfbc      	itt	lt
 80099be:	580b      	ldrlt	r3, [r1, r0]
 80099c0:	18c0      	addlt	r0, r0, r3
 80099c2:	4770      	bx	lr

080099c4 <_raise_r>:
 80099c4:	291f      	cmp	r1, #31
 80099c6:	b538      	push	{r3, r4, r5, lr}
 80099c8:	4604      	mov	r4, r0
 80099ca:	460d      	mov	r5, r1
 80099cc:	d904      	bls.n	80099d8 <_raise_r+0x14>
 80099ce:	2316      	movs	r3, #22
 80099d0:	6003      	str	r3, [r0, #0]
 80099d2:	f04f 30ff 	mov.w	r0, #4294967295
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099da:	b112      	cbz	r2, 80099e2 <_raise_r+0x1e>
 80099dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099e0:	b94b      	cbnz	r3, 80099f6 <_raise_r+0x32>
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 f830 	bl	8009a48 <_getpid_r>
 80099e8:	462a      	mov	r2, r5
 80099ea:	4601      	mov	r1, r0
 80099ec:	4620      	mov	r0, r4
 80099ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099f2:	f000 b817 	b.w	8009a24 <_kill_r>
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d00a      	beq.n	8009a10 <_raise_r+0x4c>
 80099fa:	1c59      	adds	r1, r3, #1
 80099fc:	d103      	bne.n	8009a06 <_raise_r+0x42>
 80099fe:	2316      	movs	r3, #22
 8009a00:	6003      	str	r3, [r0, #0]
 8009a02:	2001      	movs	r0, #1
 8009a04:	e7e7      	b.n	80099d6 <_raise_r+0x12>
 8009a06:	2400      	movs	r4, #0
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a0e:	4798      	blx	r3
 8009a10:	2000      	movs	r0, #0
 8009a12:	e7e0      	b.n	80099d6 <_raise_r+0x12>

08009a14 <raise>:
 8009a14:	4b02      	ldr	r3, [pc, #8]	; (8009a20 <raise+0xc>)
 8009a16:	4601      	mov	r1, r0
 8009a18:	6818      	ldr	r0, [r3, #0]
 8009a1a:	f7ff bfd3 	b.w	80099c4 <_raise_r>
 8009a1e:	bf00      	nop
 8009a20:	2000003c 	.word	0x2000003c

08009a24 <_kill_r>:
 8009a24:	b538      	push	{r3, r4, r5, lr}
 8009a26:	2300      	movs	r3, #0
 8009a28:	4d06      	ldr	r5, [pc, #24]	; (8009a44 <_kill_r+0x20>)
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	4611      	mov	r1, r2
 8009a30:	602b      	str	r3, [r5, #0]
 8009a32:	f7f9 f93e 	bl	8002cb2 <_kill>
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	d102      	bne.n	8009a40 <_kill_r+0x1c>
 8009a3a:	682b      	ldr	r3, [r5, #0]
 8009a3c:	b103      	cbz	r3, 8009a40 <_kill_r+0x1c>
 8009a3e:	6023      	str	r3, [r4, #0]
 8009a40:	bd38      	pop	{r3, r4, r5, pc}
 8009a42:	bf00      	nop
 8009a44:	200003ac 	.word	0x200003ac

08009a48 <_getpid_r>:
 8009a48:	f7f9 b92c 	b.w	8002ca4 <_getpid>

08009a4c <__sread>:
 8009a4c:	b510      	push	{r4, lr}
 8009a4e:	460c      	mov	r4, r1
 8009a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a54:	f000 f894 	bl	8009b80 <_read_r>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	bfab      	itete	ge
 8009a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a60:	181b      	addge	r3, r3, r0
 8009a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a66:	bfac      	ite	ge
 8009a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a6a:	81a3      	strhlt	r3, [r4, #12]
 8009a6c:	bd10      	pop	{r4, pc}

08009a6e <__swrite>:
 8009a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a72:	461f      	mov	r7, r3
 8009a74:	898b      	ldrh	r3, [r1, #12]
 8009a76:	4605      	mov	r5, r0
 8009a78:	05db      	lsls	r3, r3, #23
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	4616      	mov	r6, r2
 8009a7e:	d505      	bpl.n	8009a8c <__swrite+0x1e>
 8009a80:	2302      	movs	r3, #2
 8009a82:	2200      	movs	r2, #0
 8009a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a88:	f000 f868 	bl	8009b5c <_lseek_r>
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	4632      	mov	r2, r6
 8009a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	4628      	mov	r0, r5
 8009a98:	463b      	mov	r3, r7
 8009a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa2:	f000 b817 	b.w	8009ad4 <_write_r>

08009aa6 <__sseek>:
 8009aa6:	b510      	push	{r4, lr}
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aae:	f000 f855 	bl	8009b5c <_lseek_r>
 8009ab2:	1c43      	adds	r3, r0, #1
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	bf15      	itete	ne
 8009ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ac2:	81a3      	strheq	r3, [r4, #12]
 8009ac4:	bf18      	it	ne
 8009ac6:	81a3      	strhne	r3, [r4, #12]
 8009ac8:	bd10      	pop	{r4, pc}

08009aca <__sclose>:
 8009aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ace:	f000 b813 	b.w	8009af8 <_close_r>
	...

08009ad4 <_write_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4608      	mov	r0, r1
 8009ada:	4611      	mov	r1, r2
 8009adc:	2200      	movs	r2, #0
 8009ade:	4d05      	ldr	r5, [pc, #20]	; (8009af4 <_write_r+0x20>)
 8009ae0:	602a      	str	r2, [r5, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7f9 f91c 	bl	8002d20 <_write>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_write_r+0x1e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_write_r+0x1e>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	200003ac 	.word	0x200003ac

08009af8 <_close_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	2300      	movs	r3, #0
 8009afc:	4d05      	ldr	r5, [pc, #20]	; (8009b14 <_close_r+0x1c>)
 8009afe:	4604      	mov	r4, r0
 8009b00:	4608      	mov	r0, r1
 8009b02:	602b      	str	r3, [r5, #0]
 8009b04:	f7f9 f928 	bl	8002d58 <_close>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d102      	bne.n	8009b12 <_close_r+0x1a>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	b103      	cbz	r3, 8009b12 <_close_r+0x1a>
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	200003ac 	.word	0x200003ac

08009b18 <_fstat_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4d06      	ldr	r5, [pc, #24]	; (8009b38 <_fstat_r+0x20>)
 8009b1e:	4604      	mov	r4, r0
 8009b20:	4608      	mov	r0, r1
 8009b22:	4611      	mov	r1, r2
 8009b24:	602b      	str	r3, [r5, #0]
 8009b26:	f7f9 f922 	bl	8002d6e <_fstat>
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	d102      	bne.n	8009b34 <_fstat_r+0x1c>
 8009b2e:	682b      	ldr	r3, [r5, #0]
 8009b30:	b103      	cbz	r3, 8009b34 <_fstat_r+0x1c>
 8009b32:	6023      	str	r3, [r4, #0]
 8009b34:	bd38      	pop	{r3, r4, r5, pc}
 8009b36:	bf00      	nop
 8009b38:	200003ac 	.word	0x200003ac

08009b3c <_isatty_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4d05      	ldr	r5, [pc, #20]	; (8009b58 <_isatty_r+0x1c>)
 8009b42:	4604      	mov	r4, r0
 8009b44:	4608      	mov	r0, r1
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	f7f9 f920 	bl	8002d8c <_isatty>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d102      	bne.n	8009b56 <_isatty_r+0x1a>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	b103      	cbz	r3, 8009b56 <_isatty_r+0x1a>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	200003ac 	.word	0x200003ac

08009b5c <_lseek_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	4611      	mov	r1, r2
 8009b64:	2200      	movs	r2, #0
 8009b66:	4d05      	ldr	r5, [pc, #20]	; (8009b7c <_lseek_r+0x20>)
 8009b68:	602a      	str	r2, [r5, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f7f9 f918 	bl	8002da0 <_lseek>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_lseek_r+0x1e>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_lseek_r+0x1e>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	200003ac 	.word	0x200003ac

08009b80 <_read_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	4611      	mov	r1, r2
 8009b88:	2200      	movs	r2, #0
 8009b8a:	4d05      	ldr	r5, [pc, #20]	; (8009ba0 <_read_r+0x20>)
 8009b8c:	602a      	str	r2, [r5, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f7f9 f8a9 	bl	8002ce6 <_read>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_read_r+0x1e>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_read_r+0x1e>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	200003ac 	.word	0x200003ac

08009ba4 <_init>:
 8009ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba6:	bf00      	nop
 8009ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009baa:	bc08      	pop	{r3}
 8009bac:	469e      	mov	lr, r3
 8009bae:	4770      	bx	lr

08009bb0 <_fini>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	bf00      	nop
 8009bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb6:	bc08      	pop	{r3}
 8009bb8:	469e      	mov	lr, r3
 8009bba:	4770      	bx	lr
